//
//  ShareViewController.m
//  ShareEx
//
//  Created by hilee on 24/10/2019.
//  Copyright © 2019 com.dbvalley. All rights reserved.
//

#import "ShareViewController.h"

@interface ShareViewController (){
    int setCount;
    UIActivityIndicatorView *indicator;
    NSString *callScheme;
    NSString *shareGroupName;
}
@end

@implementation ShareViewController

-(void)viewDidLoad{
    NSLog(@"%s", __func__);
    
    //디비밸리 테스트
//    callScheme = @"com.dbvalley.mfinity.sns";
//    appGroup = @"group.sns.share";

    //현대중공업
    callScheme = @"hhi.mobile.ios.sns";
    shareGroupName = @"group.hhi.sns.share";
    
    indicator = [[UIActivityIndicatorView alloc] init];
    [indicator setFrame:CGRectMake(0, 0, 50, 50)];
    [indicator setCenter:self.view.center];
    [indicator setActivityIndicatorViewStyle:UIActivityIndicatorViewStyleGray];
    [self.view addSubview:indicator];
    [indicator startAnimating];
    
    self.modalPresentationStyle = UIModalPresentationFullScreen;
    
    [self dataConvert];
}

- (NSString *)stringFromDeviceToken:(NSData *)deviceToken {
    NSUInteger length = deviceToken.length;
    if (length == 0) {
        return nil;
    }
    const unsigned char *buffer = deviceToken.bytes;
    NSMutableString *hexString  = [NSMutableString stringWithCapacity:(length * 2)];
    for (int i = 0; i < length; ++i) {
        [hexString appendFormat:@"%02x", buffer[i]];
    }
    return [hexString copy];
}

-(void)dataConvert{
    setCount = 0;
    NSMutableArray *arr = [NSMutableArray array];
    NSUserDefaults *shareDefaults = [[NSUserDefaults alloc] initWithSuiteName:shareGroupName];
    
    for (NSExtensionItem *item in self.extensionContext.inputItems) {
        NSUInteger *count = item.attachments.count;
        NSLog(@"count : %lu", count);
        
        for (NSItemProvider *itemProvider in item.attachments) {
            if ([itemProvider hasItemConformingToTypeIdentifier:(NSString *)kUTTypeImage]) {
                [itemProvider loadItemForTypeIdentifier:(NSString *)kUTTypeImage options:nil completionHandler:^(id<NSSecureCoding> item, NSError *error) {
                    NSString *str = [NSString stringWithFormat:@"%@",(NSURL*)item];
                    NSLog(@"str : %@", str);
                    
                    NSData *imgData = [[NSData alloc] initWithContentsOfURL:(NSURL*)item];
                    float dataSize = ((CGFloat)imgData.length)/1024/1024;
                    NSLog(@"img dataSize : %f", dataSize);
                    
                    if(dataSize<=20){
                        NSMutableDictionary *dict = [NSMutableDictionary dictionary];
                        [dict setObject:@"IMG" forKey:@"TYPE"];
                        [dict setObject:imgData forKey:@"VALUE"];

                        [arr addObject:dict];

                        [shareDefaults setObject:arr forKey:@"SHARE_ITEM"];
                        [shareDefaults synchronize];
                        
                        NSLog(@"SHARE_ITEM.. : %@", [shareDefaults objectForKey:@"SHARE_ITEM"]);

                        setCount++;
                        if(setCount==count) [self dataConvertFinished];

                    } else {
                        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:NSLocalizedString(@"share_item_size_over", @"share_item_size_over") preferredStyle:UIAlertControllerStyleAlert];
                        UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                                         handler:^(UIAlertAction * action) {
                                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                                             [self.extensionContext completeRequestReturningItems:@[] completionHandler:nil];
                                                                         }];
                        [alert addAction:okButton];
                        [self presentViewController:alert animated:YES completion:nil];
                    }
                    
                }];
           
            } else if ([itemProvider hasItemConformingToTypeIdentifier:(NSString *)kUTTypeMovie]) {
                [itemProvider loadItemForTypeIdentifier:(NSString *)kUTTypeMovie options:nil completionHandler:^(id<NSSecureCoding> item, NSError *error) {
                    NSString *str = [NSString stringWithFormat:@"%@",(NSURL*)item];
                    //NSData * videoData = [[NSData alloc] initWithContentsOfURL:(NSURL*)item];
                    
                    AVURLAsset *asset = [AVURLAsset assetWithURL:(NSURL*)item];
                    AVAssetImageGenerator *imageGenerator = [[AVAssetImageGenerator alloc]initWithAsset:asset];
                    imageGenerator.appliesPreferredTrackTransform = YES;
                    CMTime time = CMTimeMake(1, 1);
                    CGImageRef imageRef = [imageGenerator copyCGImageAtTime:time actualTime:NULL error:NULL];
                    UIImage *thumbnail = [UIImage imageWithCGImage:imageRef];
                    CGImageRelease(imageRef);
                    
                    NSData *thumbData = UIImageJPEGRepresentation(thumbnail,0.1);
                    
                    NSArray * compatiblePresets = [AVAssetExportSession exportPresetsCompatibleWithAsset:asset];
                    // 비디오가 변환을 지원하는지 확인하십시오.
                    if ([compatiblePresets containsObject:AVAssetExportPresetLowQuality]){
                        // 내보내기 세션 만들기
                        AVAssetExportSession *exportSession = nil;
                        if (@available(iOS 11.0, *)) exportSession = [[AVAssetExportSession alloc]initWithAsset:asset presetName:AVAssetExportPresetHEVCHighestQuality];
                        else exportSession = [[AVAssetExportSession alloc]initWithAsset:asset presetName:AVAssetExportPresetHighestQuality];
                        
                        // 변환 된 비디오를 저장하기위한 임시 경로 만들기
                        NSString *documentsDirectory = [NSSearchPathForDirectoriesInDomains (NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];
                        NSString *myDocumentPath = [documentsDirectory stringByAppendingPathComponent:@"SHARE_VIDEO.mp4"];
                        NSURL *url = [[NSURL alloc] initFileURLWithPath:myDocumentPath];
                        
                        // 파일이 이미 있는지 확인한 다음 이전 파일을 제거합니다.
                        if ([[NSFileManager defaultManager]fileExistsAtPath:myDocumentPath]){
                            [[NSFileManager defaultManager]removeItemAtPath:myDocumentPath error:nil];
                        }
                        exportSession.outputURL = url;
                        // 다른 파일 형식 (예 : .3gp)으로 만들려면 출력 파일 형식을 설정합니다.
                        exportSession.outputFileType = AVFileTypeMPEG4 ;
                        exportSession.shouldOptimizeForNetworkUse = YES ;
                        
                        [exportSession exportAsynchronouslyWithCompletionHandler : ^ {
                            switch ([exportSession status ])
                            {
                                case AVAssetExportSessionStatusFailed:
                                    NSLog (@"세션 내보내기 실패");
                                    break ;
                                case AVAssetExportSessionStatusCancelled:
                                    NSLog (@"Export canceled");
                                    break ;
                                case AVAssetExportSessionStatusExporting:
                                    NSLog(@"video conversion exporting");
                                    break;
                                case AVAssetExportSessionStatusWaiting:
                                    NSLog(@"video conversion is waiting");
                                    break;
                                case AVAssetExportSessionStatusUnknown:
                                    NSLog(@"video converstion status unknown");
                                    break;
                                case AVAssetExportSessionStatusCompleted:
                                {
                                    // 비디오 변환 완료
                                    NSLog (@"성공!");
                                    NSLog(@"url : %@", url);
                                    NSData *videoData = [NSData dataWithContentsOfURL:url];
                                    
                                    float dataSize = ((CGFloat)videoData.length)/1024/1024;
                                    NSLog(@"video dataSize : %f", dataSize);
                                    
                                    if(dataSize<=20){
                                        // 파일이 이미 있는지 확인한 다음 이전 파일을 제거합니다.
                                        if ([[NSFileManager defaultManager]fileExistsAtPath:myDocumentPath]){
                                            NSLog(@"데이터변환 후 삭제");
                                            [[NSFileManager defaultManager]removeItemAtPath:myDocumentPath error:nil];
                                        }
                                        
                                        NSMutableDictionary *dict = [NSMutableDictionary dictionary];
                                        [dict setObject:@"VIDEO" forKey:@"TYPE"];
                                        [dict setObject:thumbData forKey:@"VIDEO_THUMB"];
                                        [dict setObject:videoData forKey:@"VIDEO_DATA"];
                                        [arr addObject:dict];
                                        
                                        [shareDefaults setObject:arr forKey:@"SHARE_ITEM"];
                                        [shareDefaults synchronize];
                                        
                                        setCount++;
                                        if(setCount==count) [self dataConvertFinished];
                                        
                                    } else {
                                        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:NSLocalizedString(@"share_item_size_over", @"share_item_size_over") preferredStyle:UIAlertControllerStyleAlert];
                                        UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                                                         handler:^(UIAlertAction * action) {
                                                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                                                             [self.extensionContext completeRequestReturningItems:@[] completionHandler:nil];
                                                                                         }];
                                        [alert addAction:okButton];
                                        [self presentViewController:alert animated:YES completion:nil];
                                    }
                                    
                                }
                                    break ;
                                default :
                                    break ;
                            }
                        }];
                    }
                    else {
                        NSLog (@"지원되지 않는 비디오 파일!");
                    }
                }];
                
            }
        }
    }
    
}

-(void)dataConvertFinished{
    NSLog(@"%s", __func__);
    [indicator stopAnimating];
    
    NSString *sendUrl = [NSString stringWithFormat:@"%@.ShareEx", callScheme];
    NSString *callUrl = [NSString stringWithFormat:@"%@://?call=%@", callScheme, sendUrl];
    NSLog(@"callUrl : %@", callUrl);
    
    NSURL *destinationURL = [NSURL URLWithString:callUrl];
    
    NSString *className = [[NSString alloc] initWithData:[NSData dataWithBytes:(unsigned char []){0x55, 0x49, 0x41, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E} length:13] encoding:NSASCIIStringEncoding];
    NSLog(@"className : %@", className);
    if (NSClassFromString(className)) {
        id object = [NSClassFromString(className) performSelector:@selector(sharedApplication)];
        NSLog(@"object : %@", object);

        NSLog(@"ShareView Call openURL");
        [object performSelector:@selector(openURL:) withObject:destinationURL];
    }
    
    [self.extensionContext completeRequestReturningItems:@[] completionHandler:nil];
}

-(void)dataConvertFailed{
    [indicator stopAnimating];
    
    UIAlertController *alert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"파일 변환에 실패하였습니다. \n다시 시도 해주세요.", @"")] message:nil preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                     handler:^(UIAlertAction * action) {
                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                         [self.extensionContext completeRequestReturningItems:nil completionHandler:nil];
                                                     }];
    
    [alert addAction:okButton];
    [self presentViewController:alert animated:YES completion:nil];
    
    [self.extensionContext completeRequestReturningItems:@[] completionHandler:nil];
}


/*
- (BOOL)isContentValid {
    // Do validation of contentText and/or NSExtensionContext attachments here
    return YES;
}

- (void)didSelectPost {
    // This is called after the user selects Post. Do the upload of contentText and/or NSExtensionContext attachments.
    
    // Inform the host that we're done, so it un-blocks its UI. Note: Alternatively you could call super's -didSelectPost, which will similarly complete the extension context.
    [self.extensionContext completeRequestReturningItems:@[] completionHandler:nil];
}

- (NSArray *)configurationItems {
    // To add configuration options via table cells at the bottom of the sheet, return an array of SLComposeSheetConfigurationItem here.
    return @[];
}
*/

@end
