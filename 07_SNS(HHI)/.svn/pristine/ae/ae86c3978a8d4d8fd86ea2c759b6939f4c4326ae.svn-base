//
//  ChatViewController.m
//  mfinity_sns
//
//  Created by hilee on 2017. 4. 21..
//  Copyright © 2017년 com.dbvalley. All rights reserved.
//

#import "ChatViewController.h"
#import "ChatSendViewCell.h"
#import "ChatReceiveViewCell.h"
#import "DateLabelViewCell.h"
#import "ChatSendFileCell.h"
#import "ChatReceiveFileCell.h"
#import "SystemLabelViewCell.h"
#import "ChatInviteSendCell.h"
#import "ChatInviteReceiveCell.h"
#import "LongChatSendViewCell.h"
#import "LongChatReceiveViewCell.h"
#import "LongChatViewController.h"

#import "AttachView.h"
#import "LoginViewController.h"
#import "AFNetworkReachabilityManager.h"
#import "RightSideViewController.h"
#import "PHLibListViewController.h"
#import "ImgDownloadViewController.h"
#import "HDNotificationView.h"
#import "WebViewController.h"
#import "MFDBHelper.h"

#import "CustomHeaderViewController.h"
#import "ChatToastView.h"

#define MODEL_NAME [[UIDevice currentDevice] modelName]
#define REFRESH_TABLEVIEW_DEFAULT_ROW               64.f
#define REFRESH_HEADER_DEFAULT_HEIGHT               64.f

#define DEGREES_TO_RADIANS(angle) ((angle) / 180.0 * M_PI)

#define USER_NAME_CONSTANT 20
#define BUBBLE_CONSTANT 33

#define LABEL_DEFAULT_HEIGHT            21.f
#define LABEL_DEFAUlT_WIDTH             185.f
#define LABEL_MAX_HEIGHT                100.f

#define CHAT_LOAD_COUNT 50


@interface ChatViewController() {
   AppDelegate *appDelegate;
   SDImageCache *imgCache;
   BOOL socketFail;
   int alreadyFail;
   
   NSUInteger msgDataCnt;
   NSInteger msg_rIdx;
   int missedCnt;
   int tmpMissedCnt;
   int uploadCnt;
   
   UIImage *imgMsg;
   UIImage *imgRecvMsg;
   NSNumber *unReadCnt;
   
   float tableBottom;
   int loadMsgCnt;
   int beforeRowCnt;
   int afterRowCnt;

   NSMutableDictionary *snsDict;
   NSString *mediaType;
   NSMutableArray *mediaFileArr;
   int setCount;
   NSMutableArray *resultArr;
   NSString *videoThumbName;
   
   BOOL isScroll;
   NSString *chatRoomType;
   
   NSString *joinSnsName;
}
@property (nonatomic,strong)NSTimer *timer;

@property (strong, nonatomic) AttachView *attachView;
@property (strong, nonatomic) ChatToastView *toastView;

@property (strong, nonatomic) ChatMessageData *msgData;
@property (weak, nonatomic) NSString *myUserNo;
@property (strong, nonatomic) NSMutableDictionary *sendDict;
@property (strong, nonatomic) NSMutableDictionary *recvDict;

@property (strong, nonatomic) NSMutableDictionary *firstAddMsg;
@property (strong, nonatomic) NSMutableDictionary *msgDeleteDict;
@property (strong, nonatomic) NSMutableDictionary *msgResendDict;


@end

@implementation ChatViewController

- (void)viewDidLoad {
   [super viewDidLoad];
   
#ifdef DEBUG
   NSLog(@"ChatViewController fromSegue : %@", self.fromSegue);
   NSLog(@"ChatViewController roomno : %@", self.roomNo);
#endif
   appDelegate = (AppDelegate *)[UIApplication sharedApplication].delegate;
   
   @try{
      socketFail = NO;
      [self connectSocket];
      
      self.tableView.backgroundColor = [MFUtil myRGBfromHex:@"ABC0D0"]; //카톡배경색(현대중공업)
      
      [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_Chat:) name:@"noti_Chat" object:nil];
      [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_ChatReadPush:) name:@"noti_ChatReadPush" object:nil];
      [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_ChatExit:) name:@"noti_ChatExit" object:nil];
      [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_APNS_ChatReadPush:) name:@"noti_APNS_ChatReadPush" object:nil];
      [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(applicationDidBecomeActive:) name:@"applicationDidBecomeActive" object:nil];
      [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(applicationDidEnterBackground:) name:@"applicationDidEnterBackground" object:nil];
      
      isHideKeyboard = YES;
      
      beforeRowCnt=0;
      afterRowCnt=0;
      
      alreadyFail=0;
      missedCnt = 0;
      tmpMissedCnt = 0;
      rowCnt = 0;
      uploadCnt = 0;
      loadMsgCnt = 0;
      mediaType = @"";
      tableBottom = self.tableView.contentOffset.y;
      
      joinSnsName = @"";
      
      self.msgData = [[ChatMessageData alloc] initwithRoomNo:_roomNo];
      NSLog(@"self.msgData ~~ : %@", self.msgData.chatArray);
      
      self.fileNameArr = [NSMutableArray array];
      
      self.sendingMsgArr = [NSMutableArray array];
      
      _myUserNo = [appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"CUSERNO"]];
      
      imgCache = [SDImageCache sharedImageCache];
      NSString *bundleIdentifier = [[NSBundle mainBundle] bundleIdentifier];
      NSString *cachePath = [NSString stringWithFormat:@"/%@/%@/%@/Cache", [NSHomeDirectory() stringByAppendingPathComponent:@"Documents"], bundleIdentifier, [appDelegate.appPrefs objectForKey:@"COMP_NO"]];
      [imgCache makeDiskCachePath:cachePath];
      
      chatRoomType = [appDelegate.dbHelper selectString:[appDelegate.dbHelper getRoomType:self.roomNo]];
      
      [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillAnimate:) name:UIKeyboardWillShowNotification object:nil];
      [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillAnimate:) name:UIKeyboardWillHideNotification object:nil];
      
      UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapOnTable:)];
      [self.tableView addGestureRecognizer:tap];
      tap.cancelsTouchesInView = NO;
      
      self.inputToolbar.delegate = self;
      //self.inputToolbar.contentView.textView.delegate = self;
      self.inputToolbar.contentView.textView.font = [UIFont preferredFontForTextStyle:UIFontTextStyleBody];
      [self.inputToolbar.contentView.textView setShowsVerticalScrollIndicator:NO];
      
      self.inputToolbar.contentView.textView.pasteDelegate = self;
      self.inputToolbar.contentView.textView.textContainer.maximumNumberOfLines = 0;
      self.inputToolbar.contentView.textView.layer.borderWidth = 0.5f;
      self.inputToolbar.contentView.textView.layer.borderColor = [UIColor lightGrayColor].CGColor;
      self.inputToolbar.contentView.textView.fromSegue = @"CHAT_CONTENT";
      
      self.inputToolbar.contentView.textView.autocorrectionType = UITextAutocorrectionTypeNo; //자동완성끄기
      
      if([chatRoomType isEqualToString:@"0"]){
         //알림톡
         self.inputToolbar.contentView.textView.placeHolder = NSLocalizedString(@"readonly_chatroom_input_msg", @"readonly_chatroom_input_msg");
         self.inputToolbar.contentView.textView.editable = NO;
         
      } else {
         self.inputToolbar.contentView.textView.placeHolder = nil;
         self.inputToolbar.contentView.textView.editable = YES;
      }
      
      //int missedCnt = 0;
      msgDataCnt = self.msgData.chatArray.count;
      for(int i=0; i<msgDataCnt; i++){
         NSString *pushType = [[self.msgData.chatArray objectAtIndex:i]objectForKey:@"TYPE"];
         
         if([pushType isEqualToString:@"MISSED"]){
            missedCnt++;
         }
      }
      
      //테이블 마지막 셀로 스크롤 이동
      if(msgDataCnt > 0) {
         //UITableViewAutomaticDimension사용하니 아래 주석 실행안됨 임시적용코드, 수정필요
         dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            NSInteger row = [self.tableView numberOfRowsInSection:0];
            NSIndexPath *indexPath = [NSIndexPath indexPathForRow:row-1 inSection:0];
            [self.tableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionTop animated:NO];
            
            tableBottom = self.tableView.contentOffset.y;
         });
         
         dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            //[self callChatReadStatus];
            [self socketCheck:@"CHAT_READ_STATUS" :nil :nil];
         });
         
      } else {
         [self scrollToBottomAnimated:YES];
      }
      [self addChatQueue];
      
   } @catch(NSException *exception){
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)viewWillAppear:(BOOL)animated {
   [super viewWillAppear:animated];
   [self.tabBarController.tabBar setHidden:YES];
   
   [SVProgressHUD dismiss];
   
   appDelegate = (AppDelegate *)[UIApplication sharedApplication].delegate;
   appDelegate.toolBarBtnTitle = NSLocalizedString(@"send", @"send");
   appDelegate.isChatViewing = YES;
   
   isScroll = YES;
   
   self.navigationController.navigationBar.translucent = NO;
   self.navigationController.navigationBar.barTintColor = [MFUtil myRGBfromHex:appDelegate.mainThemeColor];
   self.navigationController.navigationBar.backgroundColor = [MFUtil myRGBfromHex:appDelegate.mainThemeColor];
   
//   UIView *statusBar;
//   if (@available(iOS 13, *)) {
//       statusBar = [[UIView alloc]initWithFrame:[UIApplication sharedApplication].keyWindow.windowScene.statusBarManager.statusBarFrame];
//       [[UIApplication sharedApplication].keyWindow addSubview:statusBar];
////      statusBar = [[[UIApplication sharedApplication] valueForKey:@"statusBarWindow"] valueForKey:@"statusBar"];
//   } else {
//       statusBar = [[[UIApplication sharedApplication] valueForKey:@"statusBarWindow"] valueForKey:@"statusBar"];
//   }
//   
//   statusBar.backgroundColor = [MFUtil myRGBfromHex:appDelegate.mainThemeColor];
//   self.navigationController.navigationBar.tintColor = [UIColor whiteColor];
   
   self.tableView.rowHeight = UITableViewAutomaticDimension;
   self.tableView.estimatedRowHeight = 50;
   
   [self callSyncChatUser];
   
   [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_ChatDetailView:) name:@"noti_ChatDetailView" object:nil];
}

-(void)viewDidAppear:(BOOL)animated {
   [super viewDidAppear:animated];
   
   @try{
      if([self.fromSegue isEqualToString:@"NOTI_CHAT_DETAIL"]){
         NSArray *dataSet = [self.notiChatDic objectForKey:@"DATASET"];
         NSString *snsName = [[dataSet objectAtIndex:0] objectForKey:@"SNS_NM"];
         NSString *decodeRoomName = [NSString urlDecodeString:snsName];
         self.navigationItem.titleView = [MFUtil navigationTitleStyle1:decodeRoomName];
         self.fromSegue = nil;

      } else if([self.fromSegue isEqualToString:@"BOARD_ADD_USER_MODAL"]){
         NSString *decodeRoomName = [NSString urlDecodeString:_roomName];
         self.navigationItem.titleView = [MFUtil navigationTitleStyle1:decodeRoomName];
         [self sendInviteMessage];

      } else if([self.fromSegue isEqualToString:@"SHARE_CHAT_MODAL"]){
         //앨범->채팅 공유
         NSString *decodeRoomName = [NSString urlDecodeString:_roomName];
         self.navigationItem.titleView = [MFUtil navigationTitleStyle1:decodeRoomName];
         
         NSUserDefaults *shareDefaults = [[NSUserDefaults alloc] initWithSuiteName:appDelegate.shareGroupName];
         NSArray *shareArr = [shareDefaults objectForKey:@"SHARE_ITEM"];

         resultArr = [NSMutableArray array];

         for(int i=0; i<shareArr.count; i++){
            NSString *type = [[shareArr objectAtIndex:i] objectForKey:@"TYPE"];
            if([type isEqualToString:@"IMG"]){
               UIImage *image = [UIImage imageWithData:[[shareArr objectAtIndex:i] objectForKey:@"VALUE"]];

               NSMutableDictionary *dict = [NSMutableDictionary dictionary];
               [dict setObject:@"IMG" forKey:@"TYPE"];
               [dict setObject:image forKey:@"VALUE"];
               [resultArr addObject:dict];

            } else if([type isEqualToString:@"VIDEO"]){
               NSData *videoData = [[shareArr objectAtIndex:i] objectForKey:@"VIDEO_DATA"];
               NSData *videoThumb = [[shareArr objectAtIndex:i] objectForKey:@"VIDEO_THUMB"];
               UIImage *image = [UIImage imageWithData:videoThumb];

               NSMutableDictionary *dict = [NSMutableDictionary dictionary];
               [dict setObject:@"VIDEO_THUMB" forKey:@"TYPE"];
               [dict setObject:image forKey:@"VALUE"]; //UIImage
               [resultArr addObject:dict];

               NSMutableDictionary *dict2 = [NSMutableDictionary dictionary];
               [dict2 setObject:@"VIDEO" forKey:@"TYPE"];
               [dict2 setObject:videoData forKey:@"VALUE"]; //NSData
               [resultArr addObject:dict2];

            } else if([type isEqualToString:@"FILE"]){

            }
         }

         if(resultArr.count>0) {
            [self saveMediaFiles];
         }

      } else if([self.fromSegue isEqualToString:@"SHARE_FROM_CHAT_MODAL"]||[self.fromSegue isEqualToString:@"SHARE_FROM_POST_MODAL"]){
         //채팅/게시판->채팅 공유
         NSArray *shareArr = [NSArray array];
         if([self.fromSegue isEqualToString:@"SHARE_FROM_CHAT_MODAL"]){
            shareArr = [appDelegate.appPrefs objectForKey:@"SHARE_ITEM_FROM_CHAT"];
         } else if([self.fromSegue isEqualToString:@"SHARE_FROM_POST_MODAL"]){
            shareArr = [appDelegate.appPrefs objectForKey:@"SHARE_ITEM_FROM_POST"];
         }

         resultArr = [NSMutableArray array];

         for(int i=0; i<shareArr.count; i++){
            NSString *type = [[shareArr objectAtIndex:i] objectForKey:@"TYPE"];
            if([type isEqualToString:@"TEXT"]){
               NSString *content = [[shareArr objectAtIndex:i] objectForKey:@"VALUE"];
               [self sendMessage:content];

            } else if([type isEqualToString:@"IMG"]){
               NSData *value = [[shareArr objectAtIndex:i] objectForKey:@"VALUE"];
               UIImage *image = [UIImage imageWithData:value];
               UIImage *thumbImg = [MFUtil getScaledImage:image scaledToMaxWidth:180];

               NSMutableDictionary *dict = [NSMutableDictionary dictionary];
               [dict setObject:@"IMG" forKey:@"TYPE"];
               [dict setObject:thumbImg forKey:@"VALUE"];
               [dict setObject:image forKey:@"ORIGIN"];

               if([[shareArr objectAtIndex:i] objectForKey:@"IS_SHARE"]!=nil){
                  [dict setObject:@"true" forKey:@"IS_SHARE"];
                  [dict setObject:[[shareArr objectAtIndex:i] objectForKey:@"URL"] forKey:@"URL"];
               }

               [resultArr addObject:dict];

            } else if([type isEqualToString:@"VIDEO"]){
               NSData *videoData = [[shareArr objectAtIndex:i] objectForKey:@"VIDEO_DATA"];
               NSData *data = [[shareArr objectAtIndex:i] objectForKey:@"VIDEO_THUMB"];
               UIImage *image = [UIImage imageWithData:data];
               UIImage *thumbImage = [MFUtil getScaledImage:image scaledToMaxWidth:180];

               NSMutableDictionary *dict = [NSMutableDictionary dictionary];
               [dict setObject:@"VIDEO" forKey:@"TYPE"];
               [dict setObject:thumbImage forKey:@"VIDEO_THUMB"];
               [dict setObject:videoData forKey:@"VIDEO_DATA"];
               [dict setObject:image forKey:@"ORIGIN"];

               if([[shareArr objectAtIndex:i] objectForKey:@"IS_SHARE"]!=nil){
                  [dict setObject:@"true" forKey:@"IS_SHARE"];
                  [dict setObject:[[shareArr objectAtIndex:i] objectForKey:@"URL"] forKey:@"URL"];
               }

               [resultArr addObject:dict];


            } else if([type isEqualToString:@"FILE"]){
               NSString *value = [[shareArr objectAtIndex:i] objectForKey:@"VALUE"];
               value = [value stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLFragmentAllowedCharacterSet]];
               NSData *data = [NSData dataWithContentsOfURL:[NSURL URLWithString:value]];

               NSMutableDictionary *dict = [NSMutableDictionary dictionary];
               [dict setObject:@"FILE" forKey:@"TYPE"];
               [dict setObject:value forKey:@"VALUE"];
               [dict setObject:data forKey:@"FILE_DATA"];
               [dict setObject:[value lastPathComponent] forKey:@"FILE_NM"];

               if([[shareArr objectAtIndex:i] objectForKey:@"IS_SHARE"]!=nil){
                  [dict setObject:@"true" forKey:@"IS_SHARE"];
               }

               [resultArr addObject:dict];
            }
         }
         
         if(resultArr.count>0) {
            [self saveMediaFiles];
         }

      } else {
         NSString *decodeRoomName = [NSString urlDecodeString:_roomName];
         self.navigationItem.titleView = [MFUtil navigationTitleStyle1:decodeRoomName];
      }

   } @catch(NSException *exception){
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)viewWillDisappear:(BOOL)animated {
   [super viewWillDisappear:animated];
   
   if(self.tableView.contentSize.height>self.tableView.frame.size.height){
      //NSLog(@"스크롤 내려야함");
      NSString *sqlString = [appDelegate.dbHelper updateChatRoomScrolled:1 roomNo:self.roomNo];
      [appDelegate.dbHelper crudStatement:sqlString];
      
   } else {
      //NSLog(@"스크롤 없어도돼");
      NSString *sqlString = [appDelegate.dbHelper updateChatRoomScrolled:0 roomNo:self.roomNo];
      [appDelegate.dbHelper crudStatement:sqlString];
   }
   
   self.navigationController.navigationBar.translucent = YES;
   appDelegate.isChatViewing = NO;
   
   if (self.isMovingFromParentViewController || self.isBeingDismissed) {
      appDelegate.currChatRoomNo = nil;
      
      if([self.fromSegue isEqualToString:@"SHARE_CHAT_MODAL"]||[self.fromSegue isEqualToString:@"SHARE_FROM_POST_MODAL"]||[self.fromSegue isEqualToString:@"SHARE_FROM_CHAT_MODAL"]){
         self.fromSegue = @"";
         NSUserDefaults *shareDefaults = [[NSUserDefaults alloc] initWithSuiteName:appDelegate.shareGroupName];
         [shareDefaults removeObjectForKey:@"SHARE_ITEM"];
         
         [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_ShareViewClose" object:nil];
      }
   }
   [socket close];
}

- (void)didReceiveMemoryWarning {
   [super didReceiveMemoryWarning];
}

#pragma mark
#pragma mark - Socket
- (void)connectSocket{
   
#ifdef DEBUG
   NSLog(@"Connect Socket...");
#endif

   int usrNo = [[appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"CUSERNO"]] intValue];
   
   socket.delegate = nil;
   socket = nil;
   
//   NSString *socketUrl = @"ws://dev.hhi.co.kr:49175/snsListener/wsListener";
//   NSString *socketUrl = @"ws://touch1.hhi.co.kr/snsListener/wsListener";
   NSString *socketUrl;
   int lastNum = usrNo % 2;
   if (lastNum == 0) socketUrl = appDelegate.socketUrl1;
   else socketUrl = appDelegate.socketUrl2;
   
   NSMutableURLRequest *pushServerRequest = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:socketUrl]];
   NSString *userId = [appDelegate.appPrefs objectForKey:@"USERID"];
   NSString *userNm = [appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"USERNM"]];
   NSString *userpass = [NSString stringWithFormat:@"%@_%@", userId, userNm];
   NSData *plainData = [userpass dataUsingEncoding:NSUTF8StringEncoding];
   userpass = [plainData base64EncodedStringWithOptions:kNilOptions];
   [pushServerRequest setValue:[NSString stringWithFormat:@"Basic %@", userpass] forHTTPHeaderField:@"Authorization"];
   
//   SRWebSocket *newWebSocket  = [[SRWebSocket alloc] initWithURL:[NSURL URLWithString:socketUrl]];
   SRWebSocket *newWebSocket  = [[SRWebSocket alloc] initWithURLRequest:pushServerRequest protocols:nil];
   newWebSocket.delegate = self;
   [newWebSocket open];
}
- (void)webSocketDidOpen:(SRWebSocket *)newWebSocket {
#ifdef DEBUG
   NSLog(@"%s", __func__);
#endif

   socket = newWebSocket;
   socketFail = NO;
   
   alreadyFail=0;
}
- (void)webSocket:(SRWebSocket *)webSocket didFailWithError:(NSError *)error {
#ifdef DEBUG
   NSLog(@"%s, error : %@", __func__, error);
#endif

   if(webSocket!=nil) [webSocket close];
   //socket = nil;
   socketFail = YES;

   alreadyFail++;
   if(alreadyFail==1){
      //소켓연결 실패 시 반대 서버에 붙어야함
      int usrNo = [[appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"CUSERNO"]] intValue];
      NSString *socketUrl;
      int lastNum = usrNo % 2;
      if (lastNum == 0) socketUrl = appDelegate.socketUrl2;
      else socketUrl = appDelegate.socketUrl1;
      
      SRWebSocket *newWebSocket  = [[SRWebSocket alloc] initWithURL:[NSURL URLWithString:socketUrl]];
      newWebSocket.delegate = self;
      [newWebSocket open];
   }
   
}
- (void)webSocket:(SRWebSocket *)webSocket didCloseWithCode:(NSInteger)code reason:(NSString *)reason wasClean:(BOOL)wasClean {
#ifdef DEBUG
   NSLog(@"%s", __func__);
#endif

   if(socket!=nil) [webSocket close];
   socket = nil;
   socketFail = YES;
}

- (void)webSocket:(SRWebSocket *)webSocket didReceiveMessage:(id)message {
#ifdef DEBUG
//   NSLog(@"Socket Receive : %@", message);
#endif
   
}

-(void)socketCheck:(NSString *)type :(NSString *)message :(NSDictionary *)dict{
   //채팅방 입장 시 웹소켓연결->채팅전송시 웹소켓 연결 되있는지 안되있는지 확인->소켓연결 되있으면 소켓전송, 안되어있으면 소켓연결 후 소켓전송
   if(socket==nil) {
      [self connectSocket];
      
      if(socketFail) {
         //소켓연결 실패 시 바로 sendSocket 호출하여 http연결
#ifdef DEBUG
         NSLog(@"소켓연결 실패 시 바로 sendSocket 호출하여 http연결");
#endif
         [self sendSocket:type :message :dict];
         
      } else {
         dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            //소켓연결 성공 시 약간의 텀이 있으므로 0.3초 뒤에 sendSocket 호출
#ifdef DEBUG
            NSLog(@"소켓연결 성공 시 약간의 텀이 있으므로 0.3초 뒤에 sendSocket 호출");
#endif
            [self sendSocket:type :message :dict];
         });
      }
   } else {
      [self sendSocket:type :message :dict];
   }
}

-(void)sendSocket:(NSString *)type :(NSString *)message :(NSDictionary *)dict{
   NSMutableDictionary *socketDict = [NSMutableDictionary dictionary];
   NSMutableDictionary *paramDict = [NSMutableDictionary dictionary];
  
   @try{
      if([type isEqualToString:@"SAVE_CHAT"]){
         NSMutableDictionary *contentDic = [NSMutableDictionary dictionary];
         
         if(dict==nil){
            message = [MFUtil replaceEncodeToChar:message];
            
            NSUInteger textByte = [message lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
            if(textByte>1000) [contentDic setObject:@"LONG_TEXT" forKey:@"TYPE"];
            else [contentDic setObject:@"TEXT" forKey:@"TYPE"];
            [contentDic setObject:message forKey:@"VALUE"];
            
         } else {
            [contentDic setObject:@"INVITE" forKey:@"TYPE"];
            [contentDic setObject:dict forKey:@"VALUE"];
         }
         
         NSData *contentData = [NSJSONSerialization dataWithJSONObject:contentDic options:0 error:nil];
         NSString *contentJson = [[NSString alloc] initWithData:contentData encoding:NSUTF8StringEncoding];
         
         NSData *editJsonData = [NSJSONSerialization dataWithJSONObject:self.editInfoDic options:kNilOptions error:nil];
         NSString *editJsonStr = [[NSString alloc] initWithData:editJsonData encoding:NSUTF8StringEncoding];
         
         NSString *userNo = [MFUtil paramEncryptAndEncode:[NSString stringWithFormat:@"%@",self.myUserNo]];
         NSString *roomNo = [MFUtil paramEncryptAndEncode:[NSString stringWithFormat:@"%@",self.roomNo]];
         NSString *content = [MFUtil paramEncryptAndEncode:contentJson];
         NSString *aditInfo = [MFUtil paramEncryptAndEncode:editJsonStr];
         
         [paramDict setObject:userNo forKey:@"usrNo"];
         [paramDict setObject:roomNo forKey:@"roomNo"];
         [paramDict setObject:content forKey:@"content"];
         [paramDict setObject:aditInfo forKey:@"aditInfo"];
         
         [socketDict setObject:@"saveChat" forKey:@"request"];
         
      } else if([type isEqualToString:@"CHAT_READ_STATUS"]){
         NSString *sqlString = [appDelegate.dbHelper getUnreadChatNoRange:self.roomNo myUserNo:self.myUserNo];
         NSMutableArray *selectArr = [appDelegate.dbHelper selectMutableArray:sqlString];
         
         NSNumber *firstChat = [[selectArr objectAtIndex:0] objectForKey:@"FIRST_CHAT"];
         NSNumber *lastChat = [[selectArr objectAtIndex:0] objectForKey:@"LAST_CHAT"];
         
         if(![[NSString stringWithFormat:@"%@", firstChat] isEqualToString:@"-1"] && ![[NSString stringWithFormat:@"%@", lastChat] isEqualToString:@"-1"]){
            NSString *userNo = [MFUtil paramEncryptAndEncode:[NSString stringWithFormat:@"%@",self.myUserNo]];
            NSString *roomNo = [MFUtil paramEncryptAndEncode:[NSString stringWithFormat:@"%@",self.roomNo]];
            NSString *firstStr = [MFUtil paramEncryptAndEncode:[NSString stringWithFormat:@"%@",firstChat]];
            NSString *lastStr = [MFUtil paramEncryptAndEncode:[NSString stringWithFormat:@"%@",lastChat]];
            
            [paramDict setObject:userNo forKey:@"usrNo"];
            [paramDict setObject:roomNo forKey:@"roomNo"];
            [paramDict setObject:firstStr forKey:@"firstChatNo"];
            [paramDict setObject:lastStr forKey:@"lastChatNo"];
         }
         
         if(paramDict.count<=0){
            appDelegate.currChatRoomNo = self.roomNo;
            
            NSString *sqlString2 = [appDelegate.dbHelper updateChatReadStatus:self.roomNo];
            [appDelegate.dbHelper crudStatement:sqlString2];
         }
         
         [socketDict setObject:@"saveChatReadStatus" forKey:@"request"];
      }
      [socketDict setObject:paramDict forKey:@"request_value"];
      
      if(paramDict.count>0){
         NSData *socketData = [NSJSONSerialization dataWithJSONObject:socketDict options:0 error:nil];
         NSString *socketJson = [[NSString alloc] initWithData:socketData encoding:NSUTF8StringEncoding];
         
         //메시지 소켓전송 성공이면 끝. 실패면 웹서비스 전송
         @try {
            NSError *error;
            if([socket sendString:socketJson error:&error]){
#ifdef DEBUG
               NSLog(@"소켓전송");
#endif
               if([type isEqualToString:@"SAVE_CHAT"]){
                  
               } else if([type isEqualToString:@"CHAT_READ_STATUS"]){
                  appDelegate.currChatRoomNo = self.roomNo;
                  
                  NSString *sqlString2 = [appDelegate.dbHelper updateChatReadStatus:self.roomNo];
                  [appDelegate.dbHelper crudStatement:sqlString2];
               }
            } else {
#ifdef DEBUG
               NSLog(@"http전송");
#endif
               if([type isEqualToString:@"SAVE_CHAT"]){
                  if(dict==nil) [self callSaveChat:message];
                  else [self callSaveInviteChat:dict];

               } else if([type isEqualToString:@"CHAT_READ_STATUS"]){
                  [self callChatReadStatus];
               }
            }
         }
         @catch (NSException *exception) {
            [socket close];
            socket = nil;
            
#ifdef DEBUG
            NSLog(@"Socket Error !");
#endif
         }
      }
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
   
}

- (void)addChatQueue{
   NSString *compNo = [appDelegate.appPrefs objectForKey:@"COMP_NO"];
   //바인드 된 큐 목록
   [appDelegate.bindQueueArr addObject:[NSString stringWithFormat:@"%@.CHAT.%@.%@", appDelegate.dvcType, compNo, self.roomNo]];
}

- (void)tapOnTable:(UITapGestureRecognizer*)tap{
   @try{
      [self.inputToolbar.contentView.textView resignFirstResponder];
      
      for(UIView *subview in [self.view subviews]) {
         if([subview isKindOfClass:[self.toastView class]]) {
            [self.toastView setFrame:CGRectMake(0, self.inputToolbar.frame.origin.y-60, self.tableView.frame.size.width, 60)];
            break;
         }
      }
      
      if(_isFlag){ //미디어버튼
         UIImage *accessoryImage = [UIImage imageNamed:@"btn_add.png"];
         UIImage *normalImage = [accessoryImage jsq_imageMaskedWithColor:[UIColor lightGrayColor]];
         [_mediaButton setImage:normalImage forState:UIControlStateNormal];
         
         _mediaButton.contentMode = UIViewContentModeScaleAspectFit;
         _mediaButton.backgroundColor = [UIColor clearColor];
         
         self.inputToolbar.contentView.textView.inputView = nil;
         [self.inputToolbar.contentView.textView reloadInputViews];
         
         _isFlag = false;
      }
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
   
}

#pragma mark - Message Send
- (void)messagesInputToolbar:(JSQMessagesInputToolbar *)toolbar didPressLeftBarButton:(UIButton *)sender {
   _mediaButton = sender;
   _mediaButton.contentMode = UIViewContentModeScaleAspectFit;
   _mediaButton.imageEdgeInsets = UIEdgeInsetsMake(13,13,13,13);
   
   if([chatRoomType isEqualToString:@"0"]){
      //알림톡
      
   } else {
      if(!_isFlag){
         UIImage *accessoryImage = [UIImage imageNamed:@"btn_close.png"];
         UIImage *normalImage = [accessoryImage jsq_imageMaskedWithColor:[UIColor lightGrayColor]];
         [_mediaButton setImage:normalImage forState:UIControlStateNormal];
         
         if (!_attachView) {
            self.attachView = [[AttachView alloc] initWithFrame:self.attachView.bounds :@"CHAT"];
         }
         
         self.inputToolbar.contentView.textView.inputView = self.attachView;
         [self.inputToolbar.contentView.textView reloadInputViews];
         
         _isFlag = true;
         
      } else{
         UIImage *accessoryImage = [UIImage imageNamed:@"btn_add.png"];
         UIImage *normalImage = [accessoryImage jsq_imageMaskedWithColor:[UIColor lightGrayColor]];
         [_mediaButton setImage:normalImage forState:UIControlStateNormal];
         
         _mediaButton.backgroundColor = [UIColor clearColor];
         
         self.inputToolbar.contentView.textView.inputView = nil;
         [self.inputToolbar.contentView.textView reloadInputViews];
         
         _isFlag = false;
      }
      [self.inputToolbar.contentView.textView becomeFirstResponder];
      
      [self.attachView.cameraButton addTarget:self action:@selector(cameraButtonPressed:) forControlEvents:UIControlEventTouchUpInside];
      [self.attachView.photoButton addTarget:self action:@selector(photoButtonPressed:) forControlEvents:UIControlEventTouchUpInside];
      [self.attachView.videoButton addTarget:self action:@selector(videoButtonPressed:) forControlEvents:UIControlEventTouchUpInside];
      
   }
}

//메시지 전송버튼 클릭이벤트
- (void)messagesInputToolbar:(JSQMessagesInputToolbar *)toolbar didPressRightBarButton:(UIButton *)sender {
   NSString *content = self.inputToolbar.contentView.textView.text;
   [self sendMessage:content];
}

#pragma mark TEXT MSG
-(void)sendMessage:(NSString *)content{
   @try{
      NSString *trimContent = [content stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
      trimContent = [MFUtil replaceEncodeToChar:trimContent];
      
      NSUInteger textByte = [trimContent lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
      
      int count = missedCnt + tmpMissedCnt;
      
      if(![trimContent isEqualToString:@""] && trimContent != nil){
         NSUInteger msgDataCnt = self.msgData.chatArray.count;
         
         NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
         [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
         NSString *date = [dateFormatter stringFromDate:[NSDate date]];
         NSString *dvcID = [appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"DVCID"]];//[MFUtil getUUID];
         
         self.firstAddMsg = [[NSMutableDictionary alloc]init];
         [self.firstAddMsg setObject:self.myUserNo forKey:@"USER_NO"];
         [self.firstAddMsg setObject:self.roomNo forKey:@"ROOM_NO"];
         
         [self.firstAddMsg setObject:date forKey:@"DATE"];
         
         if(textByte>1000) {
            NSData *contentData = [trimContent dataUsingEncoding:NSASCIIStringEncoding];
            contentData = [contentData subdataWithRange:NSMakeRange(0, 1000)];
            NSString *prevStr = [[NSString alloc] initWithBytes:[contentData bytes] length:[contentData length] encoding:NSASCIIStringEncoding];
            
            [self.firstAddMsg setObject:@"LONG_TEXT" forKey:@"CONTENT_TY"];
            [self.firstAddMsg setObject:@"" forKey:@"CONTENT"];
            [self.firstAddMsg setObject:prevStr forKey:@"CONTENT_PREV"];
            
         } else {
            [self.firstAddMsg setObject:@"TEXT" forKey:@"CONTENT_TY"];
            [self.firstAddMsg setObject:trimContent forKey:@"CONTENT"];
            [self.firstAddMsg setObject:@"" forKey:@"CONTENT_PREV"];
         }
         
         [self.firstAddMsg setObject:@"" forKey:@"FILE_NM"];
         
         self.editInfoDic = [NSMutableDictionary dictionary];
         NSIndexPath *rowNo = [NSIndexPath indexPathForItem:(msgDataCnt-count) inSection:0];
         [self.editInfoDic setObject:@"SENDING" forKey:@"TYPE"];
         [self.editInfoDic setObject:[NSNumber numberWithInteger:rowNo.row] forKey:@"TMP_IDX"];
         [self.editInfoDic setObject:dvcID forKey:@"DEVICE_ID"];
         [self.editInfoDic setObject:@"" forKey:@"LOCAL_CONTENT"];
         
         NSError *error;
         NSData *jsonData = [NSJSONSerialization dataWithJSONObject:self.editInfoDic options:0 error:&error];
         NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
         
         [self.firstAddMsg setObject:jsonString forKey:@"ADIT_INFO"];
         
         if(msgDataCnt > 0){
            //메시지가 있는 채팅방일 경우
            [self.msgData.chatArray insertObject:self.firstAddMsg atIndex:msgDataCnt-count];
            
            NSIndexPath *lastCell = [NSIndexPath indexPathForItem:msgDataCnt-count inSection:0];
            [self.tableView beginUpdates];
            [self.tableView insertRowsAtIndexPaths:@[lastCell] withRowAnimation:UITableViewRowAnimationNone];
            [self.tableView endUpdates];
            [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
            
         } else {
            //메시지가 없는 새로운 채팅방일 경우
            [self.msgData.chatArray addObject:self.firstAddMsg];
            [self.tableView reloadData];
            
            NSIndexPath *lastCell = [NSIndexPath indexPathForItem:0 inSection:0];
            [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
         }
         
         self.inputToolbar.contentView.textView.text = nil;
         
         [self.sendingMsgArr addObject:self.firstAddMsg];
         
         dispatch_async(dispatch_get_main_queue(), ^{
            //[self callSaveChat:trimContent];
            [self socketCheck:@"SAVE_CHAT" :trimContent :nil]; //소켓전송
         });
         
         content = nil;
         trimContent = nil;
         
      } else {
         
      }
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}
 
-(BOOL)textView:(MFTextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text{
//   NSUInteger textViewByte = [textView.text lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
//   NSUInteger textByte = [text lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
//   if (textViewByte + textByte > 10){
//      NSLog(@"채팅 5000자 제한");
//      [textView setSelectedRange:NSMakeRange(textView.text.length, 0)];
//      return NO;
//   }
   return YES;
}
- (NSString *)fetchStringWithOriginalString:(NSString *)originalString withByteLength:(NSUInteger)length {
   NSData* originalData=[originalString dataUsingEncoding:NSUTF8StringEncoding];
   const char *originalBytes = originalData.bytes;
   
   for (NSUInteger i = length; i > 0; i--) {
      NSData *data = [NSData dataWithBytes:originalBytes length:i];
      NSString *string = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
      if (string) {
         return string;
      }
   }
   return @"";
}
-(void)textViewDidChange:(MFTextView *)textView{
}
- (void)textViewDidChangeSelection:(MFTextView *)textView {
}
-(BOOL)composerTextView:(MFTextView *)textView shouldPasteWithSender:(id)sender{
   return YES;
}

#pragma mark INVITE MSG
-(void)sendInviteMessage{
   snsDict = [NSMutableDictionary dictionary];
   
   NSString *snsNo = @"";
   NSString *snsNm = @"";
   NSString *snsKind = @"";
   NSString *snsTy = @"";
   NSString *snsNeedAllow = @"";
   NSString *snsDesc = @"";
   NSString *snsCoverImg = @"";
   NSString *snsCreateDate = @"";
   NSString *snsCreateUserNo = @"";
   NSString *snsCreateUserNm = @"";
   NSString *snsMemberCount = @"";
   
   @try {
      snsNo = [self.snsInfoDic objectForKey:@"SNS_NO"];
      snsNm = [NSString urlDecodeString:[self.snsInfoDic objectForKey:@"SNS_NM"]];
      snsKind = [self.snsInfoDic objectForKey:@"SNS_KIND"];
      snsTy = [self.snsInfoDic objectForKey:@"SNS_TY"];
      snsNeedAllow = [self.snsInfoDic objectForKey:@"NEED_ALLOW"];
      snsDesc = [NSString urlDecodeString:[self.snsInfoDic objectForKey:@"SNS_DESC"]];
      snsCoverImg = [NSString urlDecodeString:[self.snsInfoDic objectForKey:@"COVER_IMG"]];
      if([snsCoverImg isEqualToString:@"(null)"]) snsCoverImg = @"";
      snsCreateDate = [NSString urlDecodeString:[self.snsInfoDic objectForKey:@"CREATE_DATE"]];
      snsCreateUserNo = [self.snsInfoDic objectForKey:@"CREATE_USER_NO"];
      snsCreateUserNm = [NSString urlDecodeString:[self.snsInfoDic objectForKey:@"CREATE_USER_NM"]];
      snsMemberCount = [self.snsInfoDic objectForKey:@"USER_COUNT"];
      
      [snsDict setObject:snsNo forKey:@"SNS_NO"];
      [snsDict setObject:snsNm forKey:@"SNS_NM"];
      [snsDict setObject:snsKind forKey:@"SNS_KIND"];
      [snsDict setObject:snsTy forKey:@"SNS_TY"];
      [snsDict setObject:snsNeedAllow forKey:@"SNS_NEED_ALLOW"];
      [snsDict setObject:snsDesc forKey:@"SNS_DESC"];
      [snsDict setObject:snsCoverImg forKey:@"SNS_COVER_IMG"];
      [snsDict setObject:snsCreateDate forKey:@"SNS_CREATE_DATE"];
      [snsDict setObject:snsCreateUserNo forKey:@"SNS_CREATE_USER_NO"];
      [snsDict setObject:snsCreateUserNm forKey:@"SNS_CREATE_USER_NM"];
      [snsDict setObject:snsMemberCount forKey:@"SNS_MEMBER_COUNT"];
      [snsDict setObject:@"INVITE_SNS" forKey:@"INVITE_TYPE"];
      
      NSError *error;
      NSData *snsJsonData = [NSJSONSerialization dataWithJSONObject:snsDict options:0 error:&error];
      NSString *snsJsonStr = [[NSString alloc] initWithData:snsJsonData encoding:NSUTF8StringEncoding];
      
      int count = missedCnt + tmpMissedCnt;
      NSUInteger msgDataCnt = self.msgData.chatArray.count;
      
      NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
      [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSString *date = [dateFormatter stringFromDate:[NSDate date]];
      NSString *dvcID = [appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"DVCID"]];//[MFUtil getUUID];
      
      self.firstAddMsg = [[NSMutableDictionary alloc]init];
      [self.firstAddMsg setObject:self.myUserNo forKey:@"USER_NO"];
      [self.firstAddMsg setObject:self.roomNo forKey:@"ROOM_NO"];
      [self.firstAddMsg setObject:snsJsonStr forKey:@"CONTENT"];
      [self.firstAddMsg setObject:date forKey:@"DATE"];
      
      [self.firstAddMsg setObject:@"INVITE" forKey:@"CONTENT_TY"];
      [self.firstAddMsg setObject:@"" forKey:@"FILE_NM"];
      
      self.editInfoDic = [NSMutableDictionary dictionary];
      NSIndexPath *rowNo = [NSIndexPath indexPathForItem:(msgDataCnt-count) inSection:0];
      [self.editInfoDic setObject:@"SENDING" forKey:@"TYPE"];
      [self.editInfoDic setObject:[NSNumber numberWithInteger:rowNo.row] forKey:@"TMP_IDX"];
      [self.editInfoDic setObject:dvcID forKey:@"DEVICE_ID"];
      [self.editInfoDic setObject:@"" forKey:@"LOCAL_CONTENT"];
      
      NSData *jsonData = [NSJSONSerialization dataWithJSONObject:self.editInfoDic options:0 error:&error];
      NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
      
      [self.firstAddMsg setObject:jsonString forKey:@"ADIT_INFO"];
      
      if(msgDataCnt > 0){
         //메시지가 있는 채팅방일 경우
         [self.msgData.chatArray insertObject:self.firstAddMsg atIndex:msgDataCnt-count];
         
         NSIndexPath *lastCell = [NSIndexPath indexPathForItem:msgDataCnt-count inSection:0];
         [self.tableView beginUpdates];
         [self.tableView insertRowsAtIndexPaths:@[lastCell] withRowAnimation:UITableViewRowAnimationNone];
         [self.tableView endUpdates];
         [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
         
      } else {
         //메시지가 없는 새로운 채팅방일 경우
         [self.msgData.chatArray addObject:self.firstAddMsg];
         [self.tableView reloadData];
         
         NSIndexPath *lastCell = [NSIndexPath indexPathForItem:0 inSection:0];
         [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
      }
      
      self.inputToolbar.contentView.textView.text = nil;
      
      [self.sendingMsgArr addObject:self.firstAddMsg];
      
      dispatch_async(dispatch_get_main_queue(), ^{
         //[self callSaveInviteChat:snsDict];
         [self socketCheck:@"SAVE_CHAT" :nil :snsDict];
      });
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}


- (void)resendMessage:(NSDictionary *)dictionary {
   NSUInteger msgDataCnt = self.msgData.chatArray.count;
   
   @try{
      NSString *roomNo = [dictionary objectForKey:@"ROOM_NO"];
      NSString *chatNo = [dictionary objectForKey:@"CHAT_NO"];
      NSString *contentType = [dictionary objectForKey:@"CONTENT_TY"];
      NSString *content = [dictionary objectForKey:@"CONTENT"];
      
      NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
      [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSString *date = [dateFormatter stringFromDate:[NSDate date]];
      
      int count = missedCnt + tmpMissedCnt;
      
      NSIndexPath *rowNo = [NSIndexPath indexPathForItem:(msgDataCnt-count) inSection:0];
      self.editInfoDic = [NSMutableDictionary dictionary];
      [self.editInfoDic setObject:@"SENDING" forKey:@"TYPE"];
      
      if([contentType isEqualToString:@"TEXT"]||[contentType isEqualToString:@"LONG_TEXT"]){
         [self.editInfoDic setObject:[NSNumber numberWithInteger:rowNo.row] forKey:@"TMP_IDX"];
         [self.editInfoDic setObject:@"" forKey:@"LOCAL_CONTENT"];
         
         NSData* editData = [NSJSONSerialization dataWithJSONObject:self.editInfoDic options:0 error:nil];
         NSString* editJsonData = [[NSString alloc] initWithData:editData encoding:NSUTF8StringEncoding];
         
         [_msgResendDict setObject:editJsonData forKey:@"ADIT_INFO"];
         [_msgResendDict setObject:date forKey:@"DATE"];
         
         [self.sendingMsgArr addObject:_msgResendDict];
         
         //재전송할때 실패메시지를 삭제하는 부분은 웹서비스 완료되면 해야되는일이 아닐까(일단 나중에)
         NSString *sqlString = [appDelegate.dbHelper deleteMissedChat:roomNo chatNo:chatNo];
         [appDelegate.dbHelper crudStatement:sqlString];
         
         [self.msgData.chatArray insertObject:_msgResendDict atIndex:msgDataCnt-count];
         [self.msgData.chatArray removeObjectAtIndex:msg_rIdx+1];
         
         tmpMissedCnt--;
         
         [self.tableView reloadData];
         
         [self socketCheck:@"SAVE_CHAT" :content :nil];
         
         [self scrollToBottomAnimated:YES];
         
      } else {
         NSString *aditInfo = [dictionary objectForKey:@"ADIT_INFO"];
         
         [self.msgData.chatArray insertObject:_msgResendDict atIndex:msgDataCnt-count];
         [self.msgData.chatArray removeObjectAtIndex:self.msgData.chatArray.count-count-1];
         [self.msgData.chatArray removeObjectAtIndex:msg_rIdx];
         tmpMissedCnt--;
         
         NSString *sqlString = [appDelegate.dbHelper deleteMissedChat:roomNo chatNo:chatNo];
         [appDelegate.dbHelper crudStatement:sqlString];
         
         [self scrollToBottomAnimated:YES];
      }
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)touchedMsgFailButton:(NSInteger)indexPath{
   UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:nil message:nil preferredStyle:UIAlertControllerStyleActionSheet];
   UIAlertAction *resendAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"chat_resend", @"chat_resend")
                                                          style:UIAlertActionStyleDefault
                                                        handler:^(UIAlertAction * action){
                                                           _msgResendDict = [[NSMutableDictionary alloc]init];
                                                           
                                                           @try{
                                                              [_msgResendDict setObject:[[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"ROOM_NO"] forKey:@"ROOM_NO"];
                                                              [_msgResendDict setObject:[[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"CHAT_NO"] forKey:@"CHAT_NO"];
                                                              [_msgResendDict setObject:[[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"CONTENT_TY"] forKey:@"CONTENT_TY"];
                                                              [_msgResendDict setObject:[[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"CONTENT"] forKey:@"CONTENT"];
                                                              [_msgResendDict setObject:[[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"USER_NO"] forKey:@"USER_NO"];
                                                              [_msgResendDict setObject:[[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"ADIT_INFO"] forKey:@"ADIT_INFO"];
                                                              
                                                              NSString *aditInfo = [_msgResendDict objectForKey:@"ADIT_INFO"];
                                                              NSString *contentType = [[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"CONTENT_TY"];
                                                              
                                                              if([contentType isEqualToString:@"IMG"]){
                                                                 NSRange range = [aditInfo rangeOfString:@"/" options:NSBackwardsSearch];
                                                                 NSString *fileName = [aditInfo substringFromIndex:range.location+1];
                                                                 [_msgResendDict setObject:fileName forKey:@"FILE_NM"];
                                                              }
                                                              
                                                              msg_rIdx = indexPath;
                                                              
                                                              [self resendMessage:_msgResendDict];
                                                              [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                              
                                                           } @catch (NSException *exception) {
                                                              NSLog(@"%s Exception : %@", __func__, exception);
                                                           }
                                                        }];
   
   UIAlertAction *deleteAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"delete0", @"delete0")
                                                          style:UIAlertActionStyleDestructive
                                                        handler:^(UIAlertAction * action){
                                                           _msgDeleteDict = [[NSMutableDictionary alloc]init];
                                                           
                                                           @try{
                                                              [_msgDeleteDict setObject:[[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"ROOM_NO"] forKey:@"ROOM_NO"];
                                                              [_msgDeleteDict setObject:[[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"CHAT_NO"] forKey:@"CHAT_NO"];
                                                              [_msgDeleteDict setObject:[[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"CONTENT_TY"] forKey:@"CONTENT_TY"];
                                                              [_msgDeleteDict setObject:[[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"CONTENT"] forKey:@"CONTENT"];
                                                              
                                                              [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                              
                                                              UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:NSLocalizedString(@"chat_select_msg_delete", @"chat_select_msg_delete") preferredStyle:UIAlertControllerStyleAlert];
                                                              UIAlertAction *deleteMsg = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done")
                                                                           style:UIAlertActionStyleDefault
                                                                           handler:^(UIAlertAction * action){
                                                                              [alert dismissViewControllerAnimated:YES completion:nil];
                                                                              
                                                                              @try{
                                                                                 NSString *roomNo = [_msgDeleteDict objectForKey:@"ROOM_NO"];
                                                                                 NSString *chatNo = [_msgDeleteDict objectForKey:@"CHAT_NO"];
                                                                                 
                                                                                 NSString *sqlString = [appDelegate.dbHelper deleteMissedChat:roomNo chatNo:chatNo];
                                                                                 [appDelegate.dbHelper crudStatement:sqlString];
                                                                                 
                                                                                 [self.msgData.chatArray removeObjectAtIndex:indexPath];
                                                                                 tmpMissedCnt--;
                                                                                 [self.tableView reloadData];
                                                                                 
                                                                              } @catch (NSException *exception) {
                                                                                 NSLog(@"%s Exception : %@", __func__, exception);
                                                                              }
                                                                           }];
                                                              [alert addAction:deleteMsg];
                                                              [self presentViewController:alert animated:YES completion:nil];
                                                              
                                                           } @catch (NSException *exception) {
                                                              NSLog(@"%s Exception : %@", __func__, exception);
                                                           }
                                                        }];
   [actionSheet addAction:resendAction];
   [actionSheet addAction:deleteAction];
   
   if([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad){
      UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"cancel", @"cancel")
                                                             style:UIAlertActionStyleDefault
                                                           handler:^(UIAlertAction * action){
                                                              [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                           }];
      [actionSheet addAction:cancelAction];
      
      [actionSheet.popoverPresentationController setPermittedArrowDirections:0];
      CGRect rect = self.view.frame;
      rect.origin.x = (self.view.frame.size.width/2)-(actionSheet.view.frame.size.width/2);
      rect.origin.y = (self.view.frame.size.height/2)-(actionSheet.view.frame.size.height/2);
      actionSheet.popoverPresentationController.sourceView = self.view;
      actionSheet.popoverPresentationController.sourceRect = rect;
      
   } else {
      UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"cancel", @"cancel")
                                                             style:UIAlertActionStyleCancel
                                                           handler:^(UIAlertAction * action){
                                                              [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                           }];
      [actionSheet addAction:cancelAction];
   }
   
   [self presentViewController:actionSheet animated:YES completion:nil];
}

-(void)setChatData:(NSArray *)mediaArr :(NSString *)mediaType :(BOOL)isAlbum{
   NSLog(@"%s", __func__);
   mediaFileArr = [NSMutableArray array];
   
   @try{
      if([mediaType isEqualToString:@"IMG"]){
         [self sendImageMessage:mediaArr isAlbum:isAlbum];
         
      } else if([mediaType isEqualToString:@"VIDEO"]){
         [self sendVideoMessage:mediaArr isAlbum:isAlbum];
      }
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

#pragma mark IMAGE MSG
-(void)sendImageMessage:(NSArray *)mediaArr isAlbum:(BOOL)isAlbum{
   @try{
      if(isAlbum){
         NSArray *imgList = [[mediaArr objectAtIndex:0] objectForKey:@"IMG_LIST"];
         for(int i=0; i<imgList.count; i++){
            UIImage *image = [MFUtil getScaledImage:[imgList objectAtIndex:i] scaledToMaxWidth:self.view.frame.size.width-20];
            
            NSMutableDictionary *dict = [NSMutableDictionary dictionary];
            [dict setObject:@"IMG" forKey:@"TYPE"];
            [dict setObject:image forKey:@"VALUE"];
            [dict setObject:[imgList objectAtIndex:i] forKey:@"ORIGIN"];
            [mediaFileArr addObject:dict];
         }
         [self contvertDataSet:mediaFileArr];
         
      } else {
         
      }
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

#pragma mark VIDEO MSG
-(void)sendVideoMessage:(NSArray *)mediaArr isAlbum:(BOOL)isAlbum{
   @try{
      if(isAlbum){
         NSArray *assetList = [[mediaArr objectAtIndex:0] objectForKey:@"ASSET_LIST"];
         PHAsset *asset = [assetList objectAtIndex:0];
         
         NSMutableDictionary *dict2 = [NSMutableDictionary dictionary];
         [dict2 setObject:@"VIDEO" forKey:@"TYPE"];
         [dict2 setObject:asset forKey:@"VIDEO_VALUE"];
         [mediaFileArr addObject:dict2];
         
         [self contvertDataSet:mediaFileArr];
         
      } else {
         NSString *videoPath = [mediaArr objectAtIndex:0];
         
         AVURLAsset *asset = [AVURLAsset URLAssetWithURL:[NSURL URLWithString:videoPath] options:nil];
         
         NSMutableDictionary *dict2 = [NSMutableDictionary dictionary];
         [dict2 setObject:@"VIDEO" forKey:@"TYPE"];
         [dict2 setObject:asset forKey:@"RECORD_VALUE"];
         [mediaFileArr addObject:dict2];
         
         [self contvertDataSet:mediaFileArr];
      }
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

#pragma mark
#pragma mark - 파일압축
- (void)compressVideoWithInputVideoUrl:(NSURL *)inputVideoUrl asset:(AVAsset*)asset num:(int)num completion:(void (^)(NSData *))completion{
   NSString *documentsDirectory = [NSSearchPathForDirectoriesInDomains (NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];

   NSString *finalVideoURLString = [documentsDirectory stringByAppendingPathComponent:[NSString stringWithFormat:@"CHAT_VIDEO_%d.mp4",num]];
   // 파일이 이미 있는지 확인한 다음 이전 파일을 제거합니다.
   if ([[NSFileManager defaultManager]fileExistsAtPath:finalVideoURLString]){
      NSLog(@"데이터변환 후 삭제");
      [[NSFileManager defaultManager]removeItemAtPath:finalVideoURLString error:nil];
   }
   
   NSURL *outputVideoUrl = ([[NSURL URLWithString:finalVideoURLString] isFileURL] == 1)?([NSURL URLWithString:finalVideoURLString]):([NSURL fileURLWithPath:finalVideoURLString]);
   
   SDAVAssetExportSession *compressionEncoder = [SDAVAssetExportSession.alloc initWithAsset:[AVAsset assetWithURL:inputVideoUrl]]; // provide inputVideo Url Here
   compressionEncoder.outputFileType = AVFileTypeMPEG4;
   compressionEncoder.outputURL = outputVideoUrl;
   compressionEncoder.shouldOptimizeForNetworkUse = YES;
   
   AVAssetTrack *track = [[asset tracksWithMediaType:AVMediaTypeVideo] firstObject];
   CGSize dimensions = CGSizeApplyAffineTransform(track.naturalSize, track.preferredTransform);
   CGSize newSize = [MFUtil getResizeVideoRatio:dimensions];
   NSLog(@"newSize w : %f, h : %f", newSize.width, newSize.height);
   
   float frameRate = [track nominalFrameRate];
   float bps = [track estimatedDataRate];
   NSLog(@"Frame rate == %f",frameRate);
   NSLog(@"bps rate == %f",bps);
   
   float defaultBps = 2300000;
   float newBps = (newSize.width * newSize.height * 20 * 0.15);
   if(newBps > defaultBps) newBps = defaultBps;
   NSLog(@"newBps : %f", newBps);
   
//   AVAssetTrack *atrack = [[asset tracksWithMediaType:AVMediaTypeAudio] firstObject];
//   float abps = [atrack estimatedDataRate];
//   NSLog(@"audio bps rate == %f",abps);
   
   compressionEncoder.videoSettings = @
   {
      AVVideoCodecKey: AVVideoCodecH264,
      AVVideoWidthKey: @(newSize.width),
      AVVideoHeightKey: @(newSize.height),
      AVVideoCompressionPropertiesKey: @
      {
         //        AVVideoAverageBitRateKey: @2300000,
         AVVideoAverageBitRateKey:@(newBps),
         AVVideoProfileLevelKey: AVVideoProfileLevelH264High40,
      },
   };
   
   compressionEncoder.audioSettings = @
   {
      AVFormatIDKey: @(kAudioFormatMPEG4AAC),
      AVNumberOfChannelsKey: @2,
      AVSampleRateKey: @44100,
      AVEncoderBitRateKey: @128000,
   };

   [compressionEncoder exportAsynchronouslyWithCompletionHandler:^{
      if (compressionEncoder.status == AVAssetExportSessionStatusCompleted){
         NSData *data = [NSData dataWithContentsOfURL:outputVideoUrl];
         completion(data);

      } else if(compressionEncoder.status == AVAssetExportSessionStatusFailed){
       NSLog (@"세션 내보내기 실패");
       [self dataConvertFailed];

      } else if(compressionEncoder.status == AVAssetExportSessionStatusCancelled){
       NSLog (@"Export canceled");

      } else if(compressionEncoder.status == AVAssetExportSessionStatusExporting){
       NSLog(@"video conversion exporting");

      } else if(compressionEncoder.status == AVAssetExportSessionStatusWaiting){
       NSLog(@"video conversion is waiting");

      } else if(compressionEncoder.status == AVAssetExportSessionStatusUnknown){
       NSLog(@"video converstion status unknown");
      }
   }];
}

-(void)contvertDataSet:(NSMutableArray *)array{
   NSLog(@"%s", __func__);
   @try{
      setCount = 0;
      NSMutableDictionary *tmpDict = [NSMutableDictionary dictionary];
      
      NSUInteger count = array.count;
      
      for(int i=0; i<(int)count; i++){
         NSMutableDictionary *obj = [NSMutableDictionary dictionary];
         
         NSString *type = [[array objectAtIndex:i] objectForKey:@"TYPE"];
         if([type isEqualToString:@"IMG"]){
            [obj setObject:@"IMG" forKey:@"TYPE"];
            [obj setObject:[[array objectAtIndex:i] objectForKey:@"ORIGIN"] forKey:@"VALUE"];
            
            if([[array objectAtIndex:i] objectForKey:@"IS_SHARE"]!=nil){
               [obj setObject:@"true" forKey:@"IS_SHARE"];
               [obj setObject:[[array objectAtIndex:i] objectForKey:@"URL"] forKey:@"URL"];
            }
            
            [tmpDict setObject:obj forKey:[NSString stringWithFormat:@"%d",i]];
            
            setCount++;
            if(setCount==count) [self dataConvertFinished:tmpDict];
            
         } else if([type isEqualToString:@"VIDEO"]){
            if([[array objectAtIndex:i] objectForKey:@"VIDEO_VALUE"]!=nil){
               //앨범에서 가져온 비디오
               PHAsset *value = [[array objectAtIndex:i] objectForKey:@"VIDEO_VALUE"];
               
               PHVideoRequestOptions *options = [[PHVideoRequestOptions alloc] init];
               options.version = PHVideoRequestOptionsVersionOriginal;
               options.deliveryMode = PHVideoRequestOptionsDeliveryModeAutomatic;
               options.networkAccessAllowed = YES;
               
               //동영상 변환
               [[PHImageManager defaultManager] requestAVAssetForVideo:value options:options resultHandler:^(AVAsset *avAsset, AVAudioMix *audioMix, NSDictionary *info) {
                  dispatch_async(dispatch_get_main_queue(), ^{
                     
                     NSURL *URL = [(AVURLAsset *)avAsset URL];
                     
                     // 비디오 파일로 애셋 URL 만들기
                     AVURLAsset *asset = [AVURLAsset URLAssetWithURL:URL options:nil];
                     
                     [self compressVideoWithInputVideoUrl:URL asset:avAsset num:i completion:^(NSData *data) {
                        NSLog(@"이거 변환된 데이터? : %@",[NSString stringWithFormat:@"%.2lf MB", (float)data.length/1024.0f/1024.0f]);

                        AVAssetImageGenerator *imageGenerator = [[AVAssetImageGenerator alloc]initWithAsset:asset];
                        imageGenerator.appliesPreferredTrackTransform = YES;
                        CMTime time = CMTimeMake(1, 1);
                        CGImageRef imageRef = [imageGenerator copyCGImageAtTime:time actualTime:NULL error:NULL];
                        UIImage *thumbnail = [UIImage imageWithCGImage:imageRef];
                        CGImageRelease(imageRef);

                        [obj setObject:@"VIDEO" forKey:@"TYPE"];
                        [obj setObject:data forKey:@"VALUE"];
                        
                        if(thumbnail!=nil) [obj setObject:thumbnail forKey:@"THUMB"];
                        [tmpDict setObject:obj forKey:[NSString stringWithFormat:@"%d",i]];

                        setCount++;
                        if(setCount==count) [self dataConvertFinished:tmpDict];
                     }];
                     
                     
                     /*
                     NSArray * compatiblePresets = [AVAssetExportSession exportPresetsCompatibleWithAsset:asset];
                     // 비디오가 변환을 지원하는지 확인하십시오.
                     if ([compatiblePresets containsObject:AVAssetExportPresetLowQuality]){
                        // 내보내기 세션 만들기
                        AVAssetExportSession *exportSession = nil;
//                        if (@available(iOS 11.0, *)) exportSession = [[AVAssetExportSession alloc]initWithAsset:asset presetName:AVAssetExportPresetHEVCHighestQuality];
//                        else exportSession = [[AVAssetExportSession alloc]initWithAsset:asset presetName:AVAssetExportPresetHighestQuality];
                        if (@available(iOS 11.0, *)) exportSession = [[AVAssetExportSession alloc]initWithAsset:asset presetName:AVAssetExportPreset960x540];
                        else exportSession = [[AVAssetExportSession alloc]initWithAsset:asset presetName:AVAssetExportPreset960x540];
                        
                        // 변환 된 비디오를 저장하기위한 임시 경로 만들기
                        NSString *documentsDirectory = [NSSearchPathForDirectoriesInDomains (NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];
                        NSString *myDocumentPath = [documentsDirectory stringByAppendingPathComponent:[NSString stringWithFormat:@"CHAT_VIDEO_%d.mp4",i]];
                        NSURL *url = [[NSURL alloc] initFileURLWithPath:myDocumentPath];
                        
                        // 파일이 이미 있는지 확인한 다음 이전 파일을 제거합니다.
                        if ([[NSFileManager defaultManager]fileExistsAtPath:myDocumentPath]){
                           [[NSFileManager defaultManager]removeItemAtPath:myDocumentPath error:nil];
                        }
                        exportSession.outputURL = url;
                        // 다른 파일 형식 (예 : .3gp)으로 만들려면 출력 파일 형식을 설정합니다.
                        exportSession.outputFileType = AVFileTypeMPEG4 ;
                        exportSession.shouldOptimizeForNetworkUse = YES ;
                        
                        [exportSession exportAsynchronouslyWithCompletionHandler:^{
                           switch ([exportSession status])
                           {
                              case AVAssetExportSessionStatusFailed:
                                 NSLog (@"세션 내보내기 실패");
                                 [self dataConvertFailed];
                                 break ;
                              case AVAssetExportSessionStatusCancelled:
                                 NSLog (@"Export canceled");
                                 break ;
                              case AVAssetExportSessionStatusExporting:
                                 NSLog(@"video conversion exporting");
                                 break;
                              case AVAssetExportSessionStatusWaiting:
                                 NSLog(@"video conversion is waiting");
                                 break;
                              case AVAssetExportSessionStatusUnknown:
                                 NSLog(@"video converstion status unknown");
                                 break;
                              case AVAssetExportSessionStatusCompleted:
                              {
                                 // 비디오 변환 완료
#ifdef DEBUG
                                 NSLog (@"비디오 변환 성공! i=%d", i);
#endif
                                 NSData *data = [NSData dataWithContentsOfURL:url];
                                 NSLog(@"변환된 데이터? : %@",[NSString stringWithFormat:@"%.2lf MB", (float)data.length/1024.0f/1024.0f]);
                                 
                                 
                                 AVAssetImageGenerator *imageGenerator = [[AVAssetImageGenerator alloc]initWithAsset:asset];
                                 imageGenerator.appliesPreferredTrackTransform = YES;
                                 CMTime time = CMTimeMake(1, 1);
                                 CGImageRef imageRef = [imageGenerator copyCGImageAtTime:time actualTime:NULL error:NULL];
                                 UIImage *thumbnail = [UIImage imageWithCGImage:imageRef];
                                 CGImageRelease(imageRef);
                                 
                                 // 파일이 이미 있는지 확인한 다음 이전 파일을 제거합니다.
                                 if ([[NSFileManager defaultManager]fileExistsAtPath:myDocumentPath]){
#ifdef DEBUG
                                    NSLog(@"데이터변환 후 삭제");
#endif
                                    [[NSFileManager defaultManager]removeItemAtPath:myDocumentPath error:nil];
                                 }
                                 
                                 [obj setObject:@"VIDEO" forKey:@"TYPE"];
                                 [obj setObject:data forKey:@"VALUE"];
                                 if(thumbnail!=nil) [obj setObject:thumbnail forKey:@"THUMB"];
                                 [tmpDict setObject:obj forKey:[NSString stringWithFormat:@"%d",i]];
                                 
                                 setCount++;
//                                 NSLog(@"setCount : %d / count : %lu", setCount, count);
                                 if(setCount==count) [self dataConvertFinished:tmpDict];
                                 
                              }
                                 break ;
                              default :
                                 break ;
                           }
                        }];
                     }
                     else {
#ifdef DEBUG
                        NSLog (@"지원되지 않는 비디오 파일!");
#endif
                     }
                      */
                  });
               }];
               
            } else {
               //촬영한 비디오
#ifdef DEBUG
               NSLog(@"이건 촬영한 비디오 i=%d", i);
#endif
               AVURLAsset *avAsset = [[array objectAtIndex:i] objectForKey:@"RECORD_VALUE"];
               
               NSArray * compatiblePresets = [AVAssetExportSession exportPresetsCompatibleWithAsset:avAsset];
               // 비디오가 변환을 지원하는지 확인하십시오.
               if ([compatiblePresets containsObject:AVAssetExportPresetLowQuality]){
                  // 내보내기 세션 만들기
                  AVAssetExportSession *exportSession = nil;
                  if (@available(iOS 11.0, *)) exportSession = [[AVAssetExportSession alloc]initWithAsset:avAsset presetName:AVAssetExportPresetHEVCHighestQuality];
                  else exportSession = [[AVAssetExportSession alloc]initWithAsset:avAsset presetName:AVAssetExportPresetHighestQuality];
                  
                  // 변환 된 비디오를 저장하기위한 임시 경로 만들기
                  NSString *documentsDirectory = [NSSearchPathForDirectoriesInDomains (NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];
                  NSString *myDocumentPath = [documentsDirectory stringByAppendingPathComponent:[NSString stringWithFormat:@"CHAT_VIDEO_%d.mp4",i]];
                  NSURL *url = [[NSURL alloc] initFileURLWithPath:myDocumentPath];
                  
                  // 파일이 이미 있는지 확인한 다음 이전 파일을 제거합니다.
                  if ([[NSFileManager defaultManager]fileExistsAtPath:myDocumentPath]){
                     [[NSFileManager defaultManager]removeItemAtPath:myDocumentPath error:nil];
                  }
                  exportSession.outputURL = url;
                  // 다른 파일 형식 (예 : .3gp)으로 만들려면 출력 파일 형식을 설정합니다.
                  exportSession.outputFileType = AVFileTypeMPEG4 ;
                  exportSession.shouldOptimizeForNetworkUse = YES ;
                  
                  [exportSession exportAsynchronouslyWithCompletionHandler : ^ {
                     switch ([exportSession status ])
                     {
                        case AVAssetExportSessionStatusFailed:
                           NSLog (@"세션 내보내기 실패");
                           [self dataConvertFailed];
                           break ;
                        case AVAssetExportSessionStatusCancelled:
                           NSLog (@"Export canceled");
                           break ;
                        case AVAssetExportSessionStatusExporting:
                           NSLog(@"video conversion exporting");
                           break;
                        case AVAssetExportSessionStatusWaiting:
                           NSLog(@"video conversion is waiting");
                           break;
                        case AVAssetExportSessionStatusUnknown:
                           NSLog(@"video converstion status unknown");
                           break;
                        case AVAssetExportSessionStatusCompleted:
                        {
                           // 비디오 변환 완료
#ifdef DEBUG
                           NSLog (@"촬영 변환 성공! i=%d", i);
#endif
                           NSData *data = [NSData dataWithContentsOfURL:url];
                           
                           AVAssetImageGenerator *imageGenerator = [[AVAssetImageGenerator alloc]initWithAsset:avAsset];
                           imageGenerator.appliesPreferredTrackTransform = YES;
                           CMTime time = CMTimeMake(1, 1);
                           CGImageRef imageRef = [imageGenerator copyCGImageAtTime:time actualTime:NULL error:NULL];
                           UIImage *thumbnail = [UIImage imageWithCGImage:imageRef];
                           CGImageRelease(imageRef);
                           
                           // 파일이 이미 있는지 확인한 다음 이전 파일을 제거합니다.
                           if ([[NSFileManager defaultManager]fileExistsAtPath:myDocumentPath]){
#ifdef DEBUG
                              NSLog(@"데이터변환 후 삭제");
#endif
                              [[NSFileManager defaultManager]removeItemAtPath:myDocumentPath error:nil];
                           }
                           
                           [obj setObject:@"VIDEO" forKey:@"TYPE"];
                           [obj setObject:data forKey:@"VALUE"];
                           if(thumbnail!=nil) [obj setObject:thumbnail forKey:@"THUMB"];
                           [tmpDict setObject:obj forKey:[NSString stringWithFormat:@"%d",i]];
                           
                           setCount++;
                           if(setCount==count) [self dataConvertFinished:tmpDict];
                        }
                           break ;
                        default :
                           break ;
                     }
                  }];
               }
               else {
#ifdef DEBUG
                  NSLog (@"지원되지 않는 비디오 파일!");
#endif
               }
            }
         }
      }
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}
-(void)dataConvertFinished:(NSMutableDictionary *)dict{
#ifdef DEBUG
   NSLog(@"convertDatafinished : %@", dict);
#endif
   
   resultArr = [NSMutableArray array];
   @try{
      for(int i=0; i<dict.count; i++){
         NSMutableDictionary *reDict = [NSMutableDictionary dictionary];
         
         NSDictionary *dataDict = [dict objectForKey:[NSString stringWithFormat:@"%d",i]];
         
         NSString *type = [dataDict objectForKey:@"TYPE"];
         if([type isEqualToString:@"IMG"]){
            [reDict setObject:@"IMG" forKey:@"TYPE"];
            [reDict setObject:[dataDict objectForKey:@"VALUE"] forKey:@"VALUE"]; //UIImage
            [resultArr addObject:reDict];
            
         } else if([type isEqualToString:@"VIDEO"]){
            NSMutableDictionary *thumbDict = [NSMutableDictionary dictionary];
            if([dataDict objectForKey:@"THUMB"]!=nil){
               [thumbDict setObject:@"VIDEO_THUMB" forKey:@"TYPE"];
               [thumbDict setObject:[dataDict objectForKey:@"THUMB"] forKey:@"VALUE"]; //UIImage
               [resultArr addObject:thumbDict];
            }
            
            [reDict setObject:@"VIDEO" forKey:@"TYPE"];
            [reDict setObject:[dataDict objectForKey:@"VALUE"] forKey:@"VALUE"]; //NSData
            
            [resultArr addObject:reDict];
         }
      }
      [self saveMediaFiles];
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
   
}
-(void)dataConvertFailed{
   [SVProgressHUD dismiss];
   
   @try{
      UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"동영상 변환 실패" message:@"동영상 변환에 실패하였습니다.\n다시 시도하여 주십시오." preferredStyle:UIAlertControllerStyleAlert];
      UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                       handler:^(UIAlertAction * action) {
                                                          uploadCnt = 0;
                                                          resultArr = [NSMutableArray array];
                                                          self.firstAddMsg = [NSMutableDictionary dictionary];
                                                          self.fileNameArr = [NSMutableArray array];
                                                          
                                                          [alert dismissViewControllerAnimated:YES completion:nil];
                                                       }];
      [alert addAction:okButton];
      [self presentViewController:alert animated:YES completion:nil];
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

#pragma mark - File Upload
- (void)saveAttachedCropImage:(UIImage *)image{
   //사진 촬영 시 이미지 편집 후 실행
   uploadCnt=0;
   
//   if(image.size.width>appDelegate.imageMaxWidth){
//      image = [MFUtil getScaledLowImage:image scaledToMaxWidth:appDelegate.imageMaxWidth];
//   }
   
   image = [MFUtil getResizeImageRatio:image];
   NSData *data = UIImageJPEGRepresentation(image, 0.7);
   [self saveMediaFiles:data mediaType:@"IMG"];
  
   if(_isFlag){ //미디어버튼
      UIImage *accessoryImage = [UIImage imageNamed:@"btn_add.png"];
      UIImage *normalImage = [accessoryImage jsq_imageMaskedWithColor:[UIColor lightGrayColor]];
      [_mediaButton setImage:normalImage forState:UIControlStateNormal];
      
      _mediaButton.contentMode = UIViewContentModeScaleAspectFit;
      _mediaButton.backgroundColor = [UIColor clearColor];
      
      self.inputToolbar.contentView.textView.inputView = nil;
      [self.inputToolbar.contentView.textView reloadInputViews];
      
      _isFlag = false;
   }
}

-(void)saveMediaFiles{
NSLog(@"%s", __func__);
   @try{
      uploadCnt=0;
      
      NSString *type = [[resultArr objectAtIndex:0] objectForKey:@"TYPE"];
      
      if([type isEqualToString:@"IMG"]){
         if([[resultArr objectAtIndex:0] objectForKey:@"IS_SHARE"]!=nil&&[[[resultArr objectAtIndex:0] objectForKey:@"IS_SHARE"]isEqualToString:@"true"]){
            [self shareMediaFiles:nil mediaType:type isThumbImg:[[resultArr objectAtIndex:0] objectForKey:@"VALUE"] isFile:nil isShared:@"true" srcFileUrl:[[resultArr objectAtIndex:0] objectForKey:@"URL"]];
            
         } else {
            UIImage *value = [[resultArr objectAtIndex:0] objectForKey:@"VALUE"];
//            if(value.size.width>appDelegate.imageMaxWidth){
//               value = [MFUtil getScaledLowImage:value scaledToMaxWidth:appDelegate.imageMaxWidth];
//            }
            value = [MFUtil getResizeImageRatio:value];
            NSLog(@"chat value : %@", value);
            NSData *data = UIImageJPEGRepresentation(value, 0.7);
            NSLog(@"File size is : %.2f MB",(float)data.length/1024.0f/1024.0f);
            [self saveMediaFiles:data mediaType:type];
         }
         
      } else if([type isEqualToString:@"VIDEO"]){
         if([[resultArr objectAtIndex:0] objectForKey:@"IS_SHARE"]!=nil&&[[[resultArr objectAtIndex:0] objectForKey:@"IS_SHARE"]isEqualToString:@"true"]){
            [self shareMediaFiles:nil mediaType:type isThumbImg:[[resultArr objectAtIndex:0] objectForKey:@"VALUE"] isFile:nil isShared:@"true" srcFileUrl:[[resultArr objectAtIndex:0] objectForKey:@"URL"]];
         } else {
            NSData *data = [[resultArr objectAtIndex:0] objectForKey:@"VALUE"];
//            NSLog(@"File size is : %.2f MB",(float)data.length/1024.0f/1024.0f);
            
//            if((float)data.length/1024.0f/1024.0f>20){
//               [self videoSizeCheck];
//            } else {
               [self saveMediaFiles:data mediaType:type];
//            }
         }
         
         
      } else if([type isEqualToString:@"VIDEO_THUMB"]){
         UIImage *value = [[resultArr objectAtIndex:0] objectForKey:@"VALUE"];
//         if(value.size.width>appDelegate.imageMaxWidth){
//            value = [MFUtil getScaledLowImage:value scaledToMaxWidth:appDelegate.imageMaxWidth];
//         }
         value = [MFUtil getResizeImageRatio:value];
         NSData *data = UIImageJPEGRepresentation(value, 0.7);
//         NSLog(@"File size is : %.2f MB",(float)data.length/1024.0f/1024.0f);
         [self saveMediaFiles:data mediaType:type];
         
      } else if([type isEqualToString:@"FILE"]){
         if([[resultArr objectAtIndex:0] objectForKey:@"IS_SHARE"]!=nil&&[[[resultArr objectAtIndex:0] objectForKey:@"IS_SHARE"]isEqualToString:@"true"]){
            [self shareMediaFiles:nil mediaType:type isThumbImg:nil isFile:[[resultArr objectAtIndex:0] objectForKey:@"FILE_NM"] isShared:@"true" srcFileUrl:[[resultArr objectAtIndex:0] objectForKey:@"VALUE"]];
         } else {
            NSData *data = [[resultArr objectAtIndex:0] objectForKey:@"FILE_DATA"];
//            NSLog(@"File size is : %.2f MB",(float)data.length/1024.0f/1024.0f);
            [self saveMediaFiles:data mediaType:type];
         }
      }
      
      if(_isFlag){ //미디어버튼
         UIImage *accessoryImage = [UIImage imageNamed:@"btn_add.png"];
         UIImage *normalImage = [accessoryImage jsq_imageMaskedWithColor:[UIColor lightGrayColor]];
         [_mediaButton setImage:normalImage forState:UIControlStateNormal];
         
         _mediaButton.contentMode = UIViewContentModeScaleAspectFit;
         _mediaButton.backgroundColor = [UIColor clearColor];
         
         self.inputToolbar.contentView.textView.inputView = nil;
         [self.inputToolbar.contentView.textView reloadInputViews];
         
         _isFlag = false;
      }
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

-(void)saveMediaFiles:(NSData *)data mediaType:(NSString *)type{
   NSLog(@"%s", __func__);
   @try{
      NSString *urlString = appDelegate.main_url;
      urlString = [urlString stringByAppendingPathComponent:@"saveAttachedFile"];
      
      NSString *dvcID = [appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"DVCID"]];//[MFUtil getUUID];
      
      NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
      [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSString *date = [dateFormatter stringFromDate:[NSDate date]];
      
      if([type isEqualToString:@"IMG"]){
         UIImage *image = [UIImage imageWithData:data];
         
         NSString *orientation;
         if(image.size.width > image.size.height) orientation = @"HORIZONTAL";
         else orientation = @"VERTICAL";
         
         self.firstAddMsg = [[NSMutableDictionary alloc]init];
         [self.firstAddMsg setObject:self.myUserNo forKey:@"USER_NO"];
         [self.firstAddMsg setObject:self.roomNo forKey:@"ROOM_NO"];
         [self.firstAddMsg setObject:@"" forKey:@"CONTENT"];
         [self.firstAddMsg setObject:@"IMG" forKey:@"CONTENT_TY"];
         [self.firstAddMsg setObject:date forKey:@"DATE"];
         [self.firstAddMsg setObject:orientation forKey:@"ORIENTATION"];
         
         NSString *fileName = [self createFileName:@"IMG"];
         [self.firstAddMsg setObject:fileName forKey:@"FILE_NM"];
         [self.fileNameArr addObject:fileName];
         
         NSMutableDictionary *aditDic = [NSMutableDictionary dictionary];
         
         //로컬tmp경로 ADIT_INFO에 추가
         NSString *bundleIdentifier = [[NSBundle mainBundle] bundleIdentifier];
         NSString *documentFolder = [NSString stringWithFormat:@"/%@/%@/%@", [NSHomeDirectory() stringByAppendingPathComponent:@"Documents"], bundleIdentifier, [appDelegate.appPrefs objectForKey:@"COMP_NO"]];
         
         NSDate *today = [NSDate date];
         NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
         [dateFormatter setDateFormat:@"yyyyMMdd"];
         NSString *currentTime = [dateFormatter stringFromDate:today];
         
         NSString *saveOrginPath = [documentFolder stringByAppendingFormat:@"/Chat/%@/Image/%@", self.roomNo, currentTime];
         NSString *saveThumbPath = [documentFolder stringByAppendingFormat:@"/Chat/%@/Image/.thumb/%@", self.roomNo, currentTime];
         
         NSFileManager *fileManager = [NSFileManager defaultManager];
         BOOL issue = [fileManager isReadableFileAtPath:saveThumbPath];
         if (issue) {
            
         }else{
#ifdef DEBUG
            NSLog(@"Chat RoomNo directory can't read...Create Folder");
#endif
            [fileManager createDirectoryAtPath:saveThumbPath withIntermediateDirectories:YES attributes:nil error:nil];
         }
         
         NSString *imagePath = [saveThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@",fileName]];
         
         //썸네일이미지 로컬경로에 저장
         NSData *thumbData = UIImagePNGRepresentation([MFUtil getScaledLowImage:image scaledToMaxWidth:180.0f]);
         NSString *thumbImgPath =[saveThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",fileName]];
         [thumbData writeToFile:thumbImgPath atomically:YES];
         
         //원본이미지 로컬경로에 저장
//         if(image.size.width>appDelegate.imageMaxWidth){
//            image = [MFUtil getScaledLowImage:image scaledToMaxWidth:appDelegate.imageMaxWidth];
//         }
         image = [MFUtil getResizeImageRatio:image];
         NSData *originData = UIImageJPEGRepresentation(image, 1.0);
         NSString *originImgPath =[saveOrginPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@",fileName]];
         [originData writeToFile:originImgPath atomically:YES];
         
         int count = missedCnt + tmpMissedCnt;
         
         NSIndexPath *rowNo = [NSIndexPath indexPathForItem:(self.msgData.chatArray.count-count) inSection:0];
         
         [aditDic setObject:@"SENDING" forKey:@"TYPE"];
         [aditDic setObject:[NSNumber numberWithInteger:rowNo.row] forKey:@"TMP_IDX"];
         [aditDic setObject:imagePath forKey:@"LOCAL_CONTENT"];
         
         NSError *error;
         NSData *jsonData = [NSJSONSerialization dataWithJSONObject:aditDic options:0 error:&error];
         NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
         
         [self.firstAddMsg setObject:jsonString forKey:@"ADIT_INFO"];
         
         if(msgDataCnt > 0){
            //메시지가 있는 채팅방일 경우
            [self.msgData.chatArray insertObject:self.firstAddMsg atIndex:self.msgData.chatArray.count-count];
            
            dispatch_async(dispatch_get_main_queue(), ^{
               NSIndexPath *lastCell = [NSIndexPath indexPathForItem:(self.msgData.chatArray.count-count-1) inSection:0];
               [self.tableView beginUpdates];
               [self.tableView insertRowsAtIndexPaths:@[lastCell] withRowAnimation:UITableViewRowAnimationNone];
               [self.tableView endUpdates];
               [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
            });
            
         } else {
            //메시지가 없는 새로운 채팅방일 경우
            [self.msgData.chatArray addObject:self.firstAddMsg];
            
            dispatch_async(dispatch_get_main_queue(), ^{
               [self.tableView reloadData];
               
               NSIndexPath *lastCell = [NSIndexPath indexPathForItem:0 inSection:0];
               [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
            });
         }
         
         [self.sendingMsgArr addObject:self.firstAddMsg];
         
         NSMutableDictionary *param = [NSMutableDictionary dictionary];
         [param setObject:self.roomNo forKey:@"roomNo"];
         [param setObject:[appDelegate.appPrefs objectForKey:@"USERID"] forKey:@"usrId"];
         [param setObject:self.myUserNo forKey:@"usrNo"];
         [param setObject:@"3" forKey:@"refTy"];
         [param setObject:self.roomNo forKey:@"refNo"];
         [param setObject:jsonString forKey:@"aditInfo"];
         [param setObject:@"false" forKey:@"isThumb"];
         [param setObject:@"false" forKey:@"isShared"];
         [param setObject:@"" forKey:@"srcFileUrl"];
         
         [self sessionFileUpload:urlString :param :data :fileName];
         
      } else if([type isEqualToString:@"VIDEO_THUMB"]){
         UIImage *image = [UIImage imageWithData:data];
         
         NSString *orientation;
         if(image.size.width > image.size.height) orientation = @"HORIZONTAL";
         else orientation = @"VERTICAL";
         
         self.firstAddMsg = [[NSMutableDictionary alloc]init];
         [self.firstAddMsg setObject:self.myUserNo forKey:@"USER_NO"];
         [self.firstAddMsg setObject:self.roomNo forKey:@"ROOM_NO"];
         [self.firstAddMsg setObject:@"" forKey:@"CONTENT"];
         [self.firstAddMsg setObject:@"VIDEO" forKey:@"CONTENT_TY"];
         [self.firstAddMsg setObject:date forKey:@"DATE"];
         [self.firstAddMsg setObject:orientation forKey:@"ORIENTATION"];
         
         NSString *fileName = [self createFileName:@"IMG"];
         [self.firstAddMsg setObject:fileName forKey:@"FILE_NM"];
         [self.fileNameArr addObject:fileName];
         
         NSMutableDictionary *aditDic = [NSMutableDictionary dictionary];
         
         //로컬tmp경로 ADIT_INFO에 추가
         NSString *bundleIdentifier = [[NSBundle mainBundle] bundleIdentifier];
         NSString *documentFolder = [NSString stringWithFormat:@"/%@/%@/%@", [NSHomeDirectory() stringByAppendingPathComponent:@"Documents"], bundleIdentifier, [appDelegate.appPrefs objectForKey:@"COMP_NO"]];
         
         NSDate *today = [NSDate date];
         NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
         [dateFormatter setDateFormat:@"yyyyMMdd"];
         NSString *currentTime = [dateFormatter stringFromDate:today];
         
//         NSString *saveOrginPath = [documentFolder stringByAppendingFormat:@"/Chat/%@/Video/%@", self.roomNo, currentTime];
         NSString *saveThumbPath = [documentFolder stringByAppendingFormat:@"/Chat/%@/Video/.thumb/%@", self.roomNo, currentTime];
         
         NSFileManager *fileManager = [NSFileManager defaultManager];
         BOOL issue = [fileManager isReadableFileAtPath:saveThumbPath];
         if (issue) {
            
         }else{
#ifdef DEBUG
            NSLog(@"Chat RoomNo directory can't read...Create Folder");
#endif
            [fileManager createDirectoryAtPath:saveThumbPath withIntermediateDirectories:YES attributes:nil error:nil];
         }
         
         NSString *imagePath = [saveThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@",fileName]];
         
         //썸네일이미지 로컬경로에 저장
         NSData *thumbData = UIImagePNGRepresentation([MFUtil getScaledLowImage:image scaledToMaxWidth:180.0f]);
         NSString *thumbImgPath =[saveThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",fileName]];
         [thumbData writeToFile:thumbImgPath atomically:YES];
         
         //원본이미지 로컬경로에 저장
//         NSData *originData = UIImageJPEGRepresentation(image, 1.0);
//         NSString *originImgPath =[savePath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@",fileName]];
//         [originData writeToFile:originImgPath atomically:YES];
         
         int count = missedCnt + tmpMissedCnt;
         
         NSIndexPath *rowNo = [NSIndexPath indexPathForItem:(self.msgData.chatArray.count-count) inSection:0];
         
         [aditDic setObject:@"SENDING" forKey:@"TYPE"];
         [aditDic setObject:[NSNumber numberWithInteger:rowNo.row] forKey:@"TMP_IDX"];
         [aditDic setObject:imagePath forKey:@"LOCAL_CONTENT"];
         
         NSError *error;
         NSData *jsonData = [NSJSONSerialization dataWithJSONObject:aditDic options:0 error:&error];
         NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
         
         [self.firstAddMsg setObject:jsonString forKey:@"ADIT_INFO"];
         
         if(msgDataCnt > 0){
            //메시지가 있는 채팅방일 경우
            [self.msgData.chatArray insertObject:self.firstAddMsg atIndex:self.msgData.chatArray.count-count];
            
            dispatch_async(dispatch_get_main_queue(), ^{
               NSIndexPath *lastCell = [NSIndexPath indexPathForItem:(self.msgData.chatArray.count-count-1) inSection:0];
               [self.tableView beginUpdates];
               [self.tableView insertRowsAtIndexPaths:@[lastCell] withRowAnimation:UITableViewRowAnimationNone];
               [self.tableView endUpdates];
               [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
            });
            
         } else {
            //메시지가 없는 새로운 채팅방일 경우
            [self.msgData.chatArray addObject:self.firstAddMsg];
            
            dispatch_async(dispatch_get_main_queue(), ^{
               [self.tableView reloadData];
               
               NSIndexPath *lastCell = [NSIndexPath indexPathForItem:0 inSection:0];
               [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
            });
         }
         
         [self.sendingMsgArr addObject:self.firstAddMsg];
         
         NSMutableDictionary *sendFileParam = [NSMutableDictionary dictionary];
         [sendFileParam setObject:self.roomNo forKey:@"roomNo"];
         [sendFileParam setObject:[appDelegate.appPrefs objectForKey:@"USERID"] forKey:@"usrId"];
         [sendFileParam setObject:self.myUserNo forKey:@"usrNo"];
         [sendFileParam setObject:@"3" forKey:@"refTy"];
         [sendFileParam setObject:self.roomNo forKey:@"refNo"];
         [sendFileParam setObject:jsonString forKey:@"aditInfo"];
         [sendFileParam setObject:@"true" forKey:@"isThumb"];
         [sendFileParam setObject:@"false" forKey:@"isShared"];
         [sendFileParam setObject:@"" forKey:@"srcFileUrl"];
         
         [self sessionFileUpload:urlString :sendFileParam :data :fileName];
         
      } else if([type isEqualToString:@"VIDEO"]){
         NSData *jsonData = [[self.firstAddMsg objectForKey:@"ADIT_INFO"] dataUsingEncoding:NSUTF8StringEncoding];
         NSError *e;
         NSDictionary *editDic = [NSJSONSerialization JSONObjectWithData:jsonData options:0 error:&e];
         
         NSMutableDictionary *aditDic = [NSMutableDictionary dictionary];
         [aditDic setObject:[editDic objectForKey:@"TMP_IDX"] forKey:@"TMP_IDX"];
         [aditDic setObject:[editDic objectForKey:@"LOCAL_CONTENT"] forKey:@"LOCAL_CONTENT"];
         [aditDic setObject:[editDic objectForKey:@"TYPE"] forKey:@"TYPE"];
         [aditDic setObject:dvcID forKey:@"DEVICE_ID"];
         [aditDic setObject:[self.firstAddMsg objectForKey:@"ORIENTATION"] forKey:@"ORIENTATION"];
         
         NSData* aditData = [NSJSONSerialization dataWithJSONObject:aditDic options:0 error:nil];
         NSString* aditJsonData = [[NSString alloc] initWithData:aditData encoding:NSUTF8StringEncoding];
         
         NSMutableDictionary *sendFileParam = [NSMutableDictionary dictionary];
         [sendFileParam setObject:self.roomNo forKey:@"roomNo"];
         [sendFileParam setObject:[appDelegate.appPrefs objectForKey:@"USERID"] forKey:@"usrId"];
         [sendFileParam setObject:self.myUserNo forKey:@"usrNo"];
         [sendFileParam setObject:@"3" forKey:@"refTy"];
         [sendFileParam setObject:self.roomNo forKey:@"refNo"];
         [sendFileParam setObject:aditJsonData forKey:@"aditInfo"];
         [sendFileParam setObject:@"false" forKey:@"isThumb"];
         [sendFileParam setObject:videoThumbName forKey:@"thumbName"];
         [sendFileParam setObject:@"false" forKey:@"isShared"];
         [sendFileParam setObject:@"" forKey:@"srcFileUrl"];
         
         NSString *fileName = [self createFileName:@"VIDEO"];
         [self sessionFileUpload:urlString :sendFileParam :data :fileName];
      }
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

-(void)shareMediaFiles:(NSData *)data mediaType:(NSString *)type isThumbImg:(UIImage *)image isFile:(NSString *)fileNm isShared:(NSString *)isShare srcFileUrl:(NSString *)fileUrl{
   @try{
      NSString *urlString = appDelegate.main_url;
      urlString = [urlString stringByAppendingPathComponent:@"saveAttachedFile"];
      
      NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
      [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSString *date = [dateFormatter stringFromDate:[NSDate date]];
      
      UIImage *image = [UIImage imageWithData:data];
         
      NSString *orientation;
      if(image.size.width > image.size.height) orientation = @"HORIZONTAL";
      else orientation = @"VERTICAL";
      
      self.firstAddMsg = [[NSMutableDictionary alloc]init];
      [self.firstAddMsg setObject:self.myUserNo forKey:@"USER_NO"];
      [self.firstAddMsg setObject:self.roomNo forKey:@"ROOM_NO"];
      [self.firstAddMsg setObject:@"" forKey:@"CONTENT"];
      [self.firstAddMsg setObject:type forKey:@"CONTENT_TY"];
      [self.firstAddMsg setObject:date forKey:@"DATE"];
      [self.firstAddMsg setObject:orientation forKey:@"ORIENTATION"];
      
      NSLog(@"fileUrl!! : %@", fileUrl);
      
      NSString *fileName;
      if([type isEqualToString:@"FILE"]) fileName = fileNm;
      else fileName = [fileUrl lastPathComponent];
      
      [self.firstAddMsg setObject:fileName forKey:@"FILE_NM"];
      [self.fileNameArr addObject:fileName];
      
      NSMutableDictionary *aditDic = [NSMutableDictionary dictionary];
      
      //로컬tmp경로 ADIT_INFO에 추가
      NSString *bundleIdentifier = [[NSBundle mainBundle] bundleIdentifier];
      NSString *documentFolder = [NSString stringWithFormat:@"/%@/%@/%@", [NSHomeDirectory() stringByAppendingPathComponent:@"Documents"], bundleIdentifier, [appDelegate.appPrefs objectForKey:@"COMP_NO"]];
      
      NSDate *today = [NSDate date];
      NSDateFormatter *dateFormatter2 = [[NSDateFormatter alloc] init];
      [dateFormatter2 setDateFormat:@"yyyyMMdd"];
      NSString *currentTime = [dateFormatter2 stringFromDate:today];
      
      NSString *folder = @"";
      if([type isEqualToString:@"IMG"]) folder = @"Image";
      else if([type isEqualToString:@"VIDEO"]) folder = @"Video";
      else if([type isEqualToString:@"FILE"]) folder = @"File";
      
      NSString *saveOrginPath = [documentFolder stringByAppendingFormat:@"/Chat/%@/%@/%@", self.roomNo, folder, currentTime];
      NSString *saveThumbPath = [documentFolder stringByAppendingFormat:@"/Chat/%@/%@/.thumb/%@", self.roomNo, folder, currentTime];
      
      NSFileManager *fileManager = [NSFileManager defaultManager];
      BOOL issue = [fileManager isReadableFileAtPath:saveThumbPath];
      if (issue) {
         
      }else{
#ifdef DEBUG
         NSLog(@"Chat RoomNo directory can't read...Create Folder");
#endif
         [fileManager createDirectoryAtPath:saveThumbPath withIntermediateDirectories:YES attributes:nil error:nil];
      }
      
      NSString *imagePath = [saveThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@",fileName]];
      
      //썸네일이미지 로컬경로에 저장
      NSData *thumbData = UIImagePNGRepresentation([MFUtil getScaledLowImage:image scaledToMaxWidth:180.0f]);
      NSString *thumbImgPath =[saveThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",fileName]];
      [thumbData writeToFile:thumbImgPath atomically:YES];
      
      //원본이미지 로컬경로에 저장
//      if(image.size.width>appDelegate.imageMaxWidth){
//         image = [MFUtil getScaledLowImage:image scaledToMaxWidth:appDelegate.imageMaxWidth];
//      }
      image = [MFUtil getResizeImageRatio:image];
      NSData *originData = UIImageJPEGRepresentation(image, 1.0);
      NSString *originImgPath =[saveOrginPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@",fileName]];
      [originData writeToFile:originImgPath atomically:YES];
      
      int count = missedCnt + tmpMissedCnt;
      
      NSIndexPath *rowNo = [NSIndexPath indexPathForItem:(self.msgData.chatArray.count-count) inSection:0];
      
      [aditDic setObject:@"SENDING" forKey:@"TYPE"];
      [aditDic setObject:[NSNumber numberWithInteger:rowNo.row] forKey:@"TMP_IDX"];
      [aditDic setObject:imagePath forKey:@"LOCAL_CONTENT"];
      
      NSError *error;
      NSData *jsonData = [NSJSONSerialization dataWithJSONObject:aditDic options:0 error:&error];
      NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
      
      [self.firstAddMsg setObject:jsonString forKey:@"ADIT_INFO"];
      
      if(msgDataCnt > 0){
         //메시지가 있는 채팅방일 경우
         [self.msgData.chatArray insertObject:self.firstAddMsg atIndex:self.msgData.chatArray.count-count];
         
         dispatch_async(dispatch_get_main_queue(), ^{
            NSIndexPath *lastCell = [NSIndexPath indexPathForItem:(self.msgData.chatArray.count-count-1) inSection:0];
            [self.tableView beginUpdates];
            [self.tableView insertRowsAtIndexPaths:@[lastCell] withRowAnimation:UITableViewRowAnimationNone];
            [self.tableView endUpdates];
            [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
         });
         
      } else {
         //메시지가 없는 새로운 채팅방일 경우
         [self.msgData.chatArray addObject:self.firstAddMsg];
         
         dispatch_async(dispatch_get_main_queue(), ^{
            [self.tableView reloadData];
         });
         
         NSIndexPath *lastCell = [NSIndexPath indexPathForItem:0 inSection:0];
         [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
      }
      
      [self.sendingMsgArr addObject:self.firstAddMsg];
      
      NSMutableDictionary *sendFileParam = [NSMutableDictionary dictionary];
      [sendFileParam setObject:self.roomNo forKey:@"roomNo"];
      [sendFileParam setObject:[appDelegate.appPrefs objectForKey:@"USERID"] forKey:@"usrId"];
      [sendFileParam setObject:self.myUserNo forKey:@"usrNo"];
      [sendFileParam setObject:@"3" forKey:@"refTy"];
      [sendFileParam setObject:self.roomNo forKey:@"refNo"];
      [sendFileParam setObject:jsonString forKey:@"aditInfo"];
      [sendFileParam setObject:@"false" forKey:@"isThumb"];
      [sendFileParam setObject:isShare forKey:@"isShared"];
      [sendFileParam setObject:fileUrl forKey:@"srcFileUrl"];
      
      [self sessionFileUpload:urlString :sendFileParam :nil :nil];
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

-(NSString *)createFileName :(NSString *)filetype{
   @try{
      NSString *fileExt = @"";
      if([filetype isEqualToString:@"IMG"]) fileExt = @"png";
      else if([filetype isEqualToString:@"VIDEO"]) fileExt = @"mp4";
      
      NSString *fileName = nil;
      NSDate *today = [NSDate date];
      NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
      [dateFormatter setDateFormat:@"yyyyMMdd-HHmmssSSS"];
      NSString *currentTime = [dateFormatter stringFromDate:today];
      //NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"USER_ID"];
      //fileName = [NSString stringWithFormat:@"%@(%@).%@",userID,currentTime,fileExt];
      fileName = [NSString stringWithFormat:@"%@.%@",currentTime,fileExt];
      return fileName;
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}
-(void)sessionFileUpload :(NSString *)urlString :(NSMutableDictionary *)sendFileParam :(NSData *)data :(NSString *)fileName{
   NSLog(@"%s", __func__);
   MFURLSessionUpload *sessionUpload = [[MFURLSessionUpload alloc]initWithURL:[NSURL URLWithString:urlString] option:sendFileParam WithData:data AndFileName:fileName];
   sessionUpload.delegate = self;
   [sessionUpload start];
}

- (NSString *)createFileName{
   @try{
      NSString *fileName = nil;
      NSDate *today = [NSDate date];
      NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
      [dateFormatter setDateFormat:@"yyyyMMdd-HHmmssSSS"];
      NSString *currentTime = [dateFormatter stringFromDate:today];
      //NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"USER_ID"];
      //fileName = [NSString stringWithFormat:@"%@(%@).png",userID,currentTime];
      fileName = [NSString stringWithFormat:@"%@.png",currentTime];
      return fileName;
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

#pragma mark - Call Webservice
- (void)callChatReadStatus {
   NSString *sqlString = [appDelegate.dbHelper getUnreadChatNoRange:self.roomNo myUserNo:self.myUserNo];
   NSMutableArray *selectArr = [appDelegate.dbHelper selectMutableArray:sqlString];
   
   @try{
      NSNumber *firstChat = [[selectArr objectAtIndex:0] objectForKey:@"FIRST_CHAT"];
      NSNumber *lastChat = [[selectArr objectAtIndex:0] objectForKey:@"LAST_CHAT"];
      
      if(![[NSString stringWithFormat:@"%@", firstChat] isEqualToString:@"-1"] && ![[NSString stringWithFormat:@"%@", lastChat] isEqualToString:@"-1"]){
         
         NSString *urlString = appDelegate.main_url;
         NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"saveChatReadStatus"]];
         NSString *paramString = [NSString stringWithFormat:@"usrNo=%@&roomNo=%@&firstChatNo=%@&lastChatNo=%@&dvcId=%@", self.myUserNo, self.roomNo, firstChat, lastChat, [appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"DVCID"]]];
         MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
         session.delegate = self;
         [session start];
      } else {
         //NSLog(@"FIRST AND LAST CHATS ARE NULL---------");
      }
      
      appDelegate.currChatRoomNo = self.roomNo;
      
      NSString *sqlString2 = [appDelegate.dbHelper updateChatReadStatus:self.roomNo];
      [appDelegate.dbHelper crudStatement:sqlString2];
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

//텍스트메시지 전송/재전송 웹서비스
- (void)callSaveChat:(NSString *)message{
   NSString *urlString = appDelegate.main_url;
   NSMutableDictionary *contentDic = [NSMutableDictionary dictionary];
   
   @try{
      NSError *error;
      NSData* editData = [NSJSONSerialization dataWithJSONObject:self.editInfoDic options:0 error:&error];
      NSString* editJsonData = [[NSString alloc] initWithData:editData encoding:NSUTF8StringEncoding];
      
      message = [MFUtil replaceEncodeToChar:message];
      
      NSUInteger textByte = [message lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
      if(textByte>1000) [contentDic setObject:@"LONG_TEXT" forKey:@"TYPE"];
      else [contentDic setObject:@"TEXT" forKey:@"TYPE"];
      
      [contentDic setObject:message forKey:@"VALUE"];
      
      if(![message isEqualToString:@""]){
         NSData* data = [NSJSONSerialization dataWithJSONObject:contentDic options:0 error:nil];
         NSString* jsonData = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
         
         NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"saveChat"]];
         
         //aditInfo : 메시지번호 등의 추가정보
         NSString *paramString = [NSString stringWithFormat:@"usrNo=%@&roomNo=%@&content=%@&aditInfo=%@&dvcId=%@", self.myUserNo, self.roomNo, jsonData, editJsonData, [appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"DVCID"]]];
         MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
         session.delegate = self;
         [session start];
      }
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)callSaveInviteChat:(NSDictionary *)dict{
   NSString *urlString = appDelegate.main_url;
   NSMutableDictionary *contentDic = [NSMutableDictionary dictionary];
   
   @try {
      NSError *error;
      NSData* editData = [NSJSONSerialization dataWithJSONObject:self.editInfoDic options:0 error:&error];
      NSString* editJsonData = [[NSString alloc] initWithData:editData encoding:NSUTF8StringEncoding];
      
      [contentDic setObject:@"INVITE" forKey:@"TYPE"];
      [contentDic setObject:dict forKey:@"VALUE"];
      
      NSData* data = [NSJSONSerialization dataWithJSONObject:contentDic options:0 error:nil];
      NSString* jsonData = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
      //NSLog(@"jsonData : %@", jsonData);
      
      NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"saveChat"]];
      
      //aditInfo : 메시지번호 등의 추가정보
      NSString *paramString = [NSString stringWithFormat:@"usrNo=%@&roomNo=%@&content=%@&aditInfo=%@&dvcId=%@", self.myUserNo, self.roomNo, jsonData, editJsonData, [appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"DVCID"]]];
      MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
      session.delegate = self;
      [session start];
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)callJoinSns:(NSString *)snsNo{
   NSString *urlString = appDelegate.main_url;
   NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"joinSNS"]];
   
   //aditInfo : 메시지번호 등의 추가정보
   NSString *paramString = [NSString stringWithFormat:@"usrNo=%@&snsNo=%@&dvcId=%@", self.myUserNo, snsNo, [appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"DVCID"]]];
   MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
   session.delegate = self;
   [session start];
}

-(void)callSyncChatUser{
   NSString *sqlString = [appDelegate.dbHelper getRoomUserNo:self.roomNo];
   NSMutableArray *selectArr = [appDelegate.dbHelper selectValueMutableArray:sqlString];
   NSString *usrLists = [[selectArr valueForKey:@"description"] componentsJoinedByString:@","];
   
   NSString *urlString = appDelegate.main_url;
   NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"syncChatUsers"]];

   NSString *paramString = [NSString stringWithFormat:@"usrNo=%@&roomNo=%@&usrLists=%@", self.myUserNo, self.roomNo, usrLists];
   MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
   session.delegate = self;
   [session start];
}

#pragma mark - MFURLSession delegate
- (void)returnDataWithObject:(MFURLSession *)session error:(NSString *)error{
   if (error != nil) {
      //실패테이블에 저장
      @try{
         tmpMissedCnt++;
         NSArray *dataSet = [session.returnDictionary objectForKey:@"DATASET"];
         NSString *roomNo = [[dataSet objectAtIndex:0] objectForKey:@"ROOM_NO"];
         NSString *contentType = [[dataSet objectAtIndex:0] objectForKey:@"CONTENT_TY"];
         NSString *content = [[dataSet objectAtIndex:0] objectForKey:@"CONTENT"];
         NSString *contentPrev = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"CONTENT_PREV"]];
         NSString *decodeContent = [NSString urlDecodeString:content];
         NSString *fileName = [[dataSet objectAtIndex:0] objectForKey:@"FILE_NM"];
         NSString *decodeFileNm = [NSString urlDecodeString:fileName];
         
         NSError *error;
         NSData *jsonData = [NSJSONSerialization dataWithJSONObject:self.editInfoDic options:0 error:&error];
         NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
         
         if([contentType isEqualToString:@"LONG_TEXT"]){
            decodeContent = @"";
            NSString *sqlString = [appDelegate.dbHelper insertMissedChat:roomNo contentType:contentType content:decodeContent fileName:decodeFileNm aditInfo:jsonString contentPrev:contentPrev];
            [appDelegate.dbHelper crudStatement:sqlString];
            
         } else {
            contentPrev = @"";
            NSString *sqlString = [appDelegate.dbHelper insertMissedChat:roomNo contentType:contentType content:decodeContent fileName:decodeFileNm aditInfo:jsonString contentPrev:contentPrev];
            [appDelegate.dbHelper crudStatement:sqlString];
         }
         
         NSString *sqlString2 = [appDelegate.dbHelper getMissedChat];
         [appDelegate.dbHelper selectMutableArray:sqlString2];
         
      } @catch (NSException *exception) {
         NSLog(@"%s Exception : %@", __func__, exception);
      }
      
   } else {
      NSLog(@"session.returnDictionary : %@", session.returnDictionary);
      if(session.returnDictionary != nil){
         NSString *result = [session.returnDictionary objectForKey:@"RESULT"];
         NSString *wsName = [[session.url absoluteString] lastPathComponent];
         
         if ([result isEqualToString:@"SUCCESS"]) {
            @try{
               if ([wsName isEqualToString:@"saveAttachedFile"]) {
                  NSString *affected = [session.returnDictionary objectForKey:@"AFFECTED"];
                  if ([affected intValue]>0) {
                     [self dismissViewControllerAnimated:YES completion:^(void){
                        //채팅에서 noti_savePost를 왜쓰지??? 확인필요
                        [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_SavePost" object:nil userInfo:@{@"RESULT":@"SUCCESS"}];
                     }];
                  }
               } else if([wsName isEqualToString:@"saveChatReadStatus"]){
                  if(appDelegate.isChatViewing){
                     NSString *roomNo = [session.returnDictionary objectForKey:@"ROOM_NO"];
                     NSArray *dataSet = [session.returnDictionary objectForKey:@"DATASET"];
                     for(int i=0; i<dataSet.count; i++){
                        NSString *chatNoList = [NSString urlDecodeString:[[dataSet objectAtIndex:i] objectForKey:@"CHAT_NO_LIST"]];
                        NSNumber *unreadCnt = [[dataSet objectAtIndex:i] objectForKey:@"UNREAD_COUNT"];
                        
                        NSString *sqlString = [appDelegate.dbHelper updateChatUnReadCount:unreadCnt roomNo:roomNo chatNoList:chatNoList];
                        [appDelegate.dbHelper crudStatement:sqlString];
                        
                        unReadCnt = unreadCnt;
                     }
                     
                     if([[NSString stringWithFormat:@"%@", roomNo] isEqualToString:[NSString stringWithFormat:@"%@", self.roomNo]]){
#ifdef DEBUG
                        NSLog(@"읽음카운트 처리");
#endif
                        //읽음카운트 처리 (reload하니 채팅이 버벅거리면서 올라감. reload안해도 읽음 처리는 됨. 왜지? 테스트 계속 해봐야 할듯)
                        //[self.tableView reloadData];
                     } else {
                        
                     }
                  }
                  
               } else if([wsName isEqualToString:@"saveChat"]){
                  //웹서비스 리턴 결과 무시(SUCCESS)
                  //NSLog(@"웹서비스 리턴 결과 무시(SUCCESS)");
                  
               } else if([wsName isEqualToString:@"joinSNS"]){
                  NSMutableArray *dataSet = [session.returnDictionary objectForKey:@"DATASET"];
                  NSString *message = [session.returnDictionary objectForKey:@"MESSAGE"];
                  if([message isEqualToString:@"SNS_IS_NULL"]){
                     UIAlertController *alert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"join_sns_toast5", @"join_sns_toast5"), joinSnsName] message:nil preferredStyle:UIAlertControllerStyleAlert];
                     UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                                      handler:^(UIAlertAction * action) {
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                      }];
                     [alert addAction:okButton];
                     [self presentViewController:alert animated:YES completion:nil];
                     
                  } else {
                     NSString *snsName = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"SNS_NM"]];
                     NSString *affected = [[dataSet objectAtIndex:0] objectForKey:@"AFFECTED"];
                     NSString *needAllow = [[dataSet objectAtIndex:0] objectForKey:@"NEED_ALLOW"];
                     
                     if([affected intValue]==1){
                        if([needAllow intValue]==0){
                           //가입완료
                           UIAlertController *alert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"join_sns_toast1_1", @"join_sns_toast1_1"), snsName] message:nil preferredStyle:UIAlertControllerStyleAlert];
                           UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                                            handler:^(UIAlertAction * action) {
                                                                               [alert dismissViewControllerAnimated:YES completion:nil];
                                                                               
                                                                               [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_RefreshTeamList" object:nil userInfo:nil];
                                                                               [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_RefreshTeamSelect" object:nil userInfo:nil];
                                                                               [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_RefreshFeed" object:nil userInfo:nil];
                                                                            }];
                           
                           [alert addAction:okButton];
                           [self presentViewController:alert animated:YES completion:nil];
                           
                        } else if([needAllow intValue]==1){
                           //가입 신청 완료
                           UIAlertController *alert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"join_sns_toast2", @"join_sns_toast2"), snsName] message:nil preferredStyle:UIAlertControllerStyleAlert];
                           UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                                            handler:^(UIAlertAction * action) {
                                                                               [alert dismissViewControllerAnimated:YES completion:nil];
                                                                               
                                                                               [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_RefreshTeamList" object:nil userInfo:nil];
                                                                               [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_RefreshTeamSelect" object:nil userInfo:nil];
                                                                               [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_RefreshFeed" object:nil userInfo:nil];
                                                                            }];
                           
                           [alert addAction:okButton];
                           [self presentViewController:alert animated:YES completion:nil];
                        }
                        
                     } else if ([affected intValue]==0) {
                        if([needAllow intValue]==0){
                           //이미 가입된 상태
                           UIAlertController *alert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"join_sns_toast3", @"join_sns_toast3"), snsName] message:nil preferredStyle:UIAlertControllerStyleAlert];
                           UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                                            handler:^(UIAlertAction * action) {
                                                                               [alert dismissViewControllerAnimated:YES completion:nil];
                                                                            }];
                           
                           [alert addAction:okButton];
                           [self presentViewController:alert animated:YES completion:nil];
                           
                        } else if([needAllow intValue]==1){
                           //이미 가입 신청된 상태
                           UIAlertController *alert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"join_sns_toast4", @"join_sns_toast4"), snsName] message:nil preferredStyle:UIAlertControllerStyleAlert];
                           UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                                            handler:^(UIAlertAction * action) {
                                                                               [alert dismissViewControllerAnimated:YES completion:nil];
                                                                            }];
                           [alert addAction:okButton];
                           [self presentViewController:alert animated:YES completion:nil];
                        }
                     }
                     
                  }
                  
               } else if([wsName isEqualToString:@"syncChatUsers"]){
//                  NSLog(@"session.returnDictionary : %@", session.returnDictionary);
                  NSDictionary *dic = session.returnDictionary;
                  NSArray *dataSetArr = [dic objectForKey:@"DATASET"];
                  
                  for(int i=0; i<dataSetArr.count; i++){
                     NSDictionary *dataSet = [dataSetArr objectAtIndex:i];
                     NSString *userNo = [dataSet objectForKey:@"NODE_NO"];
                     NSString *userId = [NSString urlDecodeString:[dataSet objectForKey:@"CUSER_ID"]];
                     NSString *userName = [NSString urlDecodeString:[dataSet objectForKey:@"USER_NM"]];
                     NSString *userImg = [NSString urlDecodeString:[dataSet objectForKey:@"NODE_IMG"]];
                     NSString *userMsg = [NSString urlDecodeString:[dataSet objectForKey:@"PROFILE_MSG"]];
                     NSString *phoneNo = [NSString urlDecodeString:[dataSet objectForKey:@"PHONE_NO"]];
                     NSString *deptNo = [dataSet objectForKey:@"DEPT_NO"];
                     NSString *userBgImg = [NSString urlDecodeString:[dataSet objectForKey:@"NODE_BG_IMG"]];
                     
                     NSString *deptName = [NSString urlDecodeString:[dataSet objectForKey:@"DEPT_NM"]];
                     NSString *levelNo = [NSString urlDecodeString:[dataSet objectForKey:@"LEVEL_NO"]];
                     NSString *levelName = [NSString urlDecodeString:[dataSet objectForKey:@"LEVEL_NM"]];
                     NSString *dutyNo = [NSString urlDecodeString:[dataSet objectForKey:@"DUTY_NO"]];
                     NSString *dutyName = [NSString urlDecodeString:[dataSet objectForKey:@"DUTY_NM"]];
                     NSString *jobGrpName = [NSString urlDecodeString:[dataSet objectForKey:@"JOB_GRP_NM"]];
                     NSString *exCompNo = [NSString urlDecodeString:[dataSet objectForKey:@"EX_COMPANY"]];
                     NSString *exCompName = [NSString urlDecodeString:[dataSet objectForKey:@"EX_COMPANY_NM"]];
                     NSString *userType = [dataSet objectForKey:@"SNS_USER_TYPE"];
                     
                     NSString *sqlString = [appDelegate.dbHelper insertOrUpdateUsers:userNo userId:userId userName:userName userImg:userImg userMsg:userMsg phoneNo:phoneNo deptNo:deptNo userBgImg:userBgImg deptName:deptName levelNo:levelNo levelName:levelName dutyNo:dutyNo dutyName:dutyName jobGrpName:jobGrpName exCompNo:exCompNo exCompName:exCompName userType:userType];
                     [appDelegate.dbHelper crudStatement:sqlString];
                     
                     NSString *sqlString2 = [appDelegate.dbHelper insertChatUsers:self.roomNo userNo:userNo];
                     [appDelegate.dbHelper crudStatement:sqlString2];
                  }
               }
               
            } @catch (NSException *exception) {
               NSLog(@"%s Exception : %@", __func__, exception);
            }
            
         } else{
            //실패테이블에 저장
            @try{
               if([wsName isEqualToString:@"saveChat"]){
                  tmpMissedCnt++;
//                  NSLog(@"실패dic2 : %@",session.returnDictionary);
                  NSArray *dataSet = [session.returnDictionary objectForKey:@"DATASET"];
                  NSString *roomNo = [[dataSet objectAtIndex:0] objectForKey:@"ROOM_NO"];
                  NSString *contentType = [[dataSet objectAtIndex:0] objectForKey:@"CONTENT_TY"];
                  NSString *content = [[dataSet objectAtIndex:0] objectForKey:@"CONTENT"];
                  NSString *decodeContent = [NSString urlDecodeString:content];
                  NSString *contentPrev = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"CONTENT"]];
                  NSString *fileName = [[dataSet objectAtIndex:0] objectForKey:@"FILE_NM"];
                  NSString *decodeFileNm = [NSString urlDecodeString:fileName];
                  
                  NSError *error;
                  NSData *jsonData = [NSJSONSerialization dataWithJSONObject:self.editInfoDic options:0 error:&error];
                  NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
                  
                  if([contentType isEqualToString:@"LONG_TEXT"]){
                     NSString *sqlString = [appDelegate.dbHelper insertMissedChat:roomNo contentType:contentType content:@"" fileName:decodeFileNm aditInfo:jsonString contentPrev:contentPrev];
                     [appDelegate.dbHelper crudStatement:sqlString];
                  } else {
                     NSString *sqlString = [appDelegate.dbHelper insertMissedChat:roomNo contentType:contentType content:decodeContent fileName:decodeFileNm aditInfo:jsonString contentPrev:@""];
                     [appDelegate.dbHelper crudStatement:sqlString];
                  }
                  
                  NSString *sqlString2 = [appDelegate.dbHelper getMissedChat];
                  [appDelegate.dbHelper selectMutableArray:sqlString2];
      
                  
               } else if([wsName isEqualToString:@"joinSNS"]){
//                  NSLog(@"session.returnDictionary : %@", session.returnDictionary);
                  NSString *message = [session.returnDictionary objectForKey:@"MESSAGE"];
                  if([message isEqualToString:@"SNS_IS_NULL"]){
                     UIAlertController *alert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"join_sns_toast5", @"join_sns_toast5"), joinSnsName] message:nil preferredStyle:UIAlertControllerStyleAlert];
                     UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                                      handler:^(UIAlertAction * action) {
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                      }];
                     [alert addAction:okButton];
                     [self presentViewController:alert animated:YES completion:nil];
                  }
               }
               
            } @catch (NSException *exception) {
               NSLog(@"%s Exception : %@", __func__, exception);
            }
         }
      } else{
         //데이터,와이파이 둘 다 꺼져있을경우
         NSLog(@"인터넷 연결이 오프라인으로 나타납니다.");
         
      }
   }
}

- (void)returnError:(MFURLSession *)session error:(NSError *)error{
#ifdef DEBUG
   NSLog(@"error code : %ld", (long)error.code);
#endif
   
   [SVProgressHUD dismiss];
   if(error.code == -1009){
      //Code=-1009 : 인터넷연결 꺼져있을경우?
      //실패테이블에 저장
      @try{
         tmpMissedCnt++;
         NSUInteger msgDataCnt = self.msgData.chatArray.count;
         int count = missedCnt + tmpMissedCnt;
         NSString *dvcID = [appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"DVCID"]];//[MFUtil getUUID];
         
         NSString *roomNo = [self.firstAddMsg objectForKey:@"ROOM_NO"];
         NSString *contentType = [self.firstAddMsg objectForKey:@"CONTENT_TY"];
         
         NSString *content;
         content = [NSString urlDecodeString:[self.firstAddMsg objectForKey:@"CONTENT"]];
         
         NSIndexPath *rowNo = [NSIndexPath indexPathForItem:(msgDataCnt-count) inSection:0];
         self.editInfoDic = [NSMutableDictionary dictionary];
         [self.editInfoDic setObject:@"FAILED" forKey:@"TYPE"];
         [self.editInfoDic setObject:[NSNumber numberWithInteger:rowNo.row] forKey:@"TMP_IDX"];
         [self.editInfoDic setObject:dvcID forKey:@"DEVICE_ID"];
         [self.editInfoDic setObject:@"" forKey:@"LOCAL_CONTENT"];
         
         NSError *error;
         NSData *jsonData = [NSJSONSerialization dataWithJSONObject:self.editInfoDic options:0 error:&error];
         NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
         
         [self.firstAddMsg setObject:jsonString forKey:@"ADIT_INFO"];
         
         NSString *sqlString = [appDelegate.dbHelper insertMissedChat:roomNo contentType:contentType content:content fileName:@"" aditInfo:jsonString contentPrev:@""];
         [appDelegate.dbHelper crudStatement:sqlString];
         
         NSString *sqlString2 = [appDelegate.dbHelper getMissedChat];
         NSMutableArray *selectArr = [appDelegate.dbHelper selectMutableArray:sqlString2];
         [self.firstAddMsg setObject:[[selectArr objectAtIndex:0]objectForKey:@"CHAT_NO"] forKey:@"CHAT_NO"];
         
         [self.msgData.chatArray removeObjectAtIndex:rowNo.row];
         [self.msgData.chatArray insertObject:self.firstAddMsg atIndex:self.msgData.chatArray.count];
         
         [self.tableView reloadData];
         
      } @catch (NSException *exception) {
         NSLog(@"%s Exception : %@", __func__, exception);
      }
   
   } if(error.code == -1001){
      //요청한 시간이 초과되었습니다.
      //실패테이블에 저장
      @try{
         tmpMissedCnt++;
         NSUInteger msgDataCnt = self.msgData.chatArray.count;
         int count = missedCnt + tmpMissedCnt;
         NSString *dvcID = [appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"DVCID"]];//[MFUtil getUUID];
         
         NSString *roomNo = [self.firstAddMsg objectForKey:@"ROOM_NO"];
         NSString *contentType = [self.firstAddMsg objectForKey:@"CONTENT_TY"];
         
         NSString *content;
         content = [NSString urlDecodeString:[self.firstAddMsg objectForKey:@"CONTENT"]];
         
         NSIndexPath *rowNo = [NSIndexPath indexPathForItem:(msgDataCnt-count) inSection:0];
         self.editInfoDic = [NSMutableDictionary dictionary];
         [self.editInfoDic setObject:@"FAILED" forKey:@"TYPE"];
         [self.editInfoDic setObject:[NSNumber numberWithInteger:rowNo.row] forKey:@"TMP_IDX"];
         [self.editInfoDic setObject:dvcID forKey:@"DEVICE_ID"];
         [self.editInfoDic setObject:@"" forKey:@"LOCAL_CONTENT"];
         
         NSError *error;
         NSData *jsonData = [NSJSONSerialization dataWithJSONObject:self.editInfoDic options:0 error:&error];
         NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
         
         [self.firstAddMsg setObject:jsonString forKey:@"ADIT_INFO"];
         
         NSString *sqlString = [appDelegate.dbHelper insertMissedChat:roomNo contentType:contentType content:content fileName:@"" aditInfo:jsonString contentPrev:@""];
         [appDelegate.dbHelper crudStatement:sqlString];
         
         NSString *sqlString2 = [appDelegate.dbHelper getMissedChat];
         NSMutableArray *selectArr = [appDelegate.dbHelper selectMutableArray:sqlString2];
         [self.firstAddMsg setObject:[[selectArr objectAtIndex:0]objectForKey:@"CHAT_NO"] forKey:@"CHAT_NO"];
         
         [self.msgData.chatArray removeObjectAtIndex:rowNo.row];
         [self.msgData.chatArray insertObject:self.firstAddMsg atIndex:self.msgData.chatArray.count];
         
         [self.tableView reloadData];
         
      } @catch (NSException *exception) {
         NSLog(@"%s Exception : %@", __func__, exception);
      }
   }
}

#pragma mark - MFURLSessionUpload Delegate
-(void)returnDictionary:(NSDictionary *)dictionary WithError:(NSString *)error{
   if (error != nil) {
      
   } else{
      if(dictionary != nil){
#ifdef DEBUG
         NSLog(@"dictionary : %@", dictionary);
#endif
         @try{
            uploadCnt++;
            videoThumbName = @"";
            
            NSString *ttype = [[resultArr objectAtIndex:uploadCnt-1] objectForKey:@"TYPE"];
            if([ttype isEqualToString:@"IMG"]){
               
            } else if([ttype isEqualToString:@"VIDEO"]){
               
            } else if([ttype isEqualToString:@"VIDEO_THUMB"]){
               videoThumbName = [[dictionary objectForKey:@"FILE_URL"] lastPathComponent];
            
            } else if([ttype isEqualToString:@"FILE"]){
               
            }
            
            if(uploadCnt<resultArr.count){
               //첫번째 파일 먼저 올리고, 순차적으로 업로드 하기 위해 재호출
               NSString *type = [[resultArr objectAtIndex:uploadCnt] objectForKey:@"TYPE"];
               
               if([type isEqualToString:@"IMG"]){
                  UIImage *value = [[resultArr objectAtIndex:uploadCnt] objectForKey:@"VALUE"];
                  value = [MFUtil getResizeImageRatio:value];
                  
                  if([[resultArr objectAtIndex:uploadCount] objectForKey:@"IS_SHARE"]!=nil&&[[[resultArr objectAtIndex:uploadCount] objectForKey:@"IS_SHARE"]isEqualToString:@"true"]){
                     [self shareMediaFiles:nil mediaType:type isThumbImg:value isFile:nil isShared:@"true" srcFileUrl:[[resultArr objectAtIndex:uploadCount] objectForKey:@"URL"]];
                     
                  } else {
                     NSData * data = UIImageJPEGRepresentation(value, 0.7);
                     [self saveMediaFiles:data mediaType:type];
                  }
                  
               } else if([type isEqualToString:@"VIDEO"]){
                  if([[resultArr objectAtIndex:uploadCount] objectForKey:@"IS_SHARE"]!=nil&&[[[resultArr objectAtIndex:uploadCount] objectForKey:@"IS_SHARE"]isEqualToString:@"true"]){
                     [self shareMediaFiles:nil mediaType:type isThumbImg:[[resultArr objectAtIndex:uploadCount] objectForKey:@"VIDEO_THUMB"] isFile:nil isShared:@"true" srcFileUrl:[[resultArr objectAtIndex:uploadCount] objectForKey:@"URL"]];
                     
                  } else {
                     NSData *data = [[resultArr objectAtIndex:uploadCnt] objectForKey:@"VALUE"];
//                     if((float)data.length/1024.0f/1024.0f>20){
//                        [self videoSizeCheck];
//                     } else {
                        [self saveMediaFiles:data mediaType:type];
//                     }
                  }
                  
               } else if([type isEqualToString:@"VIDEO_THUMB"]){
                  UIImage *value = [[resultArr objectAtIndex:uploadCnt] objectForKey:@"VALUE"];
                  value = [MFUtil getResizeImageRatio:value];
                  
                  NSData * data = UIImageJPEGRepresentation(value, 0.7);
                  [self saveMediaFiles:data mediaType:type];
               
               } else if([type isEqualToString:@"FILE"]){
                  if([[resultArr objectAtIndex:uploadCount] objectForKey:@"IS_SHARE"]!=nil&&[[[resultArr objectAtIndex:uploadCount] objectForKey:@"IS_SHARE"]isEqualToString:@"true"]){
                     [self shareMediaFiles:nil mediaType:type isThumbImg:nil isFile:nil isShared:@"true" srcFileUrl:[[resultArr objectAtIndex:uploadCount] objectForKey:@"VALUE"]];
                     
                  } else {
                     NSData *data = [[resultArr objectAtIndex:uploadCount] objectForKey:@"FILE_DATA"];
                     [self saveMediaFiles:data mediaType:type];
                  }
               }
               
            } else if (uploadCnt==resultArr.count) {
               uploadCnt=0;
               mediaFileArr = [[NSMutableArray alloc] init];
               
               if([self.fromSegue isEqualToString:@"SHARE_CHAT_MODAL"]||[self.fromSegue isEqualToString:@"SHARE_FROM_CHAT_MODAL"]||[self.fromSegue isEqualToString:@"SHARE_FROM_POST_MODAL"]){
                  NSUserDefaults *shareDefaults = [[NSUserDefaults alloc] initWithSuiteName:appDelegate.shareGroupName];
                  [shareDefaults removeObjectForKey:@"SHARE_ITEM"];
                  [shareDefaults synchronize];
                  
                  [appDelegate.appPrefs removeObjectForKey:@"SHARE_ITEM_FROM_CHAT"];
                  [appDelegate.appPrefs removeObjectForKey:@"SHARE_ITEM_FROM_POST"];
                  
               }
            }
          
         } @catch (NSException *exception) {
            NSLog(@"%s Exception : %@", __func__, exception);
         }
         
      } else {
         //데이터,와이파이 둘 다 꺼져있을경우
#ifdef DEBUG
         NSLog(@"인터넷 연결이 오프라인으로 나타납니다.");
#endif
         
      }
   }
}

- (void)returnResponse:(NSURLResponse *)response WithError:(NSString *)error{
#ifdef DEBUG
   NSLog(@"%s, %@", __func__, error);
#endif
   
   //setUpSendCell exception : *** -[__NSCFString substringFromIndex:]: Index 9223372036854775808 out of bounds; string length 0
   //네크워크없을때 이미지보내면 이미지없이 엑스버튼뜨고 위 에러남->수정해야함
   /*
    //실패테이블에 저장
    tmpMissedCnt++;
    NSUInteger msgDataCnt = self.msgData.chatArray.count;
    int count = missedCnt + tmpMissedCnt;
    NSString *dvcID = [MFUtil getUUID];
    
    NSString *roomNo = [self.firstAddMsg objectForKey:@"ROOM_NO"];
    NSString *contentType = [self.firstAddMsg objectForKey:@"CONTENT_TY"];
    NSString *content = [NSString urlDecodeString:[self.firstAddMsg objectForKey:@"CONTENT"]];
    
    NSIndexPath *rowNo = [NSIndexPath indexPathForItem:(msgDataCnt-count) inSection:0];
    self.editInfoDic = [NSMutableDictionary dictionary];
    [self.editInfoDic setObject:@"FAILED" forKey:@"TYPE"];
    [self.editInfoDic setObject:[NSNumber numberWithInteger:rowNo.row] forKey:@"TMP_IDX"];
    [self.editInfoDic setObject:dvcID forKey:@"DEVICE_ID"];
    [self.editInfoDic setObject:@"" forKey:@"LOCAL_CONTENT"];
    
    NSError *error2;
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:self.editInfoDic options:0 error:&error2];
    NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
    
    [self.firstAddMsg setObject:jsonString forKey:@"ADIT_INFO"];
    
    NSString *sqlString = [appDelegate.dbHelper insertMissedChat:roomNo contentType:contentType content:content fileName:@"" aditInfo:jsonString contentPrev:@""];
    [appDelegate.dbHelper crudStatement:sqlString];
    
    NSString *sqlString2 = [appDelegate.dbHelper getMissedChat];
   NSMutableArray *selectArr = [appDelegate.dbHelper selectMutableArray:sqlString2];
    [self.firstAddMsg setObject:[[selectArr objectAtIndex:0]objectForKey:@"CHAT_NO"] forKey:@"CHAT_NO"];
    
    [self.msgData.chatArray removeObjectAtIndex:rowNo.row];
    [self.msgData.chatArray insertObject:self.firstAddMsg atIndex:self.msgData.chatArray.count];
    
    [self.tableView reloadData];
   */
}


#pragma mark - TableView Delegate
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
   return 1;
}

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
   return UITableViewAutomaticDimension;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
   return self.msgData.chatArray.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
   ChatSendViewCell *sendCell = [tableView dequeueReusableCellWithIdentifier:@"ChatSendViewCell"];
   ChatReceiveViewCell *receiveCell = [tableView dequeueReusableCellWithIdentifier:@"ChatReceiveViewCell"];
   SystemLabelViewCell *sysCell = [tableView dequeueReusableCellWithIdentifier:@"SystemLabelViewCell"];
   
   ChatSendFileCell *fileSendCell = [tableView dequeueReusableCellWithIdentifier:@"ChatSendFileCell"];
   ChatReceiveFileCell *fileRecvCell = [tableView dequeueReusableCellWithIdentifier:@"ChatReceiveFileCell"];
   
   ChatInviteSendCell *inviteSendCell = [tableView dequeueReusableCellWithIdentifier:@"ChatInviteSendCell"];
   ChatInviteReceiveCell *inviteRecvCell = [tableView dequeueReusableCellWithIdentifier:@"ChatInviteReceiveCell"];
   
   LongChatSendViewCell *longSendCell = [tableView dequeueReusableCellWithIdentifier:@"LongChatSendViewCell"];
   LongChatReceiveViewCell *longRecvCell = [tableView dequeueReusableCellWithIdentifier:@"LongChatReceiveViewCell"];
   
   if(self.msgData.chatArray!=nil){
      @try{
         NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
         
         NSString *roomNo = [msgDict objectForKey:@"ROOM_NO"];
         NSString *userNo = [msgDict objectForKey:@"USER_NO"];
         NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
         
         //내가보낸 메시지일 경우
         if([[NSString stringWithFormat:@"%@", userNo] isEqualToString:[NSString stringWithFormat:@"%@", _myUserNo]]){
            
            if([contentType isEqualToString:@"FILE"]){
               if (fileSendCell == nil) {
                  NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"ChatSendFileCell" owner:self options:nil];
                  
                  for (id currentObject in topLevelObject) {
                     if ([currentObject isKindOfClass:[ChatSendFileCell class]]) {
                        fileSendCell = (ChatSendFileCell *) currentObject;
                        [fileSendCell setSelectionStyle:UITableViewCellSelectionStyleNone];
                     }
                  }
               }
               
               fileSendCell.fTimeLabel.text = nil;
               fileSendCell.fDateLabel.text = nil;
               fileSendCell.fReadLabel.text = nil;
               fileSendCell.fMsgLabel.text = nil;
               fileSendCell.fFileIcon.image = nil;
               
               [self setFileSendCell:fileSendCell atIndexPath:indexPath];
               fileSendCell.backgroundColor = [MFUtil myRGBfromHex:@"ABC0D0"]; //[MFUtil myRGBfromHex:@"E9F3FA"];
               return fileSendCell;
               
            } else if([contentType isEqualToString:@"INVITE"]){
               if (inviteSendCell == nil) {
                  NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"ChatInviteSendCell" owner:self options:nil];
                  
                  for (id currentObject in topLevelObject) {
                     if ([currentObject isKindOfClass:[ChatInviteSendCell class]]) {
                        inviteSendCell = (ChatInviteSendCell *) currentObject;
                        [inviteSendCell setSelectionStyle:UITableViewCellSelectionStyleNone];
                     }
                  }
               }
               
               inviteSendCell.dateLabel.text = nil;
               inviteSendCell.readLabel.text = nil;
               inviteSendCell.timeLabel.text = nil;
               inviteSendCell.imgView.image = nil;
               inviteSendCell.titleLabel.text = nil;
               inviteSendCell.contentLabel.text = nil;
               
               [self setInviteSendCell:inviteSendCell atIndexPath:indexPath];
               inviteSendCell.backgroundColor = [MFUtil myRGBfromHex:@"ABC0D0"]; //[MFUtil myRGBfromHex:@"E9F3FA"];
               return inviteSendCell;
               
            } else if([contentType isEqualToString:@"LONG_TEXT"]){
               if (longSendCell == nil) {
                  NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"LongChatSendViewCell" owner:self options:nil];
                  
                  for (id currentObject in topLevelObject) {
                     if ([currentObject isKindOfClass:[LongChatSendViewCell class]]) {
                        longSendCell = (LongChatSendViewCell *) currentObject;
                        [longSendCell setSelectionStyle:UITableViewCellSelectionStyleNone];
                     }
                  }
               }
               
               longSendCell.dateLabel.text = nil;
               longSendCell.readLabel.text = nil;
               longSendCell.timeLabel.text = nil;
               longSendCell.msgLabel.text = nil;
               
               [self setLongSendCell:longSendCell atIndexPath:indexPath];
               longSendCell.backgroundColor = [MFUtil myRGBfromHex:@"ABC0D0"]; //[MFUtil myRGBfromHex:@"E9F3FA"];
               return longSendCell;
               
            } else {
               if (sendCell == nil) {
                  NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"ChatSendViewCell" owner:self options:nil];
                  
                  for (id currentObject in topLevelObject) {
                     if ([currentObject isKindOfClass:[ChatSendViewCell class]]) {
                        sendCell = (ChatSendViewCell *) currentObject;
                        [sendCell setSelectionStyle:UITableViewCellSelectionStyleNone];
                     }
                  }
               }
 
               sendCell.timeLabel.text = nil;
               sendCell.dateLabel.text = nil;
               sendCell.imgMessage.image = nil;
               sendCell.readCntLabel.text = nil;
               sendCell.msgLabel.text = nil;
               
               sendCell.msgLabel.enabledTextCheckingTypes = NSTextCheckingTypeLink|NSTextCheckingTypeAddress|NSTextCheckingTypePhoneNumber;
               sendCell.msgLabel.userInteractionEnabled = YES;
               sendCell.msgLabel.tttdelegate = self;
               
               [self setUpSendCell:sendCell atIndexPath:indexPath];
               sendCell.backgroundColor = [MFUtil myRGBfromHex:@"ABC0D0"]; //[MFUtil myRGBfromHex:@"E9F3FA"];
               return sendCell;
            }
            
         } else {
            if([[NSString stringWithFormat:@"%@", roomNo] isEqualToString:[NSString stringWithFormat:@"%@", _roomNo]]){
               if([contentType isEqualToString:@"SYS"]){
                  if (sysCell == nil) {
                     NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"SystemLabelViewCell" owner:self options:nil];
                     
                     for (id currentObject in topLevelObject) {
                        if ([currentObject isKindOfClass:[SystemLabelViewCell class]]) {
                           sysCell = (SystemLabelViewCell *) currentObject;
                           [sysCell setSelectionStyle:UITableViewCellSelectionStyleNone];
                        }
                     }
                  }
                  
                  sysCell.systemLabel.text = nil;
                  
                  [self setUpSysCell:sysCell atIndexPath:indexPath];
                  sysCell.backgroundColor = [MFUtil myRGBfromHex:@"ABC0D0"]; //[MFUtil myRGBfromHex:@"E9F3FA"];
                  return sysCell;
                  
               } else if([contentType isEqualToString:@"FILE"]){
                  if (fileRecvCell == nil) {
                     NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"ChatReceiveFileCell" owner:self options:nil];
                     
                     for (id currentObject in topLevelObject) {
                        if ([currentObject isKindOfClass:[ChatReceiveFileCell class]]) {
                           fileRecvCell = (ChatReceiveFileCell *) currentObject;
                           [fileRecvCell setSelectionStyle:UITableViewCellSelectionStyleNone];
                        }
                     }
                  }
                  
                  fileRecvCell.fUserName.text = nil;
                  fileRecvCell.fAvatarImage.image = nil;
                  fileRecvCell.fTimeLabel.text = nil;
                  fileRecvCell.fDateLabel.text = nil;
                  fileRecvCell.fReadLabel.text = nil;
                  fileRecvCell.fMsgLabel.text = nil;
                  fileRecvCell.fFileIcon.image = nil;
                  
                  [self setFileRevcCell:fileRecvCell atIndexPath:indexPath];
                  fileRecvCell.backgroundColor = [MFUtil myRGBfromHex:@"ABC0D0"]; //[MFUtil myRGBfromHex:@"E9F3FA"];
                  return fileRecvCell;
                  
               } else if([contentType isEqualToString:@"INVITE"]){
                  if(inviteRecvCell == nil) {
                     NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"ChatInviteReceiveCell" owner:self options:nil];
                     
                     for(id currentObject in topLevelObject) {
                        if([currentObject isKindOfClass:[ChatInviteReceiveCell class]]){
                           inviteRecvCell = (ChatInviteReceiveCell *) currentObject;
                           [inviteRecvCell setSelectionStyle:UITableViewCellSelectionStyleNone];
                        }
                     }
                  }
                  
                  inviteRecvCell.userImgView.image = nil;
                  inviteRecvCell.userName.text = nil;
                  inviteRecvCell.dateLabel.text = nil;
                  inviteRecvCell.readLabel.text = nil;
                  inviteRecvCell.timeLabel.text = nil;
                  inviteRecvCell.imgView.image = nil;
                  inviteRecvCell.titleLabel.text = nil;
                  inviteRecvCell.contentLabel.text = nil;
                  
                  [self setInviteRecvCell:inviteRecvCell atIndexPath:indexPath];
                  inviteRecvCell.backgroundColor = [MFUtil myRGBfromHex:@"ABC0D0"]; //[MFUtil myRGBfromHex:@"E9F3FA"];
                  return inviteRecvCell;
                  
               } else if([contentType isEqualToString:@"LONG_TEXT"]){
                  if (longRecvCell == nil) {
                     NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"LongChatReceiveViewCell" owner:self options:nil];
                     
                     for (id currentObject in topLevelObject) {
                        if ([currentObject isKindOfClass:[LongChatReceiveViewCell class]]) {
                           longRecvCell = (LongChatReceiveViewCell *) currentObject;
                           [longRecvCell setSelectionStyle:UITableViewCellSelectionStyleNone];
                        }
                     }
                  }
                  
                  longRecvCell.dateLabel.text = nil;
                  longRecvCell.userImg.image = nil;
                  longRecvCell.userName.text = nil;
                  longRecvCell.readLabel.text = nil;
                  longRecvCell.timeLabel.text = nil;
                  longRecvCell.msgLabel.text = nil;
                  
                  [self setLongRecvCell:longRecvCell atIndexPath:indexPath];
                  longRecvCell.backgroundColor = [MFUtil myRGBfromHex:@"ABC0D0"]; //[MFUtil myRGBfromHex:@"E9F3FA"];
                  return longRecvCell;
                  
               } else {
                  if (receiveCell == nil) {
                     NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"ChatReceiveViewCell" owner:self options:nil];
                     
                     for (id currentObject in topLevelObject) {
                        if ([currentObject isKindOfClass:[ChatReceiveViewCell class]]) {
                           receiveCell = (ChatReceiveViewCell *) currentObject;
                           [receiveCell setSelectionStyle:UITableViewCellSelectionStyleNone];
                        }
                     }
                  }
                  
                  receiveCell.rAvatarImage.image = nil;
                  receiveCell.rUserName.text = nil;
                  receiveCell.rTimeLabel.text = nil;
                  receiveCell.rDateLabel.text = nil;
                  receiveCell.rReadCntLabel.text = nil;
                  receiveCell.rImageMessage.image = nil;
                  receiveCell.rMsgLabel.text = nil;
                  
                  receiveCell.rMsgLabel.enabledTextCheckingTypes = NSTextCheckingTypeLink|NSTextCheckingTypeAddress|NSTextCheckingTypePhoneNumber;
                  receiveCell.rMsgLabel.userInteractionEnabled = YES;
                  receiveCell.rMsgLabel.tttdelegate = self;
                  
                  [self setUpRecvCell:receiveCell atIndexPath:indexPath];
                  receiveCell.backgroundColor = [MFUtil myRGBfromHex:@"ABC0D0"]; //[MFUtil myRGBfromHex:@"E9F3FA"];
                  return receiveCell;
               }
               
            } else {
               if(![[NSString stringWithFormat:@"%@", userNo] isEqualToString:[NSString stringWithFormat:@"%@", _myUserNo]]){
#ifdef DEBUG
                  NSLog(@"다른방메시지도착1");
#endif
               }
               return nil;
            }
         }
      } @catch (NSException *exception) {
         NSLog(@"%s Exception : %@", __func__, exception);
      }
   }
   return nil;
}

#pragma mark - Setting TableView Cell
- (void)setUpSendCell:(ChatSendViewCell *)sendCell atIndexPath:(NSIndexPath *)indexPath {
   NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
   imgMsg = [[UIImage alloc]init];
   
   @try{
      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      NSString *decodeContent = [NSString urlDecodeString:content];
      NSString *date = [msgDict objectForKey:@"DATE"];
      NSString *decodeDate = [NSString urlDecodeString:date];
      NSString *fileThumb = [msgDict objectForKey:@"FILE_THUMB"];
      NSString *decodeFileThumb = [NSString urlDecodeString:fileThumb];
      NSString *aditInfo = [msgDict objectForKey:@"ADIT_INFO"];
      NSString *fileName = [msgDict objectForKey:@"FILE_NM"];
      NSString *unReadCount = [msgDict objectForKey:@"UNREAD_COUNT"];
      
      NSData *jsonData = [aditInfo dataUsingEncoding:NSUTF8StringEncoding];
      NSError *e;
      NSDictionary *aditDic = [NSJSONSerialization JSONObjectWithData:jsonData options:0 error:&e];
      
      NSString *localImgPath = @"";
      if([aditDic objectForKey:@"LOCAL_CONTENT"] !=nil) {
         localImgPath = [aditDic objectForKey:@"LOCAL_CONTENT"];
      }
      NSString *sendType = [aditDic objectForKey:@"TYPE"];
      
      NSString *loacalThumbPath = [self creatLocalChatFolder:contentType roomNo:self.roomNo chatDate:decodeDate];
      
      //이미지 데이터일 경우
      if([contentType isEqualToString:@"IMG"]){
         NSMutableString *contentStr = nil;
         
         if([content isEqualToString:@""]){
            contentStr = [[NSMutableString alloc]initWithString:localImgPath];
            //NSLog(@"I_실패한데이터 contentStr : %@", contentStr);
         } else if(![content isEqualToString:@""] && decodeFileThumb == nil){
            contentStr = [[NSMutableString alloc]initWithString:localImgPath];
            //NSLog(@"I_불러온데이터 contentStr : %@", contentStr);
         } else {
            contentStr = [[NSMutableString alloc]initWithString:decodeContent];
            //NSLog(@"I_전송한데이터 contentStr : %@", contentStr);
         }
         
         NSRange range = [contentStr rangeOfString:@"/" options:NSBackwardsSearch];
         NSMutableString *localStr = [[NSMutableString alloc]initWithString:contentStr];
         if(![content isEqualToString:@""] && decodeFileThumb != nil){
            [localStr insertString:@"/thumb" atIndex:range.location];
         }
         
         @try {
            if([content isEqualToString:@""]){
               NSString *thumbfileName = [contentStr substringFromIndex:range.location+1];
               NSString *imagePath = [loacalThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",thumbfileName]];
               //NSLog(@"실패,사진촬영 imagePath : %@", imagePath);
               
               NSData *data = [NSData dataWithContentsOfFile:imagePath];
               UIImage *image = [UIImage imageWithData:data];
               if(image){
                  //큰이미지 사이즈조절
                  if(image.size.height > image.size.width*2) {
                     UIImage *image2 = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(180,300) : image];
                     image = [MFUtil getScaledImage:image2 scaledToMaxWidth:180 maxHeight:300];
                  } else {
                     image = [MFUtil getScaledLowImage:image scaledToMaxWidth:180.0f];
                  }
                  
                  if (![[NSFileManager defaultManager] fileExistsAtPath:imagePath]){
                     //실패이미지를 위해 이미지 저장
                     NSData *imageThumbData = UIImagePNGRepresentation(image);
                     [imageThumbData writeToFile:imagePath atomically:YES];
                     
#ifdef DEBUG
                     NSLog(@"실패이미지를 위해 이미지 저장(이미지있음) : %@", imagePath);
#endif
                  }
                  
                  imgMsg = image;
                  
               } else {
                  if([self checkExpireChatImg:decodeDate]){
                     //이미지 만료됨
                     UIImage *expireImg = [UIImage imageNamed:@""];
                     imgMsg = expireImg;
                     
                  } else {
//                     NSData *data = [NSData dataWithContentsOfURL:[NSURL URLWithString:decodeContent]];
//                     UIImage *urlImg = [UIImage imageWithData:data];
//
//                     //큰이미지 사이즈조절
//                     if(urlImg.size.height > urlImg.size.width*2) {
//                        UIImage *image2 = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(180,300) : urlImg];
//                        urlImg = [MFUtil getScaledImage:image2 scaledToMaxWidth:180 maxHeight:300];
//                     } else {
//                        urlImg = [MFUtil getScaledLowImage:urlImg scaledToMaxWidth:180.0f];
//                     }
//
//                     if (![[NSFileManager defaultManager] fileExistsAtPath:imagePath]){
//                        //실패이미지를 위해 이미지 저장
//                        NSData *imageThumbData = UIImagePNGRepresentation(image);
//                        [imageThumbData writeToFile:imagePath atomically:YES];
//
//                        NSLog(@"실패이미지를 위해 이미지 저장(이미지없음) : %@", imagePath);
//                     }
//
//                     imgMsg = urlImg;
                     imgMsg = nil;
                  }
               }
               
            } else {
               NSString *fileName = [contentStr substringFromIndex:range.location+1];
               
               //썸네일이미지
               NSString *imagePath = [loacalThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",fileName]];
               //NSLog(@"불러온데이터 imagePath : %@", imagePath);
               
               NSData *data = [NSData dataWithContentsOfFile:imagePath];
               UIImage *image = [UIImage imageWithData:data];
               if(image){
                  imgMsg = image;
                  
               } else {
                  if([self checkExpireChatImg:decodeDate]){
                     //이미지 만료됨
                     UIImage *expireImg = [UIImage imageNamed:@""];
                     imgMsg = expireImg;
                     
                  } else {
//                     NSData *data = [NSData dataWithContentsOfURL:[NSURL URLWithString:decodeContent]];
//                     UIImage *urlImg = [UIImage imageWithData:data];
//
//                     //큰이미지 사이즈조절
//                     if(urlImg.size.height > urlImg.size.width*2) {
//                        UIImage *image2 = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(180,300) : urlImg];
//                        urlImg = [MFUtil getScaledImage:image2 scaledToMaxWidth:180 maxHeight:300];
//                     } else {
//                        urlImg = [MFUtil getScaledLowImage:urlImg scaledToMaxWidth:180.0f];
//                     }
//
//                     if (![[NSFileManager defaultManager] fileExistsAtPath:imagePath]){
//                        //실패이미지를 위해 이미지 저장
//                        NSData *imageThumbData = UIImagePNGRepresentation(urlImg);
//                        [imageThumbData writeToFile:imagePath atomically:YES];
//
//                        NSLog(@"이미지없을때 이미지 저장 : %@", imagePath);
//                     }
//
//                     imgMsg = urlImg;
                     imgMsg = nil;
                  }
               }
            }
         } @catch (NSException *exception) {
//            NSLog(@"setUpSendCell img exception : %@", exception);
         }
      
      } else if([contentType isEqualToString:@"VIDEO"]){
         NSMutableString *contentStr = nil;
         
         if([content isEqualToString:@""]){
            contentStr = [[NSMutableString alloc]initWithString:localImgPath];
//            NSLog(@"V_실패한데이터 contentStr : %@", contentStr);
         } else if(![content isEqualToString:@""] && decodeFileThumb == nil){
            contentStr = [[NSMutableString alloc]initWithString:localImgPath];
//            NSLog(@"V_불러온데이터 contentStr : %@", contentStr);
         } else {
            contentStr = [[NSMutableString alloc]initWithString:decodeFileThumb];
//            NSLog(@"V_전송한데이터 contentStr : %@", contentStr);
         }
         
         NSRange range = [contentStr rangeOfString:@"/" options:NSBackwardsSearch];
         NSMutableString *localStr = [[NSMutableString alloc]initWithString:contentStr];
         if(![content isEqualToString:@""] && decodeFileThumb != nil){
            [localStr insertString:@"/thumb" atIndex:range.location];
         }
         
         @try {
            if([content isEqualToString:@""]){
               NSString *imagePath = [loacalThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",fileName]];
               
               NSData *data = [NSData dataWithContentsOfFile:imagePath];
               UIImage *image = [UIImage imageWithData:data];
               if(image){
                  //큰이미지 사이즈조절
                  if(image.size.height > image.size.width*2) {
                     UIImage *image2 = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(180,300) : image];
                     image = [MFUtil getScaledImage:image2 scaledToMaxWidth:180 maxHeight:300];
                  } else {
                     image = [MFUtil getScaledLowImage:image scaledToMaxWidth:180.0f];
                  }
                  
                  if (![[NSFileManager defaultManager] fileExistsAtPath:imagePath]){
                     //실패이미지를 위해 이미지 저장
                     NSData *imageThumbData = UIImagePNGRepresentation(image);
                     [imageThumbData writeToFile:imagePath atomically:YES];
                     
#ifdef DEBUG
                     NSLog(@"실패이미지를 위해 비디오이미지 저장(비디오이미지있음) : %@", imagePath);
#endif
                  }
                  
                  imgMsg = image;
                  
               } else {
                  if([self checkExpireChatImg:decodeDate]){
                     //이미지 만료됨
                     UIImage *expireImg = [UIImage imageNamed:@""];
                     imgMsg = expireImg;
                     
                  } else {
//                     NSRange range = [decodeContent rangeOfString:@"/" options:NSBackwardsSearch];
//                     NSString *filePath = [decodeContent substringToIndex:range.location+1];
//                     NSString *filePath2 = [filePath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb/%@",fileName]];
//
//                     NSData *data = [NSData dataWithContentsOfURL:[NSURL URLWithString:filePath2]];
//                     UIImage *urlImg = [UIImage imageWithData:data];
//
//                     //큰이미지 사이즈조절
//                     if(urlImg.size.height > urlImg.size.width*2) {
//                        UIImage *image2 = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(180,300) : urlImg];
//                        urlImg = [MFUtil getScaledImage:image2 scaledToMaxWidth:180 maxHeight:300];
//                     } else {
//                        urlImg = [MFUtil getScaledLowImage:urlImg scaledToMaxWidth:180.0f];
//                     }
//
//                     if (![[NSFileManager defaultManager] fileExistsAtPath:imagePath]){
//                        //실패이미지를 위해 이미지 저장
//                        NSData *imageThumbData = UIImagePNGRepresentation(urlImg);
//                        [imageThumbData writeToFile:imagePath atomically:YES];
//
//                        NSLog(@"실패이미지를 위해 비디오이미지 저장(비디오이미지없음) : %@", imagePath);
//                     }
//
//                     imgMsg = urlImg;
                     imgMsg = nil;
                  }
                  
               }
               
            } else {
               //NSString *fileName = [contentStr substringFromIndex:range.location+1];
               //썸네일이미지
               NSString *imagePath = [loacalThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",fileName]];
               //NSLog(@"불러온데이터 imagePath : %@", imagePath);
               
               NSData *data = [NSData dataWithContentsOfFile:imagePath];
               UIImage *image = [UIImage imageWithData:data];
               
               if(image){
                  imgMsg = image;
                  
               } else {
                  if([self checkExpireChatImg:decodeDate]){
                     //이미지 만료됨
                     UIImage *expireImg = [UIImage imageNamed:@""];
                     imgMsg = expireImg;
                     
                  } else {
//                     NSRange range = [decodeContent rangeOfString:@"/" options:NSBackwardsSearch];
//                     NSString *filePath = [decodeContent substringToIndex:range.location+1];
//                     NSString *filePath2 = [filePath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb/%@",fileName]];
//
//                     NSData *data = [NSData dataWithContentsOfURL:[NSURL URLWithString:filePath2]];
//                     UIImage *urlImg = [UIImage imageWithData:data];
//
//                     //큰이미지 사이즈조절
//                     if(urlImg.size.height > urlImg.size.width*2) {
//                        UIImage *image2 = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(180,300) : urlImg];
//                        urlImg = [MFUtil getScaledImage:image2 scaledToMaxWidth:180 maxHeight:300];
//                     } else {
//                        urlImg = [MFUtil getScaledLowImage:urlImg scaledToMaxWidth:180.0f];
//                     }
//
//                     if (![[NSFileManager defaultManager] fileExistsAtPath:imagePath]){
//                        //실패이미지를 위해 이미지 저장
//                        NSData *imageThumbData = UIImagePNGRepresentation(urlImg);
//                        [imageThumbData writeToFile:imagePath atomically:YES];
//
//                        NSLog(@"비디오이미지 없을때 비디오이미지 저장(비디오이미지없음) : %@", imagePath);
//                     }
//
//                     imgMsg = urlImg;
                     
                     imgMsg = nil;
                  }
               }
            }
         } @catch (NSException *exception) {
//            NSLog(@"setUpSendCell VIDEO exception : %@", exception);
         }
      }
      
      NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
      [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSDate *nsDate = [dateFormat dateFromString:decodeDate];
      
      NSDateFormatter *dateFormat2 = [[NSDateFormatter alloc] init];
      [dateFormat2 setDateFormat:NSLocalizedString(@"date14", @"date14")];
      NSString *dateStr = [dateFormat2 stringFromDate:nsDate];
      
      NSDateFormatter *dateFormat3 = [[NSDateFormatter alloc] init];
      [dateFormat3 setDateFormat:NSLocalizedString(@"date3", @"date3")];
      NSString *timeStr = [dateFormat3 stringFromDate:nsDate];
      NSString *decodeTime = [NSString urlDecodeString:timeStr];
      
      NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
      
      UIImage *bubble = [[UIImage imageNamed:@"bubble.png"] stretchableImageWithLeftCapWidth:21 topCapHeight:14];
      //UIColor *color = [MFUtil myRGBfromHex:@"B7E6F6"]; //하늘색
      UIColor *color = [MFUtil myRGBfromHex:@"FDE232"]; //노란색(현대중공업)
      sendCell.bubbleImage.image = [bubble imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];
      [sendCell.bubbleImage setTintColor:color];
      
      sendCell.timeLabel.text = decodeTime;
      
      if(![[NSString stringWithFormat:@"%@",unReadCount] isEqualToString:@"0"] && unReadCount!=nil){
         sendCell.readCntLabel.hidden = NO;
         sendCell.readCntLabel.text = [NSString stringWithFormat:@"%@", unReadCount];
         sendCell.readCntLabel.textColor = [MFUtil myRGBfromHex:@"FDE232"];
         
      } else {
         sendCell.readCntLabel.hidden = YES;
      }
      
      if([sendType isEqualToString:@"SENDING"]){
         sendCell.timeLabel.hidden = YES;
         sendCell.failButton.hidden = YES;
         [sendCell.indicator startAnimating];
         
      } else if([sendType isEqualToString:@"SUCCEED"]){
         sendCell.timeLabel.hidden = NO;
         sendCell.failButton.hidden = YES;
         [sendCell.indicator setHidesWhenStopped:YES];
         [sendCell.indicator stopAnimating];
         
      } else if([sendType isEqualToString:@"FAILED"]){
         sendCell.timeLabel.hidden = YES;
         sendCell.failButton.hidden = NO;
         [sendCell.indicator setHidesWhenStopped:YES];
         [sendCell.indicator stopAnimating];
         
      } else {
         //DATE
         sendCell.timeLabel.hidden = YES;
         sendCell.failButton.hidden = YES;
         [sendCell.indicator setHidesWhenStopped:YES];
         [sendCell.indicator stopAnimating];
      }
      
      if (indexPath.item == 0) {
         sendCell.dateLabel.text = dateStr;
         sendCell.dateLabel.hidden = NO;
         sendCell.dateLabelConstraint.constant=25;
         
         if([contentType isEqualToString:@"TEXT"]){
            sendCell.msgLabel.hidden = NO;
            //sendCell.msgLabel.text = decodeContent;
            [sendCell.msgLabel setText:decodeContent];
            
            //채팅내용 검색결과
            if(self.searchText.length>0){
               if([decodeContent rangeOfString:[NSString stringWithFormat:@"%@", self.searchText]].location != NSNotFound){
                  sendCell.msgLabel.attributedText = [self textGetRanges:decodeContent keyword:self.searchText];
               }
            }
            
            sendCell.bubbleImage.hidden = NO;
            sendCell.imgMessage.hidden = YES;
            sendCell.videoContainer.hidden = YES;
            
         } else if ([contentType isEqualToString:@"IMG"]) {
            sendCell.msgContentWidth.constant = 170; //self.tableView.frame.size.width - 300;
            sendCell.videoContainer.hidden = YES;
            
            if([decodeContent rangeOfString:@"https://"].location != NSNotFound || [decodeContent rangeOfString:@"http://"].location != NSNotFound){
               sendCell.imgMessage.hidden = NO;
               
               sendCell.bubbleImage.hidden = YES;
               sendCell.msgLabel.hidden = YES;
               sendCell.imgMessage.tag = indexPath.row;
               
               if(imgMsg==nil){
                  if([decodeContent rangeOfString:@" "].location != NSNotFound){
                     decodeContent = [decodeContent stringByReplacingOccurrencesOfString:@" " withString:@"%20"];
                  }
                  
                  [sendCell.imgMessage sd_setImageWithURL:[NSURL URLWithString:decodeContent]
                                     placeholderImage:[UIImage imageNamed:@"chat_trans.png"]
                                              options:0
                                            completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {
                                               //큰이미지 사이즈조절
                                               UIImage *urlImg = image;
                                               if(urlImg.size.height > urlImg.size.width*2) {
                                                  UIImage *image2 = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(180,300) :urlImg];
                                                  urlImg = [MFUtil getScaledImage:image2 scaledToMaxWidth:180 maxHeight:300];
                                               } else {
                                                  urlImg = [MFUtil getScaledLowImage:urlImg scaledToMaxWidth:180.0f];
                                               }
                                               sendCell.imgMessage.image = urlImg;
                                               
                                               NSString *imagePath = [loacalThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",[decodeContent lastPathComponent]]];
                                               
                                               if (![[NSFileManager defaultManager] fileExistsAtPath:imagePath]){
                                                  //실패이미지를 위해 이미지 저장
                                                  NSData *imageThumbData = UIImagePNGRepresentation(urlImg);
                                                  [imageThumbData writeToFile:imagePath atomically:YES];
//                                                  NSLog(@"1이미지 실패이미지를 위해 이미지 저장(이미지없음) : %@", imagePath);
                                               }
                                          }];
               } else {
                  sendCell.imgMessage.image = imgMsg;
               }
               
            } else{
               //전송실패 IMG메시지
               NSString *thumbFilePath = [loacalThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",[localImgPath lastPathComponent]]];
               
               if(aditInfo != nil){
                  NSData *data = [NSData dataWithContentsOfFile:thumbFilePath];
                  UIImage *image = [UIImage imageWithData:data];
                  
                  sendCell.imgMessage.image = image;
                  sendCell.imgMessage.hidden = NO;
                  sendCell.bubbleImage.hidden = YES;
                  sendCell.msgLabel.hidden = YES;
               }
            }
         
         } else if ([contentType isEqualToString:@"VIDEO"]) {
            sendCell.msgContentWidth.constant = 170; //self.tableView.frame.size.width - 300;
            sendCell.videoContainer.hidden = NO;
            
            if([decodeFileThumb rangeOfString:@"https://"].location != NSNotFound || [decodeFileThumb rangeOfString:@"http://"].location != NSNotFound){
               sendCell.imgMessage.hidden = NO;
               
               sendCell.bubbleImage.hidden = YES;
               sendCell.msgLabel.hidden = YES;
               
               sendCell.imgMessage.tag = indexPath.row;
               sendCell.playButton.tag = indexPath.row;
               
               if(imgMsg==nil){
                  NSRange range = [decodeContent rangeOfString:@"/" options:NSBackwardsSearch];
                  NSString *filePath = [decodeContent substringToIndex:range.location+1];
                  NSString *filePath2 = [filePath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb/%@",fileName]];
                  
                  if([filePath2 rangeOfString:@" "].location != NSNotFound){
                     filePath2 = [filePath2 stringByReplacingOccurrencesOfString:@" " withString:@"%20"];
                  }
                  
                  [sendCell.imgMessage sd_setImageWithURL:[NSURL URLWithString:filePath2]
                                         placeholderImage:[UIImage imageNamed:@"chat_trans.png"]
                                                  options:0
                                                completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {
                                                   //큰이미지 사이즈조절
                                                   UIImage *urlImg = image;
                                                   
                                                   //큰이미지 사이즈조절
                                                   if(urlImg.size.height > urlImg.size.width*2) {
                                                      UIImage *image2 = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(180,300) : urlImg];
                                                      urlImg = [MFUtil getScaledImage:image2 scaledToMaxWidth:180 maxHeight:300];
                                                   } else {
                                                      urlImg = [MFUtil getScaledLowImage:urlImg scaledToMaxWidth:180.0f];
                                                   }
                                                   
                                                   sendCell.imgMessage.image = urlImg;
                                                   
                                                   NSString *imagePath = [loacalThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",fileName]];
                                                   
                                                   if (![[NSFileManager defaultManager] fileExistsAtPath:imagePath]){
                                                      //실패이미지를 위해 이미지 저장
                                                      NSData *imageThumbData = UIImagePNGRepresentation(urlImg);
                                                      [imageThumbData writeToFile:imagePath atomically:YES];
//                                                      NSLog(@"1비디오 실패이미지를 위해 비디오이미지 저장(비디오이미지없음) : %@", imagePath);
                                                   }
                                                }];
                  
               } else {
                  sendCell.imgMessage.image = imgMsg;
               }
               
            } else {
               //전송실패 IMG메시지
               NSString *thumbFilePath = [loacalThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",[localImgPath lastPathComponent]]];
               
               if(aditInfo != nil){
                  NSData *data = [NSData dataWithContentsOfFile:thumbFilePath];
                  UIImage *image = [UIImage imageWithData:data];
                  
                  sendCell.imgMessage.image = image;
                  sendCell.imgMessage.hidden = NO;
                  sendCell.bubbleImage.hidden = YES;
                  sendCell.msgLabel.hidden = YES;
               }
            }
         } else if ([contentType isEqualToString:@"FILE"]) {
            
         }
      }
      
      if (indexPath.item > 0) {
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         
         if([contentType isEqualToString:@"TEXT"]){
            sendCell.msgLabel.hidden = NO;
            sendCell.bubbleImage.hidden = NO;
            sendCell.imgMessage.hidden = YES;
            sendCell.videoContainer.hidden = YES;
            
            //sendCell.msgLabel.text = decodeContent;
            [sendCell.msgLabel setText:decodeContent];
            
            //채팅내용 검색결과
            if(self.searchText.length>0){
               if([decodeContent rangeOfString:[NSString stringWithFormat:@"%@", self.searchText]].location != NSNotFound){
                  sendCell.msgLabel.attributedText = [self textGetRanges:decodeContent keyword:self.searchText];
               }
            }
            
         } else if ([contentType isEqualToString:@"IMG"]) {
            sendCell.msgContentWidth.constant = 170; //self.tableView.frame.size.width - (self.tableView.frame.size.width - 110);
            sendCell.videoContainer.hidden = YES;
            
            if([decodeContent rangeOfString:@"https://"].location != NSNotFound || [decodeContent rangeOfString:@"http://"].location != NSNotFound){
               sendCell.imgMessage.hidden = NO;
               sendCell.bubbleImage.hidden = YES;
               sendCell.msgLabel.hidden = YES;
               sendCell.imgMessage.tag = indexPath.row;
               
               if(imgMsg==nil){
                  if([decodeContent rangeOfString:@" "].location != NSNotFound){
                     decodeContent = [decodeContent stringByReplacingOccurrencesOfString:@" " withString:@"%20"];
                  }
                  
                  [sendCell.imgMessage sd_setImageWithURL:[NSURL URLWithString:decodeContent]
                                         placeholderImage:[UIImage imageNamed:@"chat_trans.png"]
                                                  options:0
                                                completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {
                                                   //큰이미지 사이즈조절
                                                   UIImage *urlImg = image;
                                                   if(urlImg.size.height > urlImg.size.width*2) {
                                                      UIImage *image2 = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(180,300) :urlImg];
                                                      urlImg = [MFUtil getScaledImage:image2 scaledToMaxWidth:180 maxHeight:300];
                                                   } else {
                                                      urlImg = [MFUtil getScaledLowImage:urlImg scaledToMaxWidth:180.0f];
                                                   }
                                                   sendCell.imgMessage.image = urlImg;
                                                   
                                                   NSString *imagePath = [loacalThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",[decodeContent lastPathComponent]]];
                                                   
                                                   if (![[NSFileManager defaultManager] fileExistsAtPath:imagePath]){
                                                      //실패이미지를 위해 이미지 저장
                                                      NSData *imageThumbData = UIImagePNGRepresentation(urlImg);
                                                      [imageThumbData writeToFile:imagePath atomically:YES];
                                                      
//                                                      NSLog(@"2이미지 실패이미지를 위해 이미지 저장(이미지없음) : %@", imagePath);
                                                   }
                                                }];
                  
               } else {
                  sendCell.imgMessage.image = imgMsg;
               }
               
            } else{
               //전송실패 OR 선등록 IMG메시지
               sendCell.imgMessage.image = imgMsg;
               
               if(aditInfo != nil){
                  sendCell.imgMessage.hidden = NO;
                  sendCell.bubbleImage.hidden = YES;
                  sendCell.msgLabel.hidden = YES;
               }
            }
            
         } else if ([contentType isEqualToString:@"VIDEO"]) {
            sendCell.msgContentWidth.constant = 170; //self.tableView.frame.size.width - (self.tableView.frame.size.width - 110);
            sendCell.videoContainer.hidden = NO;
            
            if([decodeFileThumb rangeOfString:@"https://"].location != NSNotFound || [decodeFileThumb rangeOfString:@"http://"].location != NSNotFound){
               sendCell.imgMessage.hidden = NO;
               sendCell.bubbleImage.hidden = YES;
               sendCell.msgLabel.hidden = YES;
               sendCell.imgMessage.tag = indexPath.row;
               sendCell.playButton.tag = indexPath.row;
               
               if(imgMsg==nil){
                  NSRange range = [decodeContent rangeOfString:@"/" options:NSBackwardsSearch];
                  NSString *filePath = [decodeContent substringToIndex:range.location+1];
                  NSString *filePath2 = [filePath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb/%@",fileName]];
                  
                  if([filePath2 rangeOfString:@" "].location != NSNotFound){
                     filePath2 = [filePath2 stringByReplacingOccurrencesOfString:@" " withString:@"%20"];
                  }
                  
                  [sendCell.imgMessage sd_setImageWithURL:[NSURL URLWithString:filePath2]
                                         placeholderImage:[UIImage imageNamed:@"chat_trans.png"]
                                                  options:0
                                                completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {
                                                   //큰이미지 사이즈조절
                                                   UIImage *urlImg = image;
                                                   
                                                   //큰이미지 사이즈조절
                                                   if(urlImg.size.height > urlImg.size.width*2) {
                                                      UIImage *image2 = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(180,300) : urlImg];
                                                      urlImg = [MFUtil getScaledImage:image2 scaledToMaxWidth:180 maxHeight:300];
                                                   } else {
                                                      urlImg = [MFUtil getScaledLowImage:urlImg scaledToMaxWidth:180.0f];
                                                   }
                                                   sendCell.imgMessage.image = urlImg;
                                                   
                                                   NSString *imagePath = [loacalThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",fileName]];
                                                   
                                                   if (![[NSFileManager defaultManager] fileExistsAtPath:imagePath]){
                                                      //실패이미지를 위해 이미지 저장
                                                      NSData *imageThumbData = UIImagePNGRepresentation(urlImg);
                                                      [imageThumbData writeToFile:imagePath atomically:YES];
                                                      
//                                                      NSLog(@"2이미지 실패이미지를 위해 비디오이미지 저장(비디오이미지없음) : %@", imagePath);
                                                   }
                                                }];
                  
               } else {
                  sendCell.imgMessage.image = imgMsg;
               }
               
            } else{
               sendCell.imgMessage.image = imgMsg;
               
               if(aditInfo != nil){
                  sendCell.imgMessage.hidden = NO;
                  sendCell.bubbleImage.hidden = YES;
                  sendCell.msgLabel.hidden = YES;
               }
            }
            
         } else if ([contentType isEqualToString:@"FILE"]) {
            
         } else {
            
         }
         
         if (![pDateStr isEqualToString:cDateStr]) {
            sendCell.dateLabel.text = dateStr;
            sendCell.dateLabel.hidden = NO;
            sendCell.dateLabelConstraint.constant=25;
            
         } else {
            sendCell.dateLabel.hidden = YES;
            sendCell.dateLabelConstraint.constant=5;
         }
      }
      
      UITapGestureRecognizer *gesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleTapGesture:)];
      sendCell.failButton.tag = indexPath.row;
      [sendCell.failButton addGestureRecognizer:gesture];

      UITapGestureRecognizer *sendImgGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(chatImgTapGesture:)];
      sendCell.imgMessage.tag = indexPath.row;
      [sendCell.imgMessage setUserInteractionEnabled:YES];
      [sendCell.imgMessage addGestureRecognizer:sendImgGesture];

      UITapGestureRecognizer *sendVideoGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(chatVideoTapGesture:)];
      sendCell.videoContainer.tag = indexPath.row;
      [sendCell.videoContainer setUserInteractionEnabled:YES];
      [sendCell.videoContainer addGestureRecognizer:sendVideoGesture];

      [sendCell.playButton addTarget:self action:@selector(chatVideoTapGesture:) forControlEvents:UIControlEventTouchUpInside];

      UILongPressGestureRecognizer *txtLongPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(txtLongTapDetected:)];
      txtLongPress.minimumPressDuration = 0.5;
      txtLongPress.delegate = self;
      [sendCell.msgLabel addGestureRecognizer:txtLongPress];

      UILongPressGestureRecognizer *imgLongPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(imgLongTapDetected:)];
      imgLongPress.minimumPressDuration = 0.5;
      imgLongPress.delegate = self;
      [sendCell.imgMessage addGestureRecognizer:imgLongPress];

      UILongPressGestureRecognizer *videoLongPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(videoLongTapDetected:)];
      videoLongPress.minimumPressDuration = 0.5;
      videoLongPress.delegate = self;
      [sendCell.videoContainer addGestureRecognizer:videoLongPress];
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)setUpRecvCell:(ChatReceiveViewCell *)receiveCell atIndexPath:(NSIndexPath *)indexPath {
   NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
   
   @try{
//       NSString *chatNo = [msgDict objectForKey:@"CHAT_NO"];
//       NSString *roomNo = [msgDict objectForKey:@"ROOM_NO"];
//       NSString *userNo = [msgDict objectForKey:@"USER_NO"];
      NSString *userName = [msgDict objectForKey:@"USER_NM"];
      NSString *decodeUserNm = [NSString urlDecodeString:userName];
      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      content = [MFUtil replaceEncodeToChar:content];
      
      NSString *decodeContent = [NSString urlDecodeString:content];
      NSString *fileName = [msgDict objectForKey:@"FILE_NM"];
//      NSString *decodeFileName = [NSString urlDecodeString:fileName];
//      NSString *filethumbName = [msgDict objectForKey:@"FILE_THUMB"];
//      NSString *decodeFileThumb = [NSString urlDecodeString:filethumbName];
      NSString *date = [msgDict objectForKey:@"DATE"];
      NSString *decodeDate = [NSString urlDecodeString:date];
//       NSString *pushType = [msgDict objectForKey:@"TYPE"];
      NSString *profileImg = [NSString urlDecodeString:[msgDict objectForKey:@"USER_IMG"]];
      NSString *unReadCount = [msgDict objectForKey:@"UNREAD_COUNT"];
      
      NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
      [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSDate *nsDate = [dateFormat dateFromString:date];
      
      NSDateFormatter *dateFormat2 = [[NSDateFormatter alloc] init];
      [dateFormat2 setDateFormat:NSLocalizedString(@"date14", @"date14")];
      NSString *dateStr = [dateFormat2 stringFromDate:nsDate];
      
      NSDateFormatter *dateFormat3 = [[NSDateFormatter alloc] init];
      [dateFormat3 setDateFormat:NSLocalizedString(@"date3", @"date3")];
      NSString *timeStr = [dateFormat3 stringFromDate:nsDate];
      NSString *decodeTime = [NSString urlDecodeString:timeStr];
      
      NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
      
      NSString *loacalThumbPath = [self creatLocalChatFolder:contentType roomNo:self.roomNo chatDate:decodeDate];
      
      if([contentType isEqualToString:@"IMG"]){
         NSString *imagePath = [loacalThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",fileName]];
         NSLog(@"### imagePath : %@", imagePath);
         
         NSData *data = [NSData dataWithContentsOfFile:imagePath];
         UIImage *image = [UIImage imageWithData:data];
         
         NSLog(@"### image : %@", image);
         
         if(image){
            if(image.size.height > image.size.width*2) {
               UIImage *image2 = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(180,300) : image];
               image = [MFUtil getScaledImage:image2 scaledToMaxWidth:180 maxHeight:300];
            } else {
               image = [MFUtil getScaledLowImage:image scaledToMaxWidth:180.0f];
            }
            
            imgRecvMsg = image;
            
         } else {
            if([self checkExpireChatImg:decodeDate]){
               UIImage *expireImg = [UIImage imageNamed:@""];
               imgRecvMsg = expireImg;
               
            } else {
//               NSData *data = [NSData dataWithContentsOfURL:[NSURL URLWithString:decodeContent]];
//               UIImage *urlImg = [UIImage imageWithData:data];
//               //[data writeToFile:thumbStr2 atomically:YES];
//
//               //큰이미지 사이즈조절
//               if(urlImg.size.height > urlImg.size.width*2) {
//                  UIImage *image2 = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(180,300) : urlImg];
//                  urlImg = [MFUtil getScaledImage:image2 scaledToMaxWidth:180 maxHeight:300];
//               } else {
//                  urlImg = [MFUtil getScaledLowImage:urlImg scaledToMaxWidth:180.0f];
//               }
//
//               if (![[NSFileManager defaultManager] fileExistsAtPath:imagePath]){
//                  //실패이미지를 위해 이미지 저장
//                  NSData *imageThumbData = UIImagePNGRepresentation(urlImg);
//                  [imageThumbData writeToFile:imagePath atomically:YES];
//               }
//
//               imgRecvMsg = urlImg;
               imgRecvMsg = nil;
            }
         }
         
      } else if([contentType isEqualToString:@"VIDEO"]){
         NSString *imagePath =[loacalThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",fileName]];
         
         NSData *data = [NSData dataWithContentsOfFile:imagePath];
         UIImage *image = [UIImage imageWithData:data];
         
         if(image){
//            NSLog(@"받은 비디오있음");
            if(image.size.height > image.size.width*2) {
               UIImage *image2 = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(180,300) : image];
               image = [MFUtil getScaledImage:image2 scaledToMaxWidth:180 maxHeight:300];
            } else {
               image = [MFUtil getScaledLowImage:image scaledToMaxWidth:180.0f];
            }
            
            imgRecvMsg = image;
            
         } else {
//            NSLog(@"받은 비디오없음");
            
            if([self checkExpireChatImg:decodeDate]){
               UIImage *expireImg = [UIImage imageNamed:@""];
               imgRecvMsg = expireImg;
               
            } else {
//               NSRange range = [decodeContent rangeOfString:@"/" options:NSBackwardsSearch];
//               NSString *filePath = [decodeContent substringToIndex:range.location+1];
//               NSString *filePath2 = [filePath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb/%@",fileName]];
//
//               NSData *data = [NSData dataWithContentsOfURL:[NSURL URLWithString:filePath2]];
//               UIImage *urlImg = [UIImage imageWithData:data];
//               //[data writeToFile:thumbStr2 atomically:YES];
//
//               //큰이미지 사이즈조절
//               if(urlImg.size.height > urlImg.size.width*2) {
//                  UIImage *image2 = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(180,300) : urlImg];
//                  urlImg = [MFUtil getScaledImage:image2 scaledToMaxWidth:180 maxHeight:300];
//               } else {
//                  urlImg = [MFUtil getScaledLowImage:urlImg scaledToMaxWidth:180.0f];
//               }
//
//               if (![[NSFileManager defaultManager] fileExistsAtPath:imagePath]){
//                  //실패이미지를 위해 이미지 저장
//                  NSData *imageThumbData = UIImagePNGRepresentation(urlImg);
//                  [imageThumbData writeToFile:imagePath atomically:YES];
//
//                  imgRecvMsg = urlImg;
//               }
               imgRecvMsg = nil;
            }
         }
      }
      
      UIImage *bubble = [[UIImage imageNamed:@"bubbleReceive.png"] stretchableImageWithLeftCapWidth:21 topCapHeight:14];
      UIColor *color = [UIColor whiteColor];
      
      receiveCell.rBubbleImage.image = [bubble imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];
      [receiveCell.rBubbleImage setTintColor:color];
      
      receiveCell.rUserName.text = decodeUserNm;
      receiveCell.rTimeLabel.text = decodeTime;
      
      [receiveCell.rMsgLabel setUserInteractionEnabled:YES];
      
      if(![[NSString stringWithFormat:@"%@",unReadCount] isEqualToString:@"0"] && unReadCount!=nil){
         receiveCell.rReadCntLabel.hidden = NO;
         receiveCell.rReadCntLabel.text = [NSString stringWithFormat:@"%@", unReadCount];
         receiveCell.rReadCntLabel.textColor = [MFUtil myRGBfromHex:@"FDE232"];
      } else {
         receiveCell.rReadCntLabel.hidden = YES;
      }
      
      if(![profileImg isEqualToString:@""]){
         UIImage *userImg = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(50, 50) :[MFUtil saveThumbImage:@"Profile" :profileImg]];
         receiveCell.rAvatarImage.image = userImg;
         
      } else {
         UIImage *defaultImg = [UIImage imageNamed:@"profile_default.png"];
         receiveCell.rAvatarImage.image = defaultImg;
      }
      
      if (indexPath.item == 0) {
         receiveCell.rDateLabel.text = dateStr;
         receiveCell.rDateLabel.hidden = NO;
         receiveCell.rDateLabelConstraint.constant = 25;
         
         if([contentType isEqualToString:@"TEXT"]){
            //receiveCell.rMsgLabel.text = decodeContent;
            [receiveCell.rMsgLabel setText:decodeContent];
            
            receiveCell.rSystemLabel.hidden = YES;
            receiveCell.rAvatarImage.hidden = NO;
            receiveCell.rUserName.hidden = NO;
            receiveCell.rMsgLabel.hidden = NO;
            receiveCell.rBubbleImage.hidden = NO;
            receiveCell.rImageMessage.hidden = YES;
            receiveCell.rTimeLabel.hidden = NO;
            receiveCell.rFileIcon.hidden = YES;
            receiveCell.rVideoContainer.hidden = YES;
            
            //채팅내용 검색결과
            if(self.searchText.length>0){
               if([decodeContent rangeOfString:[NSString stringWithFormat:@"%@", self.searchText]].location != NSNotFound){
                  receiveCell.rMsgLabel.attributedText = [self textGetRanges:decodeContent keyword:self.searchText];
               }
            }
            
         } else if ([contentType isEqualToString:@"IMG"]) {
            receiveCell.rMsgContentWidth.constant = 170; //self.tableView.frame.size.width - 200;
            receiveCell.rVideoContainer.hidden = YES;
            
            receiveCell.rImageMessage.hidden = NO;
            receiveCell.rSystemLabel.hidden = YES;
            receiveCell.rAvatarImage.hidden = NO;
            receiveCell.rUserName.hidden = NO;
            receiveCell.rMsgLabel.hidden = YES;
            receiveCell.rBubbleImage.hidden = YES;
            receiveCell.rTimeLabel.hidden = NO;
            receiveCell.rFileIcon.hidden = YES;
            
            receiveCell.rImageMessage.tag = indexPath.row;
            
            if(imgRecvMsg==nil){
               if([decodeContent rangeOfString:@" "].location != NSNotFound){
                  decodeContent = [decodeContent stringByReplacingOccurrencesOfString:@" " withString:@"%20"];
               }
               [receiveCell.rImageMessage sd_setImageWithURL:[NSURL URLWithString:decodeContent]
                                      placeholderImage:[UIImage imageNamed:@"chat_trans.png"]
                                               options:0
                                             completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {
                                                //큰이미지 사이즈조절
                                                UIImage *urlImg = image;
                                                if(urlImg.size.height > urlImg.size.width*2) {
                                                   UIImage *image2 = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(180,300) :urlImg];
                                                   urlImg = [MFUtil getScaledImage:image2 scaledToMaxWidth:180 maxHeight:300];
                                                } else {
                                                   urlImg = [MFUtil getScaledLowImage:urlImg scaledToMaxWidth:180.0f];
                                                }
                                                receiveCell.rImageMessage.image = urlImg;
                                                
                                                NSString *imagePath = [loacalThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",[decodeContent lastPathComponent]]];
                                                
                                                if (![[NSFileManager defaultManager] fileExistsAtPath:imagePath]){
                                                   //실패이미지를 위해 이미지 저장
                                                   NSData *imageThumbData = UIImagePNGRepresentation(urlImg);
                                                   [imageThumbData writeToFile:imagePath atomically:YES];
//                                                   NSLog(@"받은 이미지 실패이미지를 위해 이미지 저장(이미지없음) : %@", imagePath);
                                                }
                                             }];
            } else {
               receiveCell.rImageMessage.image = imgRecvMsg;
            }
            
         } else if ([contentType isEqualToString:@"VIDEO"]) {
            receiveCell.rMsgContentWidth.constant = 170;
            receiveCell.rVideoContainer.hidden = NO;
            
            receiveCell.rImageMessage.hidden = NO;
            
            receiveCell.rSystemLabel.hidden = YES;
            receiveCell.rAvatarImage.hidden = NO;
            receiveCell.rUserName.hidden = NO;
            receiveCell.rMsgLabel.hidden = YES;
            receiveCell.rBubbleImage.hidden = YES;
            receiveCell.rTimeLabel.hidden = NO;
            receiveCell.rFileIcon.hidden = YES;
            
            receiveCell.rImageMessage.tag = indexPath.row;
            receiveCell.rPlayButton.tag = indexPath.row;
            
            if(imgRecvMsg==nil){
               NSRange range = [decodeContent rangeOfString:@"/" options:NSBackwardsSearch];
               NSString *filePath = [decodeContent substringToIndex:range.location+1];
               NSString *filePath2 = [filePath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb/%@",fileName]];
               
               if([filePath2 rangeOfString:@" "].location != NSNotFound){
                  filePath2 = [filePath2 stringByReplacingOccurrencesOfString:@" " withString:@"%20"];
               }
               
               [receiveCell.rImageMessage sd_setImageWithURL:[NSURL URLWithString:filePath2]
                                      placeholderImage:[UIImage imageNamed:@"chat_trans.png"]
                                               options:0
                                             completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {
                                                //큰이미지 사이즈조절
                                                UIImage *urlImg = image;
                                                if(urlImg.size.height > urlImg.size.width*2) {
                                                   UIImage *image2 = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(180,300) :urlImg];
                                                   urlImg = [MFUtil getScaledImage:image2 scaledToMaxWidth:180 maxHeight:300];
                                                } else {
                                                   urlImg = [MFUtil getScaledLowImage:urlImg scaledToMaxWidth:180.0f];
                                                }
                                                receiveCell.rImageMessage.image = urlImg;
                                                
                                                NSString *imagePath = [loacalThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",[decodeContent lastPathComponent]]];
                                                
                                                if (![[NSFileManager defaultManager] fileExistsAtPath:imagePath]){
                                                   //실패이미지를 위해 이미지 저장
                                                   NSData *imageThumbData = UIImagePNGRepresentation(urlImg);
                                                   [imageThumbData writeToFile:imagePath atomically:YES];
//                                                   NSLog(@"받은 비디오 실패이미지를 위해 이미지 저장(이미지없음) : %@", imagePath);
                                                }
                                             }];
            } else {
               receiveCell.rImageMessage.image = imgRecvMsg;
            }
            
         } else if ([contentType isEqualToString:@"FILE"]){
            
         } else if ([contentType isEqualToString:@"INVITE"]){
            receiveCell.rVideoContainer.hidden = YES;
            
         } else {
            
         }
      }
      
      if (indexPath.item  > 0) {
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         
         if([contentType isEqualToString:@"TEXT"]){
            receiveCell.rVideoContainer.hidden = YES;
            
            //receiveCell.rMsgLabel.text = decodeContent;
            [receiveCell.rMsgLabel setText:decodeContent];
            
            receiveCell.rSystemLabel.hidden = YES;
            receiveCell.rAvatarImage.hidden = NO;
            receiveCell.rUserName.hidden = NO;
            receiveCell.rMsgLabel.hidden = NO;
            receiveCell.rBubbleImage.hidden = NO;
            receiveCell.rImageMessage.hidden = YES;
            receiveCell.rTimeLabel.hidden = NO;
            receiveCell.rFileIcon.hidden = YES;
            
            //채팅내용 검색결과
            if(self.searchText.length>0){
               if([decodeContent rangeOfString:[NSString stringWithFormat:@"%@", self.searchText]].location != NSNotFound){
                  receiveCell.rMsgLabel.attributedText = [self textGetRanges:decodeContent keyword:self.searchText];
               }
            }
            
         } else if ([contentType isEqualToString:@"IMG"]) {
            receiveCell.rMsgContentWidth.constant = 170;
            
            receiveCell.rImageMessage.hidden = NO;
            receiveCell.rVideoContainer.hidden = YES;
            
            receiveCell.rSystemLabel.hidden = YES;
            receiveCell.rAvatarImage.hidden = NO;
            receiveCell.rUserName.hidden = NO;
            receiveCell.rMsgLabel.hidden = YES;
            receiveCell.rBubbleImage.hidden = YES;
            receiveCell.rTimeLabel.hidden = NO;
            receiveCell.rFileIcon.hidden = YES;
            
            receiveCell.rImageMessage.tag = indexPath.row;
            
            if(imgRecvMsg==nil){
               if([decodeContent rangeOfString:@" "].location != NSNotFound){
                  decodeContent = [decodeContent stringByReplacingOccurrencesOfString:@" " withString:@"%20"];
               }
               
               [receiveCell.rImageMessage sd_setImageWithURL:[NSURL URLWithString:decodeContent]
                                            placeholderImage:[UIImage imageNamed:@"chat_trans.png"]
                                                     options:0
                                                   completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {
                                                      
                                                      //큰이미지 사이즈조절
                                                      UIImage *urlImg = image;
                                                      if(urlImg.size.height > urlImg.size.width*2) {
                                                         UIImage *image2 = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(180,300) :urlImg];
                                                         urlImg = [MFUtil getScaledImage:image2 scaledToMaxWidth:180 maxHeight:300];
                                                      } else {
                                                         urlImg = [MFUtil getScaledLowImage:urlImg scaledToMaxWidth:180.0f];
                                                      }
                                                      receiveCell.rImageMessage.image = urlImg;
                                                      
                                                      NSString *imagePath = [loacalThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",[decodeContent lastPathComponent]]];
                                                      
                                                      if (![[NSFileManager defaultManager] fileExistsAtPath:imagePath]){
                                                         //실패이미지를 위해 이미지 저장
                                                         NSData *imageThumbData = UIImagePNGRepresentation(urlImg);
                                                         [imageThumbData writeToFile:imagePath atomically:YES];
//                                                         NSLog(@"2 받은 이미지 실패이미지를 위해 이미지 저장(이미지없음) : %@", imagePath);
                                                      }
                                                   }];
            } else {
               receiveCell.rImageMessage.image = imgRecvMsg;
            }
            
         } else if ([contentType isEqualToString:@"VIDEO"]) {
            receiveCell.rMsgContentWidth.constant = 170;
            
            receiveCell.rImageMessage.hidden = NO;
            receiveCell.rVideoContainer.hidden = NO;
            
            receiveCell.rSystemLabel.hidden = YES;
            receiveCell.rAvatarImage.hidden = NO;
            receiveCell.rUserName.hidden = NO;
            receiveCell.rMsgLabel.hidden = YES;
            receiveCell.rBubbleImage.hidden = YES;
            receiveCell.rTimeLabel.hidden = NO;
            receiveCell.rFileIcon.hidden = YES;
            
            receiveCell.rImageMessage.tag = indexPath.row;
            receiveCell.rPlayButton.tag = indexPath.row;
            
            if(imgRecvMsg==nil){
               NSRange range = [decodeContent rangeOfString:@"/" options:NSBackwardsSearch];
               NSString *filePath = [decodeContent substringToIndex:range.location+1];
               NSString *filePath2 = [filePath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb/%@",fileName]];
               
               if([filePath2 rangeOfString:@" "].location != NSNotFound){
                  filePath2 = [filePath2 stringByReplacingOccurrencesOfString:@" " withString:@"%20"];
               }
               
               [receiveCell.rImageMessage sd_setImageWithURL:[NSURL URLWithString:filePath2]
                                            placeholderImage:[UIImage imageNamed:@"chat_trans.png"]
                                                     options:0
                                                   completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {
                                                      //큰이미지 사이즈조절
                                                      UIImage *urlImg = image;
                                                      if(urlImg.size.height > urlImg.size.width*2) {
                                                         UIImage *image2 = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(180,300) :urlImg];
                                                         urlImg = [MFUtil getScaledImage:image2 scaledToMaxWidth:180 maxHeight:300];
                                                      } else {
                                                         urlImg = [MFUtil getScaledLowImage:urlImg scaledToMaxWidth:180.0f];
                                                      }
                                                      receiveCell.rImageMessage.image = urlImg;
                                                      
                                                      NSString *imagePath = [loacalThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",[decodeContent lastPathComponent]]];
                                                      
                                                      if (![[NSFileManager defaultManager] fileExistsAtPath:imagePath]){
                                                         //실패이미지를 위해 이미지 저장
                                                         NSData *imageThumbData = UIImagePNGRepresentation(urlImg);
                                                         [imageThumbData writeToFile:imagePath atomically:YES];
//                                                         NSLog(@"2받은 비디오 실패이미지를 위해 이미지 저장(이미지없음) : %@", imagePath);
                                                      }
                                                   }];
            } else {
               receiveCell.rImageMessage.image = imgRecvMsg;
            }
            
         } else if ([contentType isEqualToString:@"FILE"]) {
            
         } else if ([contentType isEqualToString:@"INVITE"]){
            receiveCell.rVideoContainer.hidden = YES;
            
         } else {
          
         }
         
         if (![pDateStr isEqualToString:cDateStr]) {
            receiveCell.rDateLabel.text = dateStr;
            receiveCell.rDateLabel.hidden = NO;
            receiveCell.rDateLabelConstraint.constant = 25;
            
         } else {
            receiveCell.rDateLabel.hidden = YES;
            receiveCell.rDateLabelConstraint.constant = 5;
         }
      }
      
      [receiveCell.rPlayButton addTarget:self action:@selector(chatVideoTapGesture:) forControlEvents:UIControlEventTouchUpInside];
      
      UILongPressGestureRecognizer *txtLongPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(txtLongTapDetected:)];
      txtLongPress.minimumPressDuration = 0.5;
      txtLongPress.delegate = self;
      [receiveCell.rMsgLabel addGestureRecognizer:txtLongPress];
      
      UITapGestureRecognizer *revcImgGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(chatImgTapGesture:)];
      receiveCell.rImageMessage.tag = indexPath.row;
      [receiveCell.rImageMessage setUserInteractionEnabled:YES];
      [receiveCell.rImageMessage addGestureRecognizer:revcImgGesture];
      
      UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapProfileOnTable:)];
      receiveCell.rAvatarImage.tag = indexPath.row;
      [receiveCell.rAvatarImage setUserInteractionEnabled:YES];
      [receiveCell.rAvatarImage addGestureRecognizer:tap];
      
      UITapGestureRecognizer *recvVideoGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(chatVideoTapGesture:)];
      receiveCell.rVideoContainer.tag = indexPath.row;
      [receiveCell.rVideoContainer setUserInteractionEnabled:YES];
      [receiveCell.rVideoContainer addGestureRecognizer:recvVideoGesture];
      
      UILongPressGestureRecognizer *imgLongPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(imgLongTapDetected:)];
      imgLongPress.minimumPressDuration = 0.5;
      imgLongPress.delegate = self;
      [receiveCell.rImageMessage addGestureRecognizer:imgLongPress];

      UILongPressGestureRecognizer *videoLongPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(videoLongTapDetected:)];
      videoLongPress.minimumPressDuration = 0.5;
      videoLongPress.delegate = self;
      [receiveCell.rVideoContainer addGestureRecognizer:videoLongPress];
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)setUpSysCell:(SystemLabelViewCell *)sysCell atIndexPath:(NSIndexPath *)indexPath {
   NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
   
   @try{
      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      NSString *decodeContent = [NSString urlDecodeString:content];
      NSString *decodeContent2 = [NSString urlDecodeString:decodeContent];
      
      [sysCell.systemLabel setFrame:CGRectMake(sysCell.systemLabel.frame.origin.x, sysCell.systemLabel.frame.origin.y, sysCell.systemLabel.frame.size.width, 25)];
      
      
      if (indexPath.item == 0) {
         if([contentType isEqualToString:@"SYS"]){
            sysCell.systemLabel.text = decodeContent2;
            [sysCell.systemLabel setTextColor:[UIColor blackColor]];
            [sysCell.systemLabel setFont:[UIFont systemFontOfSize:13]];
            sysCell.systemLabel.numberOfLines = 0;
            [sysCell.systemLabel setLineBreakMode:NSLineBreakByWordWrapping];
            
            CGSize constraintSize = CGSizeMake(sysCell.systemLabel.frame.size.width, 460);
            //CGSize newSize = [decodeContent2 sizeWithFont:[UIFont systemFontOfSize:14] constrainedToSize:constraintSize lineBreakMode:NSLineBreakByWordWrapping];
            NSAttributedString *attributedText = [[NSAttributedString alloc] initWithString:decodeContent2 attributes:@{NSFontAttributeName: [UIFont systemFontOfSize:13]}];
            CGRect rect = [attributedText boundingRectWithSize:(CGSize)constraintSize options:NSStringDrawingUsesLineFragmentOrigin context:nil];
            CGSize newSize = rect.size;
            
            CGFloat labelHeight = MAX(newSize.height, sysCell.systemLabel.frame.size.height);
            [sysCell.systemLabel setFrame:CGRectMake(sysCell.systemLabel.frame.origin.x, sysCell.systemLabel.frame.origin.y, sysCell.systemLabel.frame.size.width, labelHeight)];
            [sysCell.systemLabel setText:decodeContent2];
         }
      }
      
      if (indexPath.item > 0) {
         if([contentType isEqualToString:@"SYS"]){
            sysCell.systemLabel.text = decodeContent2;
            [sysCell.systemLabel setTextColor:[UIColor blackColor]];
            
            [sysCell.systemLabel setFont:[UIFont systemFontOfSize:13]];
            sysCell.systemLabel.numberOfLines = 0;
            [sysCell.systemLabel setLineBreakMode:NSLineBreakByWordWrapping];
            
            CGSize constraintSize = CGSizeMake(sysCell.systemLabel.frame.size.width, 460);
            //CGSize newSize = [decodeContent2 sizeWithFont:[UIFont systemFontOfSize:14] constrainedToSize:constraintSize lineBreakMode:NSLineBreakByWordWrapping];
            NSAttributedString *attributedText = [[NSAttributedString alloc] initWithString:decodeContent2 attributes:@{NSFontAttributeName: [UIFont systemFontOfSize:13]}];
            CGRect rect = [attributedText boundingRectWithSize:(CGSize)constraintSize options:NSStringDrawingUsesLineFragmentOrigin context:nil];
            CGSize newSize = rect.size;
            
            CGFloat labelHeight = MAX(newSize.height, sysCell.systemLabel.frame.size.height);
            [sysCell.systemLabel setFrame:CGRectMake(sysCell.systemLabel.frame.origin.x, sysCell.systemLabel.frame.origin.y, sysCell.systemLabel.frame.size.width, labelHeight)];
            [sysCell.systemLabel setText:decodeContent2];
         }
      }
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)setFileSendCell:(ChatSendFileCell *)fileSendCell atIndexPath:(NSIndexPath *)indexPath {
   NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
   
   @try{
//      NSString *userName = [msgDict objectForKey:@"USER_NM"];
//      NSString *decodeUserNm = [NSString urlDecodeString:userName];
      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      content = [MFUtil replaceEncodeToChar:content];
      
      NSString *decodeContent = [NSString urlDecodeString:content];
//      NSString *fileName = [msgDict objectForKey:@"FILE_NM"];
      NSString *date = [msgDict objectForKey:@"DATE"];
//      NSString *profileImg = [NSString urlDecodeString:[msgDict objectForKey:@"USER_IMG"]];
      NSString *unReadCount = [msgDict objectForKey:@"UNREAD_COUNT"];
      
      NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
      [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSDate *nsDate = [dateFormat dateFromString:date];
      
      NSDateFormatter *dateFormat2 = [[NSDateFormatter alloc] init];
      [dateFormat2 setDateFormat:NSLocalizedString(@"date14", @"date14")];
      NSString *dateStr = [dateFormat2 stringFromDate:nsDate];
      
      NSDateFormatter *dateFormat3 = [[NSDateFormatter alloc] init];
      [dateFormat3 setDateFormat:NSLocalizedString(@"date3", @"date3")];
      NSString *timeStr = [dateFormat3 stringFromDate:nsDate];
      NSString *decodeTime = [NSString urlDecodeString:timeStr];
      
      NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
      
      UIImage *bubble = [[UIImage imageNamed:@"bubble.png"] stretchableImageWithLeftCapWidth:21 topCapHeight:14];
      UIColor *color = [MFUtil myRGBfromHex:@"FDE232"]; //노란색(현대중공업)
      
      fileSendCell.fBubbleImage.image = [bubble imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];
      [fileSendCell.fBubbleImage setTintColor:color];
      
      fileSendCell.fTimeLabel.text = decodeTime;
      
      if(![[NSString stringWithFormat:@"%@",unReadCount] isEqualToString:@"0"] && unReadCount!=nil){
         fileSendCell.fReadLabel.hidden = NO;
         fileSendCell.fReadLabel.text = [NSString stringWithFormat:@"%@", unReadCount];
         fileSendCell.fReadLabel.textColor = [MFUtil myRGBfromHex:@"FDE232"];
      } else {
         fileSendCell.fReadLabel.hidden = YES;
      }
      
      if (indexPath.item == 0) {
         fileSendCell.fDateLabel.text = dateStr;
         fileSendCell.fDateLabel.hidden = NO;
         fileSendCell.fDateLabelConstraint.constant = 25;
         
         if ([contentType isEqualToString:@"FILE"]){
            NSString *file = @"";
            @try{
               file = [decodeContent lastPathComponent];
               
            } @catch (NSException *exception) {
               file = decodeContent;
               NSLog(@"%s Exception : %@", __func__, exception);
            }
            
            fileSendCell.fMsgLabel.text = file;
            fileSendCell.fMsgLabel.hidden = NO;
            fileSendCell.fBubbleImage.hidden = NO;
            fileSendCell.fTimeLabel.hidden = NO;
            fileSendCell.fFileIcon.hidden = NO;
            
            NSRange range = [file rangeOfString:@"." options:NSBackwardsSearch];
            NSString *fileExt = [[file substringFromIndex:range.location+1] lowercaseString];
            
            if([fileExt isEqualToString:@"jpg"]||[fileExt isEqualToString:@"jpeg"]||[fileExt isEqualToString:@"gif"]||[fileExt isEqualToString:@"png"]||[fileExt isEqualToString:@"tiff"]||[fileExt isEqualToString:@"bmp"]||[fileExt isEqualToString:@"heic"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_img.png"];
               
            } else if([fileExt isEqualToString:@"mp4"]||[fileExt isEqualToString:@"mkv"]||[fileExt isEqualToString:@"wma"]||[fileExt isEqualToString:@"mov"]||[fileExt isEqualToString:@"swf"]||[fileExt isEqualToString:@"mpg"]||[fileExt isEqualToString:@"mpeg"]||[fileExt isEqualToString:@"vob"]||[fileExt isEqualToString:@"asf"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_movie.png"];
               
            } else if([fileExt isEqualToString:@"mp3"]||[fileExt isEqualToString:@"wav"]||[fileExt isEqualToString:@"ogg"]||[fileExt isEqualToString:@"wma"]||[fileExt isEqualToString:@"m4a"]||[fileExt isEqualToString:@"flac"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_music.png"];
               
            } else if([fileExt isEqualToString:@"psd"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_psd.png"];
               
            } else if([fileExt isEqualToString:@"ai"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_ai.png"];
               
            } else if([fileExt isEqualToString:@"docx"]||[fileExt isEqualToString:@"doc"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_word.png"];
               
            } else if([fileExt isEqualToString:@"pptx"]||[fileExt isEqualToString:@"ppt"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_ppt.png"];
               
            } else if([fileExt isEqualToString:@"xls"]||[fileExt isEqualToString:@"xlsx"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_excel.png"];
               
            } else if([fileExt isEqualToString:@"pdf"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_pdf.png"];
               
            } else if([fileExt isEqualToString:@"txt"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_txt.png"];
               
            } else if([fileExt isEqualToString:@"hwp"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_hwp.png"];
               
            } else if([fileExt isEqualToString:@"zip"]||[fileExt isEqualToString:@"rar"]||[fileExt isEqualToString:@"egg"]||[fileExt isEqualToString:@"alz"]||[fileExt isEqualToString:@"7z"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_zip.png"];
               
            } else {
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_document.png"];
            }
            
            UITapGestureRecognizer *fileTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapFileOnTable:)];
            fileSendCell.fMsgLabel.tag = indexPath.row;
            [fileSendCell.fMsgLabel setUserInteractionEnabled:YES];
            [fileSendCell.fMsgLabel addGestureRecognizer:fileTap];
         }
      }
      
      if (indexPath.item  > 0) {
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         //NSLog(@"pd : %@, cd : %@", pDateStr, cDateStr);
         
         if ([contentType isEqualToString:@"FILE"]) {
            NSString *file = @"";
            @try{
               file = [decodeContent lastPathComponent];
               
            } @catch (NSException *exception) {
               file = decodeContent;
               NSLog(@"%s Exception : %@", __func__, exception);
            }
            
            fileSendCell.fMsgLabel.text = file;
            fileSendCell.fMsgLabel.hidden = NO;
            fileSendCell.fBubbleImage.hidden = NO;
            fileSendCell.fTimeLabel.hidden = NO;
            fileSendCell.fFileIcon.hidden = NO;
            
            NSRange range = [file rangeOfString:@"." options:NSBackwardsSearch];
            NSString *fileExt = [[file substringFromIndex:range.location+1] lowercaseString];
            
            if([fileExt isEqualToString:@"jpg"]||[fileExt isEqualToString:@"jpeg"]||[fileExt isEqualToString:@"gif"]||[fileExt isEqualToString:@"png"]||[fileExt isEqualToString:@"tiff"]||[fileExt isEqualToString:@"bmp"]||[fileExt isEqualToString:@"heic"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_img.png"];
               
            } else if([fileExt isEqualToString:@"mp4"]||[fileExt isEqualToString:@"mkv"]||[fileExt isEqualToString:@"wma"]||[fileExt isEqualToString:@"mov"]||[fileExt isEqualToString:@"swf"]||[fileExt isEqualToString:@"mpg"]||[fileExt isEqualToString:@"mpeg"]||[fileExt isEqualToString:@"vob"]||[fileExt isEqualToString:@"asf"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_movie.png"];
               
            } else if([fileExt isEqualToString:@"mp3"]||[fileExt isEqualToString:@"wav"]||[fileExt isEqualToString:@"ogg"]||[fileExt isEqualToString:@"wma"]||[fileExt isEqualToString:@"m4a"]||[fileExt isEqualToString:@"flac"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_music.png"];
               
            } else if([fileExt isEqualToString:@"psd"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_psd.png"];
               
            } else if([fileExt isEqualToString:@"ai"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_ai.png"];
               
            } else if([fileExt isEqualToString:@"docx"]||[fileExt isEqualToString:@"doc"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_word.png"];
               
            } else if([fileExt isEqualToString:@"pptx"]||[fileExt isEqualToString:@"ppt"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_ppt.png"];
               
            } else if([fileExt isEqualToString:@"xls"]||[fileExt isEqualToString:@"xlsx"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_excel.png"];
               
            } else if([fileExt isEqualToString:@"pdf"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_pdf.png"];
               
            } else if([fileExt isEqualToString:@"txt"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_txt.png"];
               
            } else if([fileExt isEqualToString:@"hwp"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_hwp.png"];
               
            } else if([fileExt isEqualToString:@"zip"]||[fileExt isEqualToString:@"rar"]||[fileExt isEqualToString:@"egg"]||[fileExt isEqualToString:@"alz"]||[fileExt isEqualToString:@"7z"]){
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_zip.png"];
               
            } else {
               fileSendCell.fFileIcon.image = [UIImage imageNamed:@"file_document.png"];
            }
            
            UITapGestureRecognizer *fileTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapFileOnTable:)];
            fileSendCell.fMsgLabel.tag = indexPath.row;
            [fileSendCell.fMsgLabel setUserInteractionEnabled:YES];
            [fileSendCell.fMsgLabel addGestureRecognizer:fileTap];
         }
         
         if (![pDateStr isEqualToString:cDateStr]) {
            fileSendCell.fDateLabel.text = dateStr;
            fileSendCell.fDateLabel.hidden = NO;
            fileSendCell.fDateLabelConstraint.constant = 25;
            
         } else {
            fileSendCell.fDateLabel.hidden = YES;
            fileSendCell.fDateLabelConstraint.constant = 5;
         }
      }
      
      UILongPressGestureRecognizer *fileLongPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(fileLongTapDetected:)];
      fileLongPress.minimumPressDuration = 0.5;
      fileLongPress.delegate = self;
      [fileSendCell.fMsgLabel addGestureRecognizer:fileLongPress];
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)setFileRevcCell:(ChatReceiveFileCell *)fileRecvCell atIndexPath:(NSIndexPath *)indexPath {
   NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
   
   @try{
      NSString *userName = [msgDict objectForKey:@"USER_NM"];
      NSString *decodeUserNm = [NSString urlDecodeString:userName];
      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      content = [MFUtil replaceEncodeToChar:content];
      
      NSString *decodeContent = [NSString urlDecodeString:content];
//      NSString *fileName = [msgDict objectForKey:@"FILE_NM"];
      NSString *date = [msgDict objectForKey:@"DATE"];
      NSString *profileImg = [NSString urlDecodeString:[msgDict objectForKey:@"USER_IMG"]];
      NSString *unReadCount = [msgDict objectForKey:@"UNREAD_COUNT"];
      
      NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
      [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSDate *nsDate = [dateFormat dateFromString:date];
      
      NSDateFormatter *dateFormat2 = [[NSDateFormatter alloc] init];
      [dateFormat2 setDateFormat:NSLocalizedString(@"date14", @"date14")];
      NSString *dateStr = [dateFormat2 stringFromDate:nsDate];
      
      NSDateFormatter *dateFormat3 = [[NSDateFormatter alloc] init];
      [dateFormat3 setDateFormat:NSLocalizedString(@"date3", @"date3")];
      NSString *timeStr = [dateFormat3 stringFromDate:nsDate];
      NSString *decodeTime = [NSString urlDecodeString:timeStr];
      
      NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
    
      UIImage *bubble = [[UIImage imageNamed:@"bubbleReceive.png"] stretchableImageWithLeftCapWidth:21 topCapHeight:14];
      UIColor *color = [UIColor whiteColor];
      fileRecvCell.fBubbleImage.image = [bubble imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];
      [fileRecvCell.fBubbleImage setTintColor:color];
      
      fileRecvCell.fUserName.text = decodeUserNm;
      fileRecvCell.fTimeLabel.text = decodeTime;
      
      if(![[NSString stringWithFormat:@"%@",unReadCount] isEqualToString:@"0"] && unReadCount!=nil){
         fileRecvCell.fReadLabel.hidden = NO;
         fileRecvCell.fReadLabel.text = [NSString stringWithFormat:@"%@", unReadCount];
         fileRecvCell.fReadLabel.textColor = [MFUtil myRGBfromHex:@"FDE232"];
      } else {
         fileRecvCell.fReadLabel.hidden = YES;
      }
      
      if(![profileImg isEqualToString:@""]){
         UIImage *userImg = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(50, 50) :[MFUtil saveThumbImage:@"Profile" :profileImg]];
         fileRecvCell.fAvatarImage.image = userImg;
         
      } else {
         UIImage *defaultImg = [UIImage imageNamed:@"profile_default.png"];
         fileRecvCell.fAvatarImage.image = defaultImg;
      }
      
      if (indexPath.item == 0) {
         fileRecvCell.fDateLabel.text = dateStr;
         fileRecvCell.fDateLabel.hidden = NO;
         fileRecvCell.fDateLabelConstraint.constant = 25;
         
         if ([contentType isEqualToString:@"FILE"]){
            NSString *file = @"";
            @try{
               file = [decodeContent lastPathComponent];
               
            } @catch (NSException *exception) {
               file = decodeContent;
               NSLog(@"%s Exception : %@", __func__, exception);
            }
            
            fileRecvCell.fMsgLabel.text = file;
            fileRecvCell.fAvatarImage.hidden = NO;
            fileRecvCell.fUserName.hidden = NO;
            fileRecvCell.fMsgLabel.hidden = NO;
            fileRecvCell.fBubbleImage.hidden = NO;
            fileRecvCell.fTimeLabel.hidden = NO;
            fileRecvCell.fFileIcon.hidden = NO;
            
            NSRange range = [file rangeOfString:@"." options:NSBackwardsSearch];
            NSString *fileExt = [[file substringFromIndex:range.location+1] lowercaseString];
            
            if([fileExt isEqualToString:@"jpg"]||[fileExt isEqualToString:@"jpeg"]||[fileExt isEqualToString:@"gif"]||[fileExt isEqualToString:@"png"]||[fileExt isEqualToString:@"tiff"]||[fileExt isEqualToString:@"bmp"]||[fileExt isEqualToString:@"heic"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_img.png"];
               
            } else if([fileExt isEqualToString:@"mp4"]||[fileExt isEqualToString:@"mkv"]||[fileExt isEqualToString:@"wma"]||[fileExt isEqualToString:@"mov"]||[fileExt isEqualToString:@"swf"]||[fileExt isEqualToString:@"mpg"]||[fileExt isEqualToString:@"mpeg"]||[fileExt isEqualToString:@"vob"]||[fileExt isEqualToString:@"asf"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_movie.png"];
               
            } else if([fileExt isEqualToString:@"mp3"]||[fileExt isEqualToString:@"wav"]||[fileExt isEqualToString:@"ogg"]||[fileExt isEqualToString:@"wma"]||[fileExt isEqualToString:@"m4a"]||[fileExt isEqualToString:@"flac"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_music.png"];
               
            } else if([fileExt isEqualToString:@"psd"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_psd.png"];
               
            } else if([fileExt isEqualToString:@"ai"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_ai.png"];
               
            } else if([fileExt isEqualToString:@"docx"]||[fileExt isEqualToString:@"doc"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_word.png"];
               
            } else if([fileExt isEqualToString:@"pptx"]||[fileExt isEqualToString:@"ppt"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_ppt.png"];
               
            } else if([fileExt isEqualToString:@"xls"]||[fileExt isEqualToString:@"xlsx"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_excel.png"];
               
            } else if([fileExt isEqualToString:@"pdf"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_pdf.png"];
               
            } else if([fileExt isEqualToString:@"txt"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_txt.png"];
               
            } else if([fileExt isEqualToString:@"hwp"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_hwp.png"];
               
            } else if([fileExt isEqualToString:@"zip"]||[fileExt isEqualToString:@"rar"]||[fileExt isEqualToString:@"egg"]||[fileExt isEqualToString:@"alz"]||[fileExt isEqualToString:@"7z"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_zip.png"];
               
            } else {
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_document.png"];
            }
            
            UITapGestureRecognizer *fileTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapFileOnTable:)];
            fileRecvCell.fMsgLabel.tag = indexPath.row;
            [fileRecvCell.fMsgLabel setUserInteractionEnabled:YES];
            [fileRecvCell.fMsgLabel addGestureRecognizer:fileTap];
         }
      }
      
      if (indexPath.item  > 0) {
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         //NSLog(@"pd : %@, cd : %@", pDateStr, cDateStr);
         
         if ([contentType isEqualToString:@"FILE"]) {
            NSString *file = @"";
            @try{
               file = [decodeContent lastPathComponent];
               
            } @catch (NSException *exception) {
               file = decodeContent;
               NSLog(@"%s Exception : %@", __func__, exception);
            }
            
            fileRecvCell.fMsgLabel.text = file;
            fileRecvCell.fAvatarImage.hidden = NO;
            fileRecvCell.fUserName.hidden = NO;
            fileRecvCell.fMsgLabel.hidden = NO;
            fileRecvCell.fBubbleImage.hidden = NO;
            fileRecvCell.fTimeLabel.hidden = NO;
            fileRecvCell.fFileIcon.hidden = NO;
            
            NSRange range = [file rangeOfString:@"." options:NSBackwardsSearch];
            NSString *fileExt = [[file substringFromIndex:range.location+1] lowercaseString];
            
            if([fileExt isEqualToString:@"jpg"]||[fileExt isEqualToString:@"jpeg"]||[fileExt isEqualToString:@"gif"]||[fileExt isEqualToString:@"png"]||[fileExt isEqualToString:@"tiff"]||[fileExt isEqualToString:@"bmp"]||[fileExt isEqualToString:@"heic"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_img.png"];
               
            } else if([fileExt isEqualToString:@"mp4"]||[fileExt isEqualToString:@"mkv"]||[fileExt isEqualToString:@"wma"]||[fileExt isEqualToString:@"mov"]||[fileExt isEqualToString:@"swf"]||[fileExt isEqualToString:@"mpg"]||[fileExt isEqualToString:@"mpeg"]||[fileExt isEqualToString:@"vob"]||[fileExt isEqualToString:@"asf"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_movie.png"];
               
            } else if([fileExt isEqualToString:@"mp3"]||[fileExt isEqualToString:@"wav"]||[fileExt isEqualToString:@"ogg"]||[fileExt isEqualToString:@"wma"]||[fileExt isEqualToString:@"m4a"]||[fileExt isEqualToString:@"flac"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_music.png"];
               
            } else if([fileExt isEqualToString:@"psd"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_psd.png"];
               
            } else if([fileExt isEqualToString:@"ai"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_ai.png"];
               
            } else if([fileExt isEqualToString:@"docx"]||[fileExt isEqualToString:@"doc"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_word.png"];
               
            } else if([fileExt isEqualToString:@"pptx"]||[fileExt isEqualToString:@"ppt"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_ppt.png"];
               
            } else if([fileExt isEqualToString:@"xls"]||[fileExt isEqualToString:@"xlsx"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_excel.png"];
               
            } else if([fileExt isEqualToString:@"pdf"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_pdf.png"];
               
            } else if([fileExt isEqualToString:@"txt"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_txt.png"];
               
            } else if([fileExt isEqualToString:@"hwp"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_hwp.png"];
               
            } else if([fileExt isEqualToString:@"zip"]||[fileExt isEqualToString:@"rar"]||[fileExt isEqualToString:@"egg"]||[fileExt isEqualToString:@"alz"]||[fileExt isEqualToString:@"7z"]){
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_zip.png"];
               
            } else {
               fileRecvCell.fFileIcon.image = [UIImage imageNamed:@"file_document.png"];
            }
            
            UITapGestureRecognizer *fileTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapFileOnTable:)];
            fileRecvCell.fMsgLabel.tag = indexPath.row;
            [fileRecvCell.fMsgLabel setUserInteractionEnabled:YES];
            [fileRecvCell.fMsgLabel addGestureRecognizer:fileTap];
         }
         
         if (![pDateStr isEqualToString:cDateStr]) {
            fileRecvCell.fDateLabel.text = dateStr;
            fileRecvCell.fDateLabel.hidden = NO;
            fileRecvCell.fDateLabelConstraint.constant = 25;
            
         } else {
            fileRecvCell.fDateLabel.hidden = YES;
            fileRecvCell.fDateLabelConstraint.constant = 5;
         }
      }
      
      UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapProfileOnTable:)];
      fileRecvCell.fAvatarImage.tag = indexPath.row;
      [fileRecvCell.fAvatarImage setUserInteractionEnabled:YES];
      [fileRecvCell.fAvatarImage addGestureRecognizer:tap];
      
      UILongPressGestureRecognizer *fileLongPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(fileLongTapDetected:)];
      fileLongPress.minimumPressDuration = 0.5;
      fileLongPress.delegate = self;
      [fileRecvCell.fMsgLabel addGestureRecognizer:fileLongPress];
      
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)setInviteSendCell:(ChatInviteSendCell *)inviteSendCell atIndexPath:(NSIndexPath *)indexPath {
   @try{
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
      //NSLog(@"Send MsgDict : %@", msgDict);
      
//      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      //        if([content rangeOfString:@"%"].location != NSNotFound){dict :
      //            content = [content stringByReplacingOccurrencesOfString:@"%" withString:@"%25"];
      //        }
      //        if([content rangeOfString:@"&"].location != NSNotFound){
      //            content = [content stringByReplacingOccurrencesOfString:@"&" withString:@"%26"];
      //        }
      
      NSString *date = [msgDict objectForKey:@"DATE"];
//      NSString *pushType = [msgDict objectForKey:@"TYPE"];
//      NSString *fileThumb = [NSString urlDecodeString:[msgDict objectForKey:@"FILE_THUMB"]];
      NSString *aditInfo = [msgDict objectForKey:@"ADIT_INFO"];
      NSString *unReadCount = [msgDict objectForKey:@"UNREAD_COUNT"];
      
      NSData *jsonData = [content dataUsingEncoding:NSUTF8StringEncoding];
      NSError *error;
      NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
      
      NSString *snsNm = [dict objectForKey:@"SNS_NM"];
      NSString *snsDesc = [dict objectForKey:@"SNS_DESC"];
      NSString *snsCoverImage = [dict objectForKey:@"SNS_COVER_IMG"];
      
      NSData *jsonData2 = [aditInfo dataUsingEncoding:NSUTF8StringEncoding];
      NSError *e;
      NSDictionary *aditDic = [NSJSONSerialization JSONObjectWithData:jsonData2 options:0 error:&e];
      
      NSString *sendType = [aditDic objectForKey:@"TYPE"];
      
      NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
      [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSDate *nsDate = [dateFormat dateFromString:date];
      
      NSDateFormatter *dateFormat2 = [[NSDateFormatter alloc] init];
      [dateFormat2 setDateFormat:NSLocalizedString(@"date14", @"date14")];
      NSString *dateStr = [dateFormat2 stringFromDate:nsDate];
      
      NSDateFormatter *dateFormat3 = [[NSDateFormatter alloc] init];
      [dateFormat3 setDateFormat:NSLocalizedString(@"date3", @"date3")];
      NSString *timeStr = [dateFormat3 stringFromDate:nsDate];
      NSString *decodeTime = [NSString urlDecodeString:timeStr];
      
      NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
      
      UIImage *bubble = [[UIImage imageNamed:@"bubble.png"] stretchableImageWithLeftCapWidth:21 topCapHeight:14];
      //UIColor *color = [MFUtil myRGBfromHex:@"B7E6F6"];
      UIColor *color = [MFUtil myRGBfromHex:@"FDE232"]; //노란색(현대중공업)
      
      inviteSendCell.bubbleImg.image = [bubble imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];
      [inviteSendCell.bubbleImg setTintColor:color];
      
      UITapGestureRecognizer *bubbleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapMoreHandler:)];
      inviteSendCell.bubbleImg.tag = indexPath.row;
      [inviteSendCell.bubbleImg setUserInteractionEnabled:YES];
      [inviteSendCell.bubbleImg addGestureRecognizer:bubbleTap];
      
      inviteSendCell.imgView.layer.cornerRadius = inviteSendCell.imgView.frame.size.width/10;
      inviteSendCell.imgView.clipsToBounds = YES;
      
      if(![snsCoverImage isEqualToString:@""]&&![snsCoverImage isEqualToString:@"null"]&&snsCoverImage!=nil){
         UIImage *image = [MFUtil saveThumbImage:@"Cover" :snsCoverImage];
         if(image!=nil){
            UIImage *postCover = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(185, 105) :image];
            inviteSendCell.imgView.image = postCover;
         } else {
            UIImage *postCover = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(185, 105) :[UIImage imageNamed:@"cover3-2.png"]];
            inviteSendCell.imgView.image = postCover;
         }
      } else {
         UIImage *postCover = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(185, 105) :[UIImage imageNamed:@"cover3-2.png"]];
         inviteSendCell.imgView.image = postCover;
      }
      
      [inviteSendCell.titleLabel setNumberOfLines:0];
      
      [inviteSendCell.contentLabel setNumberOfLines:3];
      [inviteSendCell.contentLabel setLineBreakMode:NSLineBreakByTruncatingTail];
      
      inviteSendCell.titleLabel.text = [NSString stringWithFormat:NSLocalizedString(@"invite_title", @"invite_title"), snsNm];
      inviteSendCell.contentLabel.text = snsDesc;
      
      [inviteSendCell.moreButton setImage:[MFUtil getScaledLowImage:[UIImage imageNamed:@"icon_popup.png"] scaledToMaxWidth:10.0f] forState:UIControlStateNormal];
      [inviteSendCell.moreButton setImageEdgeInsets:UIEdgeInsetsMake(5.0, 0.0, 5.0, 0.0)];
      [inviteSendCell.moreButton setTitleEdgeInsets:UIEdgeInsetsMake(0.0, 5.0, 0.0, 0.0)];
      [inviteSendCell.moreButton setTitleColor:[MFUtil myRGBfromHex:appDelegate.mainThemeColor] forState:UIControlStateNormal];
      [inviteSendCell.moreButton setTitle:NSLocalizedString(@"invite_more", @"invite_more") forState:UIControlStateNormal];
      inviteSendCell.moreButton.tag = indexPath.row;
      [inviteSendCell.moreButton addTarget:self action:@selector(tapMoreButton:) forControlEvents:UIControlEventTouchUpInside];
      
      inviteSendCell.timeLabel.text = decodeTime;
      
      if(![[NSString stringWithFormat:@"%@",unReadCount] isEqualToString:@"0"] && unReadCount!=nil){
         inviteSendCell.readLabel.hidden = NO;
         inviteSendCell.readLabel.text = [NSString stringWithFormat:@"%@", unReadCount];
         inviteSendCell.readLabel.textColor = [MFUtil myRGBfromHex:@"FDE232"];
      } else {
         inviteSendCell.readLabel.hidden = YES;
      }
      
      if([sendType isEqualToString:@"SENDING"]){
         inviteSendCell.timeLabel.hidden = YES;
         inviteSendCell.failButton.hidden = YES;
         [inviteSendCell.indicator startAnimating];
         
      } else if([sendType isEqualToString:@"SUCCEED"]){
         inviteSendCell.timeLabel.hidden = NO;
         inviteSendCell.failButton.hidden = YES;
         [inviteSendCell.indicator setHidesWhenStopped:YES];
         [inviteSendCell.indicator stopAnimating];
         
      } else if([sendType isEqualToString:@"FAILED"]){
         inviteSendCell.timeLabel.hidden = YES;
         inviteSendCell.failButton.hidden = NO;
         [inviteSendCell.indicator setHidesWhenStopped:YES];
         [inviteSendCell.indicator stopAnimating];
         
      } else {
         //DATE
         inviteSendCell.timeLabel.hidden = YES;
         inviteSendCell.failButton.hidden = YES;
         [inviteSendCell.indicator setHidesWhenStopped:YES];
         [inviteSendCell.indicator stopAnimating];
      }
      
      if (indexPath.item == 0) {
         inviteSendCell.dateLabel.text = dateStr;
         inviteSendCell.dateLabel.hidden = NO;
         inviteSendCell.inviteSendDateConstraint.constant=25;
      }
      
      if (indexPath.item > 0) {
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         
         
         if (![pDateStr isEqualToString:cDateStr]) {
            inviteSendCell.dateLabel.text = dateStr;
            inviteSendCell.dateLabel.hidden = NO;
            inviteSendCell.inviteSendDateConstraint.constant=25;
            
         } else {
            inviteSendCell.dateLabel.hidden = YES;
            inviteSendCell.inviteSendDateConstraint.constant=5;
         }
      }
      
   } @catch(NSException *exception){
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}
- (void)setInviteRecvCell:(ChatInviteReceiveCell *)inviteRecvCell atIndexPath:(NSIndexPath *)indexPath {
   @try{
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
      
//      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      //        if([content rangeOfString:@"%"].location != NSNotFound){
      //            content = [content stringByReplacingOccurrencesOfString:@"%" withString:@"%25"];
      //        }
      //        if([content rangeOfString:@"&"].location != NSNotFound){
      //            content = [content stringByReplacingOccurrencesOfString:@"&" withString:@"%26"];
      //        }
      
      NSString *userName = [NSString urlDecodeString:[msgDict objectForKey:@"USER_NM"]];
      NSString *profileImg = [NSString urlDecodeString:[msgDict objectForKey:@"USER_IMG"]];
      NSString *date = [msgDict objectForKey:@"DATE"];
//      NSString *pushType = [msgDict objectForKey:@"TYPE"];
//      NSString *fileThumb = [NSString urlDecodeString:[msgDict objectForKey:@"FILE_THUMB"]];
//      NSString *aditInfo = [msgDict objectForKey:@"ADIT_INFO"];
      NSString *unReadCount = [msgDict objectForKey:@"UNREAD_COUNT"];
      
      NSData *jsonData = [content dataUsingEncoding:NSUTF8StringEncoding];
      NSError *error;
      NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
      
      NSString *snsNm = [dict objectForKey:@"SNS_NM"];
      NSString *snsDesc = [dict objectForKey:@"SNS_DESC"];
      NSString *snsCoverImage = [dict objectForKey:@"SNS_COVER_IMG"];
      
//      NSString *sendType = [aditDic objectForKey:@"TYPE"];
      
      NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
      [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSDate *nsDate = [dateFormat dateFromString:date];
      
      NSDateFormatter *dateFormat2 = [[NSDateFormatter alloc] init];
      [dateFormat2 setDateFormat:NSLocalizedString(@"date14", @"date14")];
      NSString *dateStr = [dateFormat2 stringFromDate:nsDate];
      
      NSDateFormatter *dateFormat3 = [[NSDateFormatter alloc] init];
      [dateFormat3 setDateFormat:NSLocalizedString(@"date3", @"date3")];
      NSString *timeStr = [dateFormat3 stringFromDate:nsDate];
      NSString *decodeTime = [NSString urlDecodeString:timeStr];
      
      NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
      
      UIImage *bubble = [[UIImage imageNamed:@"bubbleReceive.png"] stretchableImageWithLeftCapWidth:21 topCapHeight:14];
      //UIImage *bubble = [[UIImage imageNamed:@"you.9.png"] stretchableImageWithLeftCapWidth:21 topCapHeight:14];
      UIColor *color = [UIColor whiteColor];
      
      if(![profileImg isEqualToString:@""]){
         UIImage *userImg = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(50, 50) :[MFUtil saveThumbImage:@"Profile" :profileImg]];
         inviteRecvCell.userImgView.image = userImg;
         
      } else {
         UIImage *defaultImg = [UIImage imageNamed:@"profile_default.png"];
         inviteRecvCell.userImgView.image = defaultImg;
      }
      
      inviteRecvCell.bubbleImg.image = [bubble imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];
      [inviteRecvCell.bubbleImg setTintColor:color];
      
      UITapGestureRecognizer *bubbleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapMoreHandler:)];
      inviteRecvCell.bubbleImg.tag = indexPath.row;
      [inviteRecvCell.bubbleImg setUserInteractionEnabled:YES];
      [inviteRecvCell.bubbleImg addGestureRecognizer:bubbleTap];
      
      inviteRecvCell.imgView.layer.cornerRadius = inviteRecvCell.imgView.frame.size.width/10;
      inviteRecvCell.imgView.clipsToBounds = YES;
      
      inviteRecvCell.userName.text = userName;
      
      [inviteRecvCell.joinButton setTitle:NSLocalizedString(@"invite_done", @"invite_done") forState:UIControlStateNormal];
      inviteRecvCell.joinButton.tag = indexPath.row;
      [inviteRecvCell.joinButton addTarget:self action:@selector(tapJoinButton:) forControlEvents:UIControlEventTouchUpInside];
      
      if(![snsCoverImage isEqualToString:@""]&&![snsCoverImage isEqualToString:@"null"]&&snsCoverImage!=nil){
         UIImage *image = [MFUtil saveThumbImage:@"Cover" :snsCoverImage];
         if(image!=nil){
            UIImage *postCover = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(125, 105) :image];
            inviteRecvCell.imgView.image = postCover;
         } else {
            UIImage *postCover = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(125, 105) :[UIImage imageNamed:@"cover3-2.png"]];
            inviteRecvCell.imgView.image = postCover;
         }
      } else {
         UIImage *postCover = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(125, 105) :[UIImage imageNamed:@"cover3-2.png"]];
         inviteRecvCell.imgView.image = postCover;
      }
      
      [inviteRecvCell.titleLabel setNumberOfLines:0];
      //[inviteRecvCell.titleLabel setLineBreakMode:NSLineBreakByCharWrapping];
      
      [inviteRecvCell.contentLabel setNumberOfLines:3];
      //[inviteRecvCell.contentLabel setLineBreakMode:NSLineBreakByTruncatingTail];
      
      inviteRecvCell.titleLabel.text = [NSString stringWithFormat:NSLocalizedString(@"invite_title", @"invite_title"), snsNm];
      inviteRecvCell.contentLabel.text = snsDesc;
      
      [inviteRecvCell.moreButton setImage:[MFUtil getScaledLowImage:[UIImage imageNamed:@"icon_popup.png"] scaledToMaxWidth:10.0f] forState:UIControlStateNormal];
      [inviteRecvCell.moreButton setImageEdgeInsets:UIEdgeInsetsMake(5.0, 0.0, 5.0, 0.0)];
      [inviteRecvCell.moreButton setTitleEdgeInsets:UIEdgeInsetsMake(0.0, 5.0, 0.0, 0.0)];
      [inviteRecvCell.moreButton setTitleColor:[MFUtil myRGBfromHex:appDelegate.mainThemeColor] forState:UIControlStateNormal];
      [inviteRecvCell.moreButton setTitle:NSLocalizedString(@"invite_more", @"invite_more") forState:UIControlStateNormal];
      inviteRecvCell.moreButton.tag = indexPath.row;
      [inviteRecvCell.moreButton addTarget:self action:@selector(tapMoreButton:) forControlEvents:UIControlEventTouchUpInside];
      
      inviteRecvCell.timeLabel.text = decodeTime;
      
      if(![[NSString stringWithFormat:@"%@",unReadCount] isEqualToString:@"0"] && unReadCount!=nil){
         inviteRecvCell.readLabel.hidden = NO;
         inviteRecvCell.readLabel.text = [NSString stringWithFormat:@"%@", unReadCount];
         inviteRecvCell.readLabel.textColor = [MFUtil myRGBfromHex:@"FDE232"];
      } else {
         inviteRecvCell.readLabel.hidden = YES;
      }
      
      if (indexPath.item == 0) {
         inviteRecvCell.dateLabel.text = dateStr;
         inviteRecvCell.dateLabel.hidden = NO;
         inviteRecvCell.inviteRecvDateConstraint.constant=25;
      }
      
      if (indexPath.item > 0) {
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         
         
         if (![pDateStr isEqualToString:cDateStr]) {
            inviteRecvCell.dateLabel.text = dateStr;
            inviteRecvCell.dateLabel.hidden = NO;
            inviteRecvCell.inviteRecvDateConstraint.constant=25;
            
         } else {
            inviteRecvCell.dateLabel.hidden = YES;
            inviteRecvCell.inviteRecvDateConstraint.constant=5;
         }
      }
      
      UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapProfileOnTable:)];
      inviteRecvCell.userImgView.tag = indexPath.row;
      [inviteRecvCell.userImgView setUserInteractionEnabled:YES];
      [inviteRecvCell.userImgView addGestureRecognizer:tap];
      
   } @catch(NSException *exception){
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)setLongSendCell:(LongChatSendViewCell *)longSendCell atIndexPath:(NSIndexPath *)indexPath {
   @try{
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
//      NSLog(@"Long Send MsgDict : %@", msgDict);
      
//      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *chatNo = [msgDict objectForKey:@"CHAT_NO"];
//      NSString *content = [msgDict objectForKey:@"CONTENT"];
      NSString *contentPrev = [msgDict objectForKey:@"CONTENT_PREV"];
      contentPrev = [MFUtil replaceEncodeToChar:contentPrev];
      
      longSendCell.msgLabel.text = contentPrev;
      longSendCell.msgLabel.userInteractionEnabled = NO;
      
      NSString *date = [msgDict objectForKey:@"DATE"];
      NSString *aditInfo = [msgDict objectForKey:@"ADIT_INFO"];
      NSString *unReadCount = [msgDict objectForKey:@"UNREAD_COUNT"];
      
      NSData *jsonData2 = [aditInfo dataUsingEncoding:NSUTF8StringEncoding];
      NSError *e;
      NSDictionary *aditDic = [NSJSONSerialization JSONObjectWithData:jsonData2 options:0 error:&e];
      //NSLog(@"aditDic : %@", aditDic);
      
      NSString *sendType = [aditDic objectForKey:@"TYPE"];
      
      NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
      [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSDate *nsDate = [dateFormat dateFromString:date];
      
      NSDateFormatter *dateFormat2 = [[NSDateFormatter alloc] init];
      [dateFormat2 setDateFormat:NSLocalizedString(@"date14", @"date14")];
      NSString *dateStr = [dateFormat2 stringFromDate:nsDate];
      
      NSDateFormatter *dateFormat3 = [[NSDateFormatter alloc] init];
      [dateFormat3 setDateFormat:NSLocalizedString(@"date3", @"date3")];
      NSString *timeStr = [dateFormat3 stringFromDate:nsDate];
      NSString *decodeTime = [NSString urlDecodeString:timeStr];
      
      NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
      
      UIImage *bubble = [[UIImage imageNamed:@"bubble.png"] stretchableImageWithLeftCapWidth:21 topCapHeight:14];
      //UIColor *color = [MFUtil myRGBfromHex:@"B7E6F6"];
      UIColor *color = [MFUtil myRGBfromHex:@"FDE232"]; //노란색(현대중공업)
      
      longSendCell.bubbleImg.image = [bubble imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];
      [longSendCell.bubbleImg setTintColor:color];
      
      [longSendCell.viewButton setImage:[MFUtil getScaledLowImage:[UIImage imageNamed:@"icon_popup.png"] scaledToMaxWidth:10.0f] forState:UIControlStateNormal];
      [longSendCell.viewButton setImageEdgeInsets:UIEdgeInsetsMake(5.0, 5.0, 5.0, 0.0)];
      [longSendCell.viewButton setTitleEdgeInsets:UIEdgeInsetsMake(0.0, 10.0, 0.0, 0.0)];
      [longSendCell.viewButton setTitleColor:[MFUtil myRGBfromHex:appDelegate.mainThemeColor] forState:UIControlStateNormal];
      [longSendCell.viewButton setTitle:NSLocalizedString(@"chat_long_text_view_all", @"chat_long_text_view_all") forState:UIControlStateNormal];
      longSendCell.viewButton.tag = [chatNo integerValue];
      [longSendCell.viewButton addTarget:self action:@selector(tapChatMoreButton:) forControlEvents:UIControlEventTouchUpInside];
      
      longSendCell.timeLabel.text = decodeTime;
      
      //NSLog(@"unReadCount : %@", unReadCount);
      if(![[NSString stringWithFormat:@"%@",unReadCount] isEqualToString:@"0"] && unReadCount!=nil){
         longSendCell.readLabel.hidden = NO;
         longSendCell.readLabel.text = [NSString stringWithFormat:@"%@", unReadCount];
         longSendCell.readLabel.textColor = [MFUtil myRGBfromHex:@"FDE232"];
      } else {
         longSendCell.readLabel.hidden = YES;
      }
      
      //NSLog(@"#sendType# : %@", sendType);
      
      if([sendType isEqualToString:@"SENDING"]){
         longSendCell.timeLabel.hidden = YES;
         longSendCell.failButton.hidden = YES;
         [longSendCell.indicator startAnimating];
         
      } else if([sendType isEqualToString:@"SUCCEED"]){
         longSendCell.timeLabel.hidden = NO;
         longSendCell.failButton.hidden = YES;
         [longSendCell.indicator setHidesWhenStopped:YES];
         [longSendCell.indicator stopAnimating];
         
      } else if([sendType isEqualToString:@"FAILED"]){
         longSendCell.timeLabel.hidden = YES;
         longSendCell.failButton.hidden = NO;
         [longSendCell.indicator setHidesWhenStopped:YES];
         [longSendCell.indicator stopAnimating];
         
      } else {
         NSLog(@"unknown sendType : %@", sendType);
         //DATE
         longSendCell.timeLabel.hidden = YES;
         longSendCell.failButton.hidden = YES;
         [longSendCell.indicator setHidesWhenStopped:YES];
         [longSendCell.indicator stopAnimating];
      }
      
      if (indexPath.item == 0) {
         longSendCell.dateLabel.text = dateStr;
         longSendCell.dateLabel.hidden = NO;
         longSendCell.dateLabelConstraint.constant=25;
      }
      
      if (indexPath.item > 0) {
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         
         
         if (![pDateStr isEqualToString:cDateStr]) {
            //NSLog(@"pd : %@, cd : %@", pDateStr, cDateStr);
            longSendCell.dateLabel.text = dateStr;
            longSendCell.dateLabel.hidden = NO;
            longSendCell.dateLabelConstraint.constant=25;
            
         } else {
            longSendCell.dateLabel.hidden = YES;
            longSendCell.dateLabelConstraint.constant=5;
         }
      }
      
   } @catch(NSException *exception){
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)setLongRecvCell:(LongChatReceiveViewCell *)longRecvCell atIndexPath:(NSIndexPath *)indexPath {
   @try{
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
//       NSString *chatNo = [msgDict objectForKey:@"CHAT_NO"];
//       NSString *roomNo = [msgDict objectForKey:@"ROOM_NO"];
//       NSString *userNo = [msgDict objectForKey:@"USER_NO"];
      NSString *userName = [msgDict objectForKey:@"USER_NM"];
      NSString *decodeUserNm = [NSString urlDecodeString:userName];
//      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *chatNo = [msgDict objectForKey:@"CHAT_NO"];
      //NSString *content = [msgDict objectForKey:@"CONTENT"];
      NSString *contentPrev = [msgDict objectForKey:@"CONTENT_PREV"];
      contentPrev = [MFUtil replaceEncodeToChar:contentPrev];
      
      NSString *date = [msgDict objectForKey:@"DATE"];
      NSString *profileImg = [NSString urlDecodeString:[msgDict objectForKey:@"USER_IMG"]];
      NSString *unReadCount = [msgDict objectForKey:@"UNREAD_COUNT"];
      
      NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
      [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSDate *nsDate = [dateFormat dateFromString:date];
      
      NSDateFormatter *dateFormat2 = [[NSDateFormatter alloc] init];
      [dateFormat2 setDateFormat:NSLocalizedString(@"date14", @"date14")];
      NSString *dateStr = [dateFormat2 stringFromDate:nsDate];
      
      NSDateFormatter *dateFormat3 = [[NSDateFormatter alloc] init];
      [dateFormat3 setDateFormat:NSLocalizedString(@"date3", @"date3")];
      NSString *timeStr = [dateFormat3 stringFromDate:nsDate];
      NSString *decodeTime = [NSString urlDecodeString:timeStr];
      
      NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
      
      UIImage *bubble = [[UIImage imageNamed:@"bubbleReceive.png"] stretchableImageWithLeftCapWidth:21 topCapHeight:14];
      //UIImage *bubble = [[UIImage imageNamed:@"you.9.png"] stretchableImageWithLeftCapWidth:21 topCapHeight:14];
      UIColor *color = [UIColor whiteColor];
      
      longRecvCell.bubbleImg.image = [bubble imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];
      [longRecvCell.bubbleImg setTintColor:color];
      
      [longRecvCell.viewButton setImage:[MFUtil getScaledLowImage:[UIImage imageNamed:@"icon_popup.png"] scaledToMaxWidth:10.0f] forState:UIControlStateNormal];
      [longRecvCell.viewButton setImageEdgeInsets:UIEdgeInsetsMake(5.0, 5.0, 5.0, 0.0)];
      [longRecvCell.viewButton setTitleEdgeInsets:UIEdgeInsetsMake(0.0, 10.0, 0.0, 0.0)];
      [longRecvCell.viewButton setTitleColor:[MFUtil myRGBfromHex:appDelegate.mainThemeColor] forState:UIControlStateNormal];
      [longRecvCell.viewButton setTitle:NSLocalizedString(@"chat_long_text_view_all", @"chat_long_text_view_all") forState:UIControlStateNormal];
      longRecvCell.viewButton.tag = [chatNo integerValue];
      [longRecvCell.viewButton addTarget:self action:@selector(tapChatMoreButton:) forControlEvents:UIControlEventTouchUpInside];
      
      longRecvCell.userName.text = decodeUserNm;
      longRecvCell.timeLabel.text = decodeTime;
      
      //longRecvCell.msgContent.text = contentPrev;
      //longRecvCell.msgContent.userInteractionEnabled = NO;
      longRecvCell.msgLabel.text = contentPrev;
      longRecvCell.msgLabel.userInteractionEnabled = NO;
      
      longRecvCell.bubbleWidthConstraint.constant = [UIScreen mainScreen].bounds.size.width - 145;
      //longRecvCell.bubbleWidthConstraint.constant = longRecvCell.msgContent.frame.size.width;
      
      if(![[NSString stringWithFormat:@"%@",unReadCount] isEqualToString:@"0"] && unReadCount!=nil){
         longRecvCell.readLabel.hidden = NO;
         longRecvCell.readLabel.text = [NSString stringWithFormat:@"%@", unReadCount];
         longRecvCell.readLabel.textColor = [MFUtil myRGBfromHex:@"FDE232"];
      } else {
         longRecvCell.readLabel.hidden = YES;
      }
      
      if(![profileImg isEqualToString:@""]){
         UIImage *userImg = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(50, 50) :[MFUtil saveThumbImage:@"Profile" :profileImg]];
         longRecvCell.userImg.image = userImg;
         
      } else {
         UIImage *defaultImg = [UIImage imageNamed:@"profile_default.png"];
         longRecvCell.userImg.image = defaultImg;
      }
      
      if (indexPath.item == 0) {
         longRecvCell.dateLabel.text = dateStr;
         longRecvCell.dateLabel.hidden = NO;
         longRecvCell.dateLabelConstraint.constant = 25;
         
         //채팅내용 검색결과
         //         if(self.searchText.length>0){
         //            if([decodeContent rangeOfString:[NSString stringWithFormat:@"%@", self.searchText]].location != NSNotFound){
         //               longRecvCell.rMsgContent.attributedText = [self textGetRanges:decodeContent keyword:self.searchText];
         //            }
         //         }
         //
         //         NSDictionary *attributes = @{NSFontAttributeName: [receiveCell.rMsgContent font]};
         //         CGSize textSize = [[receiveCell.rMsgContent text] sizeWithAttributes:attributes];
         //         CGFloat strikeWidth = textSize.width;
         //
         //         if(strikeWidth < 23.0f){
         //            longRecvCell.rMsgContentWidth.constant = 40;
         //            longRecvCell.msgContent.textAlignment = NSTextAlignmentCenter;
         //         } else if(strikeWidth >= self.tableView.frame.size.width - 160){
         //            longRecvCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 160;
         //            longRecvCell.msgContent.textAlignment = NSTextAlignmentLeft;
         //         } else {
         //            if(strikeWidth+15 >= self.tableView.frame.size.width - 160) longRecvCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 160;
         //            else longRecvCell.rMsgContentWidth.constant = strikeWidth+15;
         //            longRecvCell.msgContent.textAlignment = NSTextAlignmentLeft;
         //         }
      }
      
      if (indexPath.item  > 0) {
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         
         
         //채팅내용 검색결과
         //         if(self.searchText.length>0){
         //            if([decodeContent rangeOfString:[NSString stringWithFormat:@"%@", self.searchText]].location != NSNotFound){
         //               longRecvCell.rMsgContent.attributedText = [self textGetRanges:decodeContent keyword:self.searchText];
         //            }
         //         }
         //
         //         NSDictionary *attributes = @{NSFontAttributeName: [receiveCell.rMsgContent font]};
         //         CGSize textSize = [[receiveCell.rMsgContent text] sizeWithAttributes:attributes];
         //         CGFloat strikeWidth = textSize.width;
         //
         //         if(strikeWidth < 23.0f){
         //            receiveCell.rMsgContentWidth.constant = 40;
         //            receiveCell.rMsgContent.textAlignment = NSTextAlignmentCenter;
         //         } else if(strikeWidth >= self.tableView.frame.size.width - 160){
         //            receiveCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 160;
         //            receiveCell.rMsgContent.textAlignment = NSTextAlignmentLeft;
         //         } else {
         //            if(strikeWidth+15 >= self.tableView.frame.size.width - 160) receiveCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 160;
         //            else receiveCell.rMsgContentWidth.constant = strikeWidth+15;
         //            receiveCell.rMsgContent.textAlignment = NSTextAlignmentLeft;
         //         }
         
         
         if (![pDateStr isEqualToString:cDateStr]) {
            longRecvCell.dateLabel.text = dateStr;
            longRecvCell.dateLabel.hidden = NO;
            longRecvCell.dateLabelConstraint.constant = 25;
            
         } else {
            longRecvCell.dateLabel.hidden = YES;
            longRecvCell.dateLabelConstraint.constant = 5;
         }
      }
      
      UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapProfileOnTable:)];
      longRecvCell.userImg.tag = indexPath.row;
      [longRecvCell.userImg setUserInteractionEnabled:YES];
      [longRecvCell.userImg addGestureRecognizer:tap];
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

#pragma mark - Tap Event Handler
//- (BOOL) gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch{
//   @try {
//      if ([touch.view isKindOfClass:[TTTAttributedLabel class]])
//      {
//         NSLog(@"맞아");
//         return NO;
//      }
//      else
//      {
//         NSLog(@"아ㅣㄴ야");
//         return YES;
//      }
//   } @catch (NSException *exception) {
//      NSLog(@"%s Exception : %@", __func__, exception);
//   }
//}

//-(BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer{
//   if ([touch.view isKindOfClass:[TTTAttributedLabel class]]){
//
//   }
//   return YES;
//}
//-(UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event {
//   UIView *defaultView = [super hitTest:point withEvent:event];
//
//   NSLog(@"View tapped: %@, %@", NSStringFromClass(defaultView.class), defaultView);
//
//   if ([defaultView isKindOfClass:[TTTAttributedLabel class]])
//   {
//      TTTAttributedLabel *label = (TTTAttributedLabel *)defaultView;
//      CGPoint translatedPoint = [label convertPoint:point fromView:self];
//
//      NSTextCheckingResult *result = [label linkAtPoint:translatedPoint];
//
//      if (result.numberOfRanges > 0) {
//         // a link was tapped
//         NSLog(@"A link was tapped: %@",result);
//      }
//   }
//
//   return defaultView;
//}

- (void)handleTapGesture:(UITapGestureRecognizer*)tap{
   @try {
      NSInteger index = tap.view.tag;
      if (index >= 0) {
         [self touchedMsgFailButton:(NSInteger)index];
      }
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)tapFileOnTable:(id)sender{
   NSLog(@"%s", __func__);
   UITapGestureRecognizer *gesture = sender;
   UIImageView *imageView = (UIImageView *)gesture.view;
   
   @try {
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:(long)imageView.tag];
      //NSLog(@"msgDic : %@", msgDict);
      
      NSString *fileUrl = [msgDict objectForKey:@"CONTENT"];
      
      UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:nil message:nil preferredStyle:UIAlertControllerStyleActionSheet];
      UIAlertAction *fileOpenAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"file_open", @"file_open")
                                                               style:UIAlertActionStyleDefault
                                                             handler:^(UIAlertAction * action){
                                                                //[self performSegueWithIdentifier:@"CHAT_FILE_OPEN_MODAL" sender:fileUrl];
                                                                [self handyViewerOpen:fileUrl];
                                                                [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                             }];
      [actionSheet addAction:fileOpenAction];
      
      if([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad){
         UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"cancel", @"cancel")
                                                                style:UIAlertActionStyleDefault
                                                              handler:^(UIAlertAction * action){
                                                                 [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                              }];
         [actionSheet addAction:cancelAction];
         
         [actionSheet.popoverPresentationController setPermittedArrowDirections:0];
         CGRect rect = self.view.frame;
         rect.origin.x = (self.view.frame.size.width/2)-(actionSheet.view.frame.size.width/2);
         rect.origin.y = (self.view.frame.size.height/2)-(actionSheet.view.frame.size.height/2);
         actionSheet.popoverPresentationController.sourceView = self.view;
         actionSheet.popoverPresentationController.sourceRect = rect;
      } else {
         UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"cancel", @"cancel")
                                                                style:UIAlertActionStyleCancel
                                                              handler:^(UIAlertAction * action){
                                                                 [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                              }];
         [actionSheet addAction:cancelAction];
      }
      
      [self presentViewController:actionSheet animated:YES completion:nil];
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)tapProfileOnTable:(id)sender{
   NSLog(@"%s", __func__);
   UITapGestureRecognizer *gesture = sender;
   UIImageView *imageView = (UIImageView *)gesture.view;
   
   @try{
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:(long)imageView.tag];
      //NSLog(@"msgDic : %@", msgDict);
      
      //[self performSegueWithIdentifier:@"CHAT_PROFILE_MODAL" sender:msgDict];
      
      NSString *roomType = [appDelegate.dbHelper selectString:[appDelegate.dbHelper getRoomType:self.roomNo]];
      
      NSString *userNo = [msgDict objectForKey:@"USER_NO"];
      NSString *userType = [appDelegate.dbHelper selectString:[appDelegate.dbHelper getSnsUserType:userNo]];
      
      CustomHeaderViewController *destination = [[CustomHeaderViewController alloc] initwithUserNo:userNo userType:userType];
      destination.userNo = userNo;
      destination.fromSegue = @"CHAT_PROFILE_MODAL";
      destination.chatRoomTy = roomType;
      destination.userType = userType;
      
      destination.modalTransitionStyle = UIModalTransitionStyleCrossDissolve;
      destination.modalPresentationStyle = UIModalPresentationOverFullScreen;
      [self presentViewController:destination animated:YES completion:nil];
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
   
}

- (void)chatImgTapGesture:(id)sender{
   UITapGestureRecognizer *gesture = sender;
   UIImageView *imageView = (UIImageView *)gesture.view;
   
   @try{
      //오리지널파일 경로를 이미지딕셔너리에 저장
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:(long)imageView.tag];
//      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      NSString *decodeContent = [NSString urlDecodeString:content];
//      NSString *fileName = [msgDict objectForKey:@"FILE_NM"];
//      NSString *aditInfo = [msgDict objectForKey:@"ADIT_INFO"];
//      NSString *pushType = [msgDict objectForKey:@"TYPE"];
      NSString *userName = [NSString urlDecodeString:[msgDict objectForKey:@"USER_NM"]];
      NSString *date = [msgDict objectForKey:@"DATE"];
      
      self.tabImgUser = userName;
      self.tabImgDate = date;
      
      UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
      ImgDownloadViewController *destination = (ImgDownloadViewController *)[storyboard instantiateViewControllerWithIdentifier:@"ImgDownloadViewController"];
      UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:destination];
      
      destination.imgPath = decodeContent;
      destination.writer = self.tabImgUser;
      destination.writeDate = self.tabImgDate;
      destination.fromSegue = @"CHAT_IMG_DOWN_MODAL";

      navController.modalTransitionStyle = UIModalPresentationNone;
      navController.modalPresentationStyle = UIModalPresentationOverFullScreen;
      [self presentViewController:navController animated:YES completion:nil];
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)chatVideoTapGesture:(id)sender{
   NSDictionary *msgDict = [NSDictionary dictionary];
   
   if ([sender isKindOfClass:[UITapGestureRecognizer class]]){
      UITapGestureRecognizer *gesture = sender;
      UIView *videoView = (UIView *)gesture.view;
      msgDict = [self.msgData.chatArray objectAtIndex:(long)videoView.tag];
      
   } else if([sender isKindOfClass:[UIButton class]]){
      UIButton *videoButton = sender;
      msgDict = [self.msgData.chatArray objectAtIndex:videoButton.tag];
   }
   
   @try{
      //오리지널파일 경로를 이미지딕셔너리에 저장
//      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      NSString *decodeContent = [NSString urlDecodeString:content];
//      NSString *fileName = [msgDict objectForKey:@"FILE_NM"];
//      NSString *aditInfo = [msgDict objectForKey:@"ADIT_INFO"];
//      NSString *pushType = [msgDict objectForKey:@"TYPE"];
      NSString *userName = [NSString urlDecodeString:[msgDict objectForKey:@"USER_NM"]];
      NSString *date = [msgDict objectForKey:@"DATE"];
      
      self.tabImgUser = userName;
      self.tabImgDate = date;
      
      UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
      WebViewController *destination = (WebViewController *)[storyboard instantiateViewControllerWithIdentifier:@"WebViewController"];
      UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:destination];

      destination.fileUrl = decodeContent;
      
      navController.modalTransitionStyle = UIModalPresentationNone;
      navController.modalPresentationStyle = UIModalPresentationFullScreen;
      //navController.modalPresentationStyle = UIModalPresentationOverFullScreen;
      [self presentViewController:navController animated:YES completion:nil];

   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)tapOnToastView:(id)sender{
   @try{
      for(UIView *subview in [self.view subviews]) {
         if([subview isKindOfClass:[self.toastView class]]) {
            [subview removeFromSuperview];
         }
      }
      
      NSIndexPath *lastCell = [NSIndexPath indexPathForItem:self.msgData.chatArray.count-1 inSection:0];
      [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)tapMoreButton:(UIButton *)sender{
   NSInteger tag = sender.tag;
   [self boardMoreInfo:tag];
}

-(void)tapMoreHandler:(UITapGestureRecognizer *)tap{
   NSInteger tag = tap.view.tag;
   [self boardMoreInfo:tag];
}

-(void)boardMoreInfo:(NSInteger)tag{
   @try{
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:tag];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      NSString *userNo = [msgDict objectForKey:@"USER_NO"];
      
      NSData *jsonData = [content dataUsingEncoding:NSUTF8StringEncoding];
      NSError *error;
      NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
      
      NSString *snsNo = [dict objectForKey:@"SNS_NO"];
      NSString *snsNm = [dict objectForKey:@"SNS_NM"];
      NSString *snsDesc = [dict objectForKey:@"SNS_DESC"];
      NSString *snsLeader = [dict objectForKey:@"SNS_CREATE_USER_NM"];
      NSString *snsType = [dict objectForKey:@"SNS_TY"];
      NSString *snsAllow = [dict objectForKey:@"SNS_NEED_ALLOW"];
      NSString *snsMemCnt = [dict objectForKey:@"SNS_MEMBER_COUNT"];
      NSString *snsCreateDate = [dict objectForKey:@"SNS_CREATE_DATE"];
      
      if(snsDesc.length<1) snsDesc = @"";
      
      if([snsType isEqualToString:@"Public"]) snsType = NSLocalizedString(@"board_info_visible_type_public", @"board_info_visible_type_public");
      else if([snsType isEqualToString:@"Closed"]) snsType = NSLocalizedString(@"board_info_visible_type_closed", @"board_info_visible_type_closed");
      else snsType = NSLocalizedString(@"board_info_visible_type_secret", @"board_info_visible_type_secret");
      
      if([snsAllow isEqualToString:@"0"]) snsAllow = NSLocalizedString(@"board_info_need_allow_no", @"board_info_need_allow_no");
      else snsAllow = NSLocalizedString(@"board_info_need_allow_yes", @"board_info_need_allow_yes");
      
      NSRange range = [snsCreateDate rangeOfString:@" " options:NSBackwardsSearch];
      snsCreateDate = [snsCreateDate substringToIndex:range.location+1];
      
      UIAlertController *alert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"board_info_title", @"board_info_title") message:nil preferredStyle:UIAlertControllerStyleAlert];
      
      NSMutableParagraphStyle *paraStyle = [[NSMutableParagraphStyle alloc] init];
      paraStyle.alignment = NSTextAlignmentLeft;
      
      NSString *str = [NSString stringWithFormat:@"%@ : %@ \n%@ : %@ \n\n%@ : %@ \n%@ : %@ \n%@ : %@ \n%@ : %@ \n%@ : %@", NSLocalizedString(@"board_info_name", @"board_info_name"),snsNm, NSLocalizedString(@"board_info_desc", @"board_info_desc"),snsDesc, NSLocalizedString(@"board_create_owner", @"board_create_owner"),snsLeader, NSLocalizedString(@"board_info_visible_type", @"board_info_visible_type"),snsType, NSLocalizedString(@"board_info_need_allow", @"board_info_need_allow"),snsAllow, NSLocalizedString(@"board_info_member_count", @"board_info_member_count"),snsMemCnt, NSLocalizedString(@"board_info_create_date", @"board_info_create_date"),snsCreateDate];
      
      NSMutableAttributedString *atrStr = [[NSMutableAttributedString alloc] initWithString:str attributes:@{NSParagraphStyleAttributeName:paraStyle,NSFontAttributeName:[UIFont systemFontOfSize:15.0]}];
      [alert setValue:atrStr forKey:@"attributedMessage"];
      
      
      UIAlertAction* closeButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"close", @"close") style:UIAlertActionStyleDefault
                                                          handler:^(UIAlertAction * action) {
                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                             
                                                          }];
      
      [alert addAction:closeButton];
      
      if(![[NSString stringWithFormat:@"%@", userNo] isEqualToString:[NSString stringWithFormat:@"%@", _myUserNo]]){
         UIAlertAction* joinButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"invite_done", @"invite_done") style:UIAlertActionStyleDefault
                                                            handler:^(UIAlertAction * action) {
                                                               [alert dismissViewControllerAnimated:YES completion:nil];
                                                               [self callJoinSns:snsNo];
                                                            }];
         [alert addAction:joinButton];
      }
      [self presentViewController:alert animated:YES completion:nil];
      
   } @catch(NSException *exception){
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)tapJoinButton:(UIButton *)sender{
   @try {
      NSInteger tag = sender.tag;
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:tag];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      
      NSData *jsonData = [content dataUsingEncoding:NSUTF8StringEncoding];
      NSError *error;
      NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
      
      NSString *snsNo = [dict objectForKey:@"SNS_NO"];
      NSString *snsNm = [dict objectForKey:@"SNS_NM"];
      
      joinSnsName = snsNm;
      
      UIAlertController *alert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"join_sns_toast0", @"join_sns_toast0"), snsNm] message:nil preferredStyle:UIAlertControllerStyleAlert];
      
      UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"cancel", @"cancel") style:UIAlertActionStyleDefault
                                                           handler:^(UIAlertAction * action) {
                                                              [alert dismissViewControllerAnimated:YES completion:nil];
                                                              
                                                           }];
      UIAlertAction *okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                       handler:^(UIAlertAction * action) {
                                                          [alert dismissViewControllerAnimated:YES completion:nil];
                                                          [self callJoinSns:snsNo];
                                                       }];
      [alert addAction:cancelButton];
      [alert addAction:okButton];
      [self presentViewController:alert animated:YES completion:nil];
      
   } @catch(NSException *exception){
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)tapChatMoreButton:(UIButton *)sender{
   NSInteger chatNo = sender.tag;
   
   UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
   LongChatViewController *destination = (LongChatViewController *)[storyboard instantiateViewControllerWithIdentifier:@"LongChatViewController"];
   
   destination.roomNo = self.roomNo;
   destination.chatNo = [NSString stringWithFormat:@"%lu", chatNo];
   
   UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:destination];
   navController.modalTransitionStyle = UIModalPresentationNone;
   navController.modalPresentationStyle = UIModalPresentationOverFullScreen;
   [self presentViewController:navController animated:YES completion:nil];
}

#pragma mark - Long Tap Event Handler
-(void)txtLongTapDetected:(UILongPressGestureRecognizer *)gesture{
   CGPoint p = [gesture locationInView:self.tableView];
   
   NSIndexPath *indexPath = [self.tableView indexPathForRowAtPoint:p];
   if (indexPath == nil) {
   } else if (gesture.state == UIGestureRecognizerStateBegan) {
      UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:nil message:nil preferredStyle:UIAlertControllerStyleActionSheet];
      
      UIAlertAction *shareAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"share", @"share")
                                                            style:UIAlertActionStyleDefault
                                                          handler:^(UIAlertAction * action){
//                                                             NSLog(@"SHARE MSG DATA : %@", [self.msgData.chatArray objectAtIndex:indexPath.row]);
                                                             [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                             
                                                             NSString *content = [[self.msgData.chatArray objectAtIndex:indexPath.row] objectForKey:@"CONTENT"];
                                                             
                                                             NSMutableArray *arr = [NSMutableArray array];
                                                             NSMutableDictionary *dict = [NSMutableDictionary dictionary];
                                                             
                                                             [dict setObject:@"TEXT" forKey:@"TYPE"];
                                                             [dict setObject:content forKey:@"VALUE"];
                                                             [dict setObject:@"true" forKey:@"IS_SHARE"];
                                                             [arr addObject:dict];
                                                             
                                                             [appDelegate.appPrefs setObject:arr forKey:@"SHARE_ITEM_FROM_CHAT"];
                                                             [appDelegate.appPrefs synchronize];
                                                             
                                                             UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
                                                             ShareSelectViewController *destination = (ShareSelectViewController *)[storyboard instantiateViewControllerWithIdentifier:@"ShareSelectViewController"];
                                                             UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:destination];
                                                             destination.fromSegue = @"SHARE_FROM_CHAT_MODAL";
                                                             navController.modalTransitionStyle = UIModalPresentationNone;
                                                            navController.modalPresentationStyle = UIModalPresentationOverFullScreen;
                                                             [self presentViewController:navController animated:YES completion:nil];
                                                             
                                                          }];
      [actionSheet addAction:shareAction];
      
      if([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad){
         UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"cancel", @"cancel")
                                                                style:UIAlertActionStyleDefault
                                                              handler:^(UIAlertAction * action){
                                                                 [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                              }];
         [actionSheet addAction:cancelAction];
         
         [actionSheet.popoverPresentationController setPermittedArrowDirections:0];
         CGRect rect = self.view.frame;
         rect.origin.x = (self.view.frame.size.width/2)-(actionSheet.view.frame.size.width/2);
         rect.origin.y = (self.view.frame.size.height/2)-(actionSheet.view.frame.size.height/2);
         actionSheet.popoverPresentationController.sourceView = self.view;
         actionSheet.popoverPresentationController.sourceRect = rect;
      } else {
         UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"cancel", @"cancel")
                                                                style:UIAlertActionStyleCancel
                                                              handler:^(UIAlertAction * action){
                                                                 [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                              }];
         [actionSheet addAction:cancelAction];
      }
      
      [self presentViewController:actionSheet animated:YES completion:nil];
      
   } else {
      
   }
}

-(void)imgLongTapDetected:(UILongPressGestureRecognizer *)gesture{
   CGPoint p = [gesture locationInView:self.tableView];
   
   NSIndexPath *indexPath = [self.tableView indexPathForRowAtPoint:p];
   if (indexPath == nil) {
      
   } else if (gesture.state == UIGestureRecognizerStateBegan) {
      UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:nil message:nil preferredStyle:UIAlertControllerStyleActionSheet];
      
      UIAlertAction *shareAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"share", @"share")
                                                            style:UIAlertActionStyleDefault
                                                          handler:^(UIAlertAction * action){
//                                                             NSLog(@"SHARE MSG DATA : %@", [self.msgData.chatArray objectAtIndex:indexPath.row]);
                                                             [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                             
                                                             NSString *content = [[self.msgData.chatArray objectAtIndex:indexPath.row] objectForKey:@"CONTENT"];
                                                             content = [content stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLFragmentAllowedCharacterSet]];
                                                             NSData *imgData = [NSData dataWithContentsOfURL:[NSURL URLWithString:content]];
                                                             
                                                             NSMutableArray *arr = [NSMutableArray array];
                                                             NSMutableDictionary *dict = [NSMutableDictionary dictionary];
                                                             
                                                             [dict setObject:@"IMG" forKey:@"TYPE"];
                                                             [dict setObject:imgData forKey:@"VALUE"];
                                                             [dict setObject:content forKey:@"URL"];
                                                             [dict setObject:@"true" forKey:@"IS_SHARE"];
                                                             [arr addObject:dict];
                                                             
                                                             [appDelegate.appPrefs setObject:arr forKey:@"SHARE_ITEM_FROM_CHAT"];
                                                             [appDelegate.appPrefs synchronize];
                                                             
                                                             UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
                                                             ShareSelectViewController *destination = (ShareSelectViewController *)[storyboard instantiateViewControllerWithIdentifier:@"ShareSelectViewController"];
                                                             UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:destination];
                                                             destination.fromSegue = @"SHARE_FROM_CHAT_MODAL";
                                                             navController.modalTransitionStyle = UIModalPresentationNone;
                                                             navController.modalPresentationStyle = UIModalPresentationOverFullScreen;
                                                             [self presentViewController:navController animated:YES completion:nil];
                                                             
                                                          }];
      [actionSheet addAction:shareAction];
      
      if([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad){
         UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"cancel", @"cancel")
                                                                style:UIAlertActionStyleDefault
                                                              handler:^(UIAlertAction * action){
                                                                 [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                              }];
         [actionSheet addAction:cancelAction];
         
         [actionSheet.popoverPresentationController setPermittedArrowDirections:0];
         CGRect rect = self.view.frame;
         rect.origin.x = (self.view.frame.size.width/2)-(actionSheet.view.frame.size.width/2);
         rect.origin.y = (self.view.frame.size.height/2)-(actionSheet.view.frame.size.height/2);
         actionSheet.popoverPresentationController.sourceView = self.view;
         actionSheet.popoverPresentationController.sourceRect = rect;
         
      } else {
         UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"cancel", @"cancel")
                                                                style:UIAlertActionStyleCancel
                                                              handler:^(UIAlertAction * action){
                                                                 [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                              }];
         [actionSheet addAction:cancelAction];
      }
      [self presentViewController:actionSheet animated:YES completion:nil];
      
   } else {
      
   }
}

-(void)videoLongTapDetected:(UILongPressGestureRecognizer *)gesture{
   CGPoint p = [gesture locationInView:self.tableView];
   
   NSIndexPath *indexPath = [self.tableView indexPathForRowAtPoint:p];
   if (indexPath == nil) {
      
   } else if (gesture.state == UIGestureRecognizerStateBegan) {
      UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:nil message:nil preferredStyle:UIAlertControllerStyleActionSheet];
      
      UIAlertAction *shareAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"share", @"share")
                                                            style:UIAlertActionStyleDefault
                                                          handler:^(UIAlertAction * action){
//                                                             NSLog(@"SHARE VIDEO MSG DATA : %@", [self.msgData.chatArray objectAtIndex:indexPath.row]);
                                                             [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                             
                                                             NSString *bundleIdentifier = [[NSBundle mainBundle] bundleIdentifier];
                                                             NSString *documentFolder = [NSString stringWithFormat:@"/%@/%@/%@", [NSHomeDirectory() stringByAppendingPathComponent:@"Documents"], bundleIdentifier, [appDelegate.appPrefs objectForKey:@"COMP_NO"]];
                                                             
                                                             NSDate *today = [NSDate date];
                                                             NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
                                                             [dateFormatter setDateFormat:@"yyyyMMdd"];
                                                             NSString *currentTime = [dateFormatter stringFromDate:today];
                                                             
//                                                             NSString *saveOrginPath = [documentFolder stringByAppendingFormat:@"/Chat/%@/Video/%@", self.roomNo, currentTime];
                                                             NSString *saveThumbPath = [documentFolder stringByAppendingFormat:@"/Chat/%@/Video/.thumb/%@", self.roomNo, currentTime];
                                                             
                                                             NSFileManager *fileManager = [NSFileManager defaultManager];
                                                             BOOL issue = [fileManager isReadableFileAtPath:saveThumbPath];
                                                             if (issue) {
                                                                
                                                             }else{
#ifdef DEBUG
                                                                 NSLog(@"Chat RoomNo directory can't read...Create Folder");
#endif
                                                                [fileManager createDirectoryAtPath:saveThumbPath withIntermediateDirectories:YES attributes:nil error:nil];
                                                             }
                                                             
                                                             //썸네일이미지
                                                             NSString *imagePath = [saveThumbPath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",[[self.msgData.chatArray objectAtIndex:indexPath.row] objectForKey:@"FILE_NM"]]];
                                                             imagePath = [imagePath stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLFragmentAllowedCharacterSet]];
                                                             NSData *thumbData = [NSData dataWithContentsOfFile:imagePath];
                                                             
                                                             NSString *content = [[self.msgData.chatArray objectAtIndex:indexPath.row] objectForKey:@"CONTENT"];
                                                             
                                                             NSMutableArray *arr = [NSMutableArray array];
                                                             NSMutableDictionary *dict = [NSMutableDictionary dictionary];
                                                             [dict setObject:@"VIDEO" forKey:@"TYPE"];
                                                             [dict setObject:thumbData forKey:@"VIDEO_THUMB"];
                                                             [dict setObject:@"" forKey:@"VIDEO_DATA"];
                                                             [dict setObject:content forKey:@"URL"];
                                                             [dict setObject:@"true" forKey:@"IS_SHARE"];
                                                             [arr addObject:dict];
                                                             
                                                             [appDelegate.appPrefs setObject:arr forKey:@"SHARE_ITEM_FROM_CHAT"];
                                                             [appDelegate.appPrefs synchronize];
                                                             
                                                             UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
                                                             ShareSelectViewController *destination = (ShareSelectViewController *)[storyboard instantiateViewControllerWithIdentifier:@"ShareSelectViewController"];
                                                             UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:destination];
                                                             destination.fromSegue = @"SHARE_FROM_CHAT_MODAL";
                                                             navController.modalTransitionStyle = UIModalPresentationNone;
                                                             navController.modalPresentationStyle = UIModalPresentationOverFullScreen;
                                                             [self presentViewController:navController animated:YES completion:nil];
                                                             
                                                          }];
      [actionSheet addAction:shareAction];
      
      if([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad){
         UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"cancel", @"cancel")
                                                                style:UIAlertActionStyleDefault
                                                              handler:^(UIAlertAction * action){
                                                                 [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                              }];
         [actionSheet addAction:cancelAction];
         
         [actionSheet.popoverPresentationController setPermittedArrowDirections:0];
         CGRect rect = self.view.frame;
         rect.origin.x = (self.view.frame.size.width/2)-(actionSheet.view.frame.size.width/2);
         rect.origin.y = (self.view.frame.size.height/2)-(actionSheet.view.frame.size.height/2);
         actionSheet.popoverPresentationController.sourceView = self.view;
         actionSheet.popoverPresentationController.sourceRect = rect;
         
      } else {
         UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"cancel", @"cancel")
                                                                style:UIAlertActionStyleCancel
                                                              handler:^(UIAlertAction * action){
                                                                 [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                              }];
         [actionSheet addAction:cancelAction];
      }
      
      [self presentViewController:actionSheet animated:YES completion:nil];
      
   } else {
      
   }
}

-(void)fileLongTapDetected:(UILongPressGestureRecognizer *)gesture{
   CGPoint p = [gesture locationInView:self.tableView];
   
   NSIndexPath *indexPath = [self.tableView indexPathForRowAtPoint:p];
   if (indexPath == nil) {
      
   } else if (gesture.state == UIGestureRecognizerStateBegan) {
      UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:nil message:nil preferredStyle:UIAlertControllerStyleActionSheet];
      
      UIAlertAction *shareAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"share", @"share")
                                                            style:UIAlertActionStyleDefault
                                                          handler:^(UIAlertAction * action){
//                                                             NSLog(@"SHARE FILE MSG DATA : %@", [self.msgData.chatArray objectAtIndex:indexPath.row]);
                                                             [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                             
                                                             NSString *content = [[self.msgData.chatArray objectAtIndex:indexPath.row] objectForKey:@"CONTENT"];

                                                             NSMutableArray *arr = [NSMutableArray array];
                                                             NSMutableDictionary *dict = [NSMutableDictionary dictionary];
                                                             [dict setObject:@"FILE" forKey:@"TYPE"];
                                                             [dict setObject:content forKey:@"VALUE"];
                                                             [dict setObject:@"true" forKey:@"IS_SHARE"];
                                                             [arr addObject:dict];

                                                             [appDelegate.appPrefs setObject:arr forKey:@"SHARE_ITEM_FROM_CHAT"];
                                                             [appDelegate.appPrefs synchronize];

                                                             UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
                                                             ShareSelectViewController *destination = (ShareSelectViewController *)[storyboard instantiateViewControllerWithIdentifier:@"ShareSelectViewController"];
                                                             UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:destination];
                                                             destination.fromSegue = @"SHARE_FROM_CHAT_MODAL";
                                                             navController.modalTransitionStyle = UIModalPresentationNone;
                                                            navController.modalPresentationStyle = UIModalPresentationOverFullScreen;
                                                             [self presentViewController:navController animated:YES completion:nil];
                                                             
                                                          }];
      [actionSheet addAction:shareAction];
      
      if([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad){
         UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"cancel", @"cancel")
                                                                style:UIAlertActionStyleDefault
                                                              handler:^(UIAlertAction * action){
                                                                 [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                              }];
         [actionSheet addAction:cancelAction];
         
         [actionSheet.popoverPresentationController setPermittedArrowDirections:0];
         CGRect rect = self.view.frame;
         rect.origin.x = (self.view.frame.size.width/2)-(actionSheet.view.frame.size.width/2);
         rect.origin.y = (self.view.frame.size.height/2)-(actionSheet.view.frame.size.height/2);
         actionSheet.popoverPresentationController.sourceView = self.view;
         actionSheet.popoverPresentationController.sourceRect = rect;
         
      } else {
         UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"cancel", @"cancel")
                                                                style:UIAlertActionStyleCancel
                                                              handler:^(UIAlertAction * action){
                                                                 [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                              }];
         [actionSheet addAction:cancelAction];
      }
      
      [self presentViewController:actionSheet animated:YES completion:nil];
      
   } else {
      
   }
}

#pragma mark - MediaButton events
- (void)cameraAccessCheck {
   NSString *appName = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleDisplayName"];
   
   int osVer = [[UIDevice currentDevice].systemVersion floatValue];
   [self photoAccessCheck:@"CAMERA"];
   
   AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];
   if(status == AVAuthorizationStatusAuthorized) {
//      NSLog(@"카메라 접근 허용일 경우");
      dispatch_async(dispatch_get_main_queue(), ^{
         UIViewController *top = [UIApplication sharedApplication].keyWindow.rootViewController;
         self.attachView.picker = [[UIImagePickerController alloc] init];
         self.attachView.picker.delegate = self;
         self.attachView.picker.mediaTypes = [NSArray arrayWithObjects:(NSString *)kUTTypeMovie,(NSString *)kUTTypeImage,nil];
         self.attachView.picker.sourceType = UIImagePickerControllerSourceTypeCamera;
         self.attachView.picker.videoQuality = UIImagePickerControllerQualityTypeHigh;
         self.attachView.picker.videoMaximumDuration = 15.0f; //최대촬영시간설정
         
         self.attachView.picker.modalPresentationStyle = UIModalPresentationFullScreen;
         [top presentViewController:self.attachView.picker animated:YES completion:NULL];
      });
      
   } else if(status == AVAuthorizationStatusDenied) {
//      NSLog(@"카메라 접근 허용되지않았을 경우");
      if(osVer >= 8){}
      else {}
      
      UIAlertController *alert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"alert_access_camera", @"alert_access_camera"), appName] message:nil preferredStyle:UIAlertControllerStyleAlert];
      UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"cancel", @"cancel") style:UIAlertActionStyleDefault
                                                           handler:^(UIAlertAction * action) {
                                                              [alert dismissViewControllerAnimated:YES completion:nil];
                                                           }];
      UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                       handler:^(UIAlertAction * action) {
                                                          NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                          [[UIApplication sharedApplication] openURL:url options:@{} completionHandler:nil];
                                                          
                                                          [alert dismissViewControllerAnimated:YES completion:nil];
                                                       }];
      [alert addAction:cancelButton];
      [alert addAction:okButton];
      [self presentViewController:alert animated:YES completion:nil];
      
   } else if(status == AVAuthorizationStatusNotDetermined){ // not determined
      //NSLog(@"AVAuthorizationStatusNotDetermined status : %ld", (long)status);
      [AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted) {
         if(granted){ // Access has been granted ..do something
            dispatch_async(dispatch_get_main_queue(), ^{
               UIViewController *top = [UIApplication sharedApplication].keyWindow.rootViewController;
               self.attachView.picker = [[UIImagePickerController alloc] init];
               self.attachView.picker.delegate = self;
               self.attachView.picker.sourceType = UIImagePickerControllerSourceTypeCamera;
               
               self.attachView.picker.modalPresentationStyle = UIModalPresentationFullScreen;
               [top presentViewController:self.attachView.picker animated:YES completion:NULL];
            });
            
         } else { // Access denied ..do something
//            NSLog(@"허용안함?");
            if(osVer >= 8){}
            else {}
            
            UIAlertController *alert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"alert_access_camera", @"alert_access_camera"), appName] message:nil preferredStyle:UIAlertControllerStyleAlert];
            UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"cancel", @"cancel") style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction * action) {
                                                                    [alert dismissViewControllerAnimated:YES completion:nil];
                                                                 }];
            UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                             handler:^(UIAlertAction * action) {
                                                                NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                [[UIApplication sharedApplication] openURL:url options:@{} completionHandler:nil];
                                                                
                                                                [alert dismissViewControllerAnimated:YES completion:nil];
                                                             }];
            [alert addAction:cancelButton];
            [alert addAction:okButton];
            [self presentViewController:alert animated:YES completion:nil];
         }
      }];
   } else {
      
   }
}

- (void)photoAccessCheck :(NSString *)mediaType{
   NSString *appName = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleDisplayName"];
   
   int osVer = [[UIDevice currentDevice].systemVersion floatValue];
   PHAuthorizationStatus photoStatus = [PHPhotoLibrary authorizationStatus];
   
   if (photoStatus == PHAuthorizationStatusAuthorized) {
      //NSLog(@"Access has been granted.");
      if([mediaType isEqualToString:@"PHOTO"]){
         [self performSegueWithIdentifier:@"CHAT_PHLIB_MODAL" sender:@"PHOTO"];
         
      } else if([mediaType isEqualToString:@"VIDEO"]){
         [self performSegueWithIdentifier:@"CHAT_PHLIB_MODAL" sender:@"VIDEO"];
      }
      
   } else if (photoStatus == PHAuthorizationStatusDenied) {
      //NSLog(@"Access has been denied.");
      if(osVer >= 8){}
      else {}
      UIAlertController *alert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"alert_access_photo", @"alert_access_photo"),appName] message:nil preferredStyle:UIAlertControllerStyleAlert];
      UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"cancel", @"cancel") style:UIAlertActionStyleDefault
                                                           handler:^(UIAlertAction * action) {
                                                              [alert dismissViewControllerAnimated:YES completion:nil];
                                                           }];
      UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                       handler:^(UIAlertAction * action) {
                                                          NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                          [[UIApplication sharedApplication] openURL:url options:@{} completionHandler:nil];
                                                          
                                                          [alert dismissViewControllerAnimated:YES completion:nil];
                                                       }];
      [alert addAction:cancelButton];
      [alert addAction:okButton];
      [self presentViewController:alert animated:YES completion:nil];
      
   } else if (photoStatus == PHAuthorizationStatusNotDetermined) {
      [PHPhotoLibrary requestAuthorization:^(PHAuthorizationStatus status) {
         if (status == PHAuthorizationStatusAuthorized) {
//            NSLog(@"1 StatusNotDetermined Access has been granted.");
            if([mediaType isEqualToString:@"PHOTO"]){
               dispatch_async(dispatch_get_main_queue(), ^{
                  [self performSegueWithIdentifier:@"CHAT_PHLIB_MODAL" sender:@"PHOTO"];
               });
            } else if([mediaType isEqualToString:@"VIDEO"]){
               dispatch_async(dispatch_get_main_queue(), ^{
                  [self performSegueWithIdentifier:@"CHAT_PHLIB_MODAL" sender:@"VIDEO"];
               });
            }
            
         } else {
//            NSLog(@"2 StatusNotDetermined Access has been granted.");
         }
      }];
   } else if (photoStatus == PHAuthorizationStatusRestricted) {
//      NSLog(@"Restricted access - normally won't happen.");
   }
   
   return;
}

- (void)cameraButtonPressed:(id)sender
{
   mediaType = @"IMG";
   [self cameraAccessCheck];
   if(_isFlag){ //미디어버튼
      UIImage *accessoryImage = [UIImage imageNamed:@"btn_add.png"];
      UIImage *normalImage = [accessoryImage jsq_imageMaskedWithColor:[UIColor lightGrayColor]];
      [_mediaButton setImage:normalImage forState:UIControlStateNormal];
      
      _mediaButton.contentMode = UIViewContentModeScaleAspectFit;
      _mediaButton.backgroundColor = [UIColor clearColor];
      
      self.inputToolbar.contentView.textView.inputView = nil;
      
      _isFlag = false;
   }
}

- (void)photoButtonPressed:(id)sender
{
   mediaType = @"IMG";
   [self photoAccessCheck:@"PHOTO"];
   if(_isFlag){ //미디어버튼
      UIImage *accessoryImage = [UIImage imageNamed:@"btn_add.png"];
      UIImage *normalImage = [accessoryImage jsq_imageMaskedWithColor:[UIColor lightGrayColor]];
      [_mediaButton setImage:normalImage forState:UIControlStateNormal];
      
      _mediaButton.contentMode = UIViewContentModeScaleAspectFit;
      _mediaButton.backgroundColor = [UIColor clearColor];
      
      self.inputToolbar.contentView.textView.inputView = nil;
      
      _isFlag = false;
   }
}

- (void)videoButtonPressed:(id)sender {
   mediaType = @"VIDEO";
   [self photoAccessCheck:@"VIDEO"];
   if(_isFlag){ //미디어버튼
      UIImage *accessoryImage = [UIImage imageNamed:@"btn_add.png"];
      UIImage *normalImage = [accessoryImage jsq_imageMaskedWithColor:[UIColor lightGrayColor]];
      [_mediaButton setImage:normalImage forState:UIControlStateNormal];
      
      _mediaButton.contentMode = UIViewContentModeScaleAspectFit;
      _mediaButton.backgroundColor = [UIColor clearColor];
      
      self.inputToolbar.contentView.textView.inputView = nil;
      
      _isFlag = false;
   }
   
   //    UIAlertController * alert = [UIAlertController alertControllerWithTitle:@"" message:@"개발중인 기능입니다." preferredStyle:UIAlertControllerStyleAlert];
   //
   //    [self presentViewController:alert animated:YES completion:nil];
   //    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
   //        [alert dismissViewControllerAnimated:YES completion:nil];
   //    });
}

#pragma mark - pushNotification
- (void)applicationDidBecomeActive:(NSNotification *)notification {
   appDelegate.isChatViewing = YES;
}

- (void)applicationDidEnterBackground:(NSNotification *)notification {
   appDelegate.isChatViewing = NO;
}

- (void)noti_ChatDetailView:(NSNotification *)notification{
#ifdef DEBUG
   NSLog(@"%s", __func__);
#endif
   
   @try{
      NSArray *dataSet = [notification.userInfo objectForKey:@"DATASET"];
      NSString *roomNo = [[dataSet objectAtIndex:0] objectForKey:@"ROOM_NO"];
      if([[NSString stringWithFormat:@"%@", roomNo] isEqualToString:[NSString stringWithFormat:@"%@", self.roomNo]]){
         //[[NSNotificationCenter defaultCenter] postNotificationName:@"noti_Flag" object:nil userInfo:nil];
      } else {
         [self.navigationController popViewControllerAnimated:YES];
      }
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)noti_Chat:(NSNotification *)notification {
#ifdef DEBUG
   NSLog(@"========================================================");
   NSLog(@"1.푸시수신");
#endif

   NSDictionary *userInfo = notification.userInfo;
   int count = missedCnt + tmpMissedCnt;
   NSUInteger msgDataCnt = self.msgData.chatArray.count;
   
   @try{
#ifdef DEBUG
      NSLog(@"%s, userInfo : %@", __func__, userInfo);
#endif
      
      NSArray *dataSet = [userInfo objectForKey:@"DATASET"];
      NSDictionary *aditInfoDic = [[dataSet objectAtIndex:0] objectForKey:@"ADITINFO"];
      NSString *chatNo = [[dataSet objectAtIndex:0] objectForKey:@"CHAT_NO"];
      NSString *userNo = [[dataSet objectAtIndex:0] objectForKey:@"CUSER_NO"];
      NSString *pushType = [userInfo objectForKey:@"TYPE"];
      NSString *content = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"CONTENT"]];
      NSString *contentType = [[dataSet objectAtIndex:0] objectForKey:@"CONTENT_TY"];
      NSString *chatDate = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"CHAT_DATE"]];
      //NSString *fileName = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"FILE_NM"]];
      NSString *fileThumb = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"FILE_THUMB"]];
      NSString *fileName = [fileThumb lastPathComponent];
      NSString *profileImg = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"PROFILE_IMG"]];
      NSString *userName = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"USER_NM"]];
      NSString *roomNo = [[dataSet objectAtIndex:0] objectForKey:@"ROOM_NO"];
      NSString *unRead = [[dataSet objectAtIndex:0] objectForKey:@"UNREAD_COUNT"];
      
      if([contentType isEqualToString:@"INVITE"]){
         content = [NSString urlDecodeString:content];
      }
      
      NSString *tmpLocal = [aditInfoDic objectForKey:@"LOCAL_CONTENT"];
      NSInteger tmpIdx = [[aditInfoDic objectForKey:@"TMP_IDX"] intValue];
      
      NSMutableDictionary *userInfoDic = [[NSMutableDictionary alloc]init];
      [userInfoDic setObject:[[dataSet objectAtIndex:0] objectForKey:@"CHAT_NO"] forKey:@"CHAT_NO"];
      //[userInfoDic setObject:content forKey:@"CONTENT"];
      [userInfoDic setObject:contentType forKey:@"CONTENT_TY"];
      [userInfoDic setObject:chatDate forKey:@"DATE"];
      [userInfoDic setObject:roomNo forKey:@"ROOM_NO"];
      [userInfoDic setObject:pushType forKey:@"TYPE"];
      [userInfoDic setObject:userName forKey:@"USER_NM"];
      [userInfoDic setObject:userNo forKey:@"USER_NO"];
      [userInfoDic setObject:unRead forKey:@"UNREAD_COUNT"];
      
      if([fileName isEqualToString:@""]) [userInfoDic setObject:@"" forKey:@"FILE_NM"];
      else [userInfoDic setObject:fileName forKey:@"FILE_NM"];
      
      if([fileThumb isEqualToString:@""]) [userInfoDic setObject:@"" forKey:@"FILE_THUMB"];
      else [userInfoDic setObject:fileThumb forKey:@"FILE_THUMB"];
      
      if([profileImg isEqualToString:@""]) [userInfoDic setObject:@"" forKey:@"USER_IMG"];
      else [userInfoDic setObject:profileImg forKey:@"USER_IMG"];
      
      NSLog(@"[Noti_Chat] roomNo : %@ / self.roomNo : %@", roomNo, self.roomNo);
      
      //해당 채팅방 보고있는 경우
      if([[NSString stringWithFormat:@"%@", roomNo] isEqualToString:[NSString stringWithFormat:@"%@", self.roomNo]]){
         [HDNotificationView hideNotificationView];
         
         if(![contentType isEqualToString:@"SYS"]){
            if([contentType isEqualToString:@"LONG_TEXT"]){
               [userInfoDic setObject:@"" forKey:@"CONTENT"];
               [userInfoDic setObject:content forKey:@"CONTENT_PREV"];
            } else {
               [userInfoDic setObject:content forKey:@"CONTENT"];
               [userInfoDic setObject:@"" forKey:@"CONTENT_PREV"];
            }
            
            if(![[NSString stringWithFormat:@"%@", userNo] isEqualToString:[NSString stringWithFormat:@"%@", _myUserNo]]){
               NSString *sqlString2 = [appDelegate.dbHelper updateRoomNewChat:0 roomNo:roomNo];
               [appDelegate.dbHelper crudStatement:sqlString2];
            }
         } else {
            NSString *sender = [NSString urlDecodeString:[aditInfoDic objectForKey:@"SENDER"]];
            NSString *sysMsgType = [aditInfoDic objectForKey:@"SYS_MSG_TY"];
            
            if([sysMsgType isEqualToString:@"ADD_USER"]){
               NSString *addSysMsg = [NSString stringWithFormat:NSLocalizedString(@"add_chat_user", @"add_chat_user"), sender, content];
               if([addSysMsg rangeOfString:@","].location != NSNotFound){
                  addSysMsg = [addSysMsg stringByReplacingOccurrencesOfString:@"," withString:NSLocalizedString(@"add_chat_user_conj", @"add_chat_user_conj")];
               }
               content = [[NSMutableString alloc]initWithString:addSysMsg];
            } else {
               //DELETE_USER
               NSString *deleteSysMsg = [NSString stringWithFormat:NSLocalizedString(@"delete_chat_user", @"delete_chat_user"), content];
               content = [[NSMutableString alloc]initWithString:deleteSysMsg];
            }
            [userInfoDic setObject:content forKey:@"CONTENT"];
         }
         
         content = [content stringByReplacingOccurrencesOfString:@"'" withString:@"''"];
         
         //내가 보낸 메시지
         if([[NSString stringWithFormat:@"%@", userNo] isEqualToString:[NSString stringWithFormat:@"%@", _myUserNo]]){
            //선등록메시지(SENDING) 교체(SUCCEED)
            NSMutableDictionary *tmpDic = [NSMutableDictionary dictionary];
            [tmpDic setValue:[NSNumber numberWithInteger:tmpIdx] forKey:@"TMP_IDX"];
            [tmpDic setValue:@"SUCCEED" forKey:@"TYPE"];
            [tmpDic setValue:tmpLocal forKey:@"LOCAL_CONTENT"];
            
            NSError *error;
            NSData *jsonData = [NSJSONSerialization dataWithJSONObject:tmpDic options:0 error:&error];
            NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
            
            [userInfoDic setObject:jsonString forKey:@"ADIT_INFO"];
            
            if([pushType isEqualToString:@"ADD_CHAT"]){
               if([contentType isEqualToString:@"LONG_TEXT"]){
                  NSString *sqlString = [appDelegate.dbHelper insertOrUpdateChats:chatNo roomNo:roomNo userNo:userNo contentType:contentType content:@"" localContent:@"" chatDate:chatDate fileName:fileName aditInfo:jsonString unReadCnt:unRead contentPrev:content];
                  
                  [appDelegate.dbHelper crudStatement:sqlString];
                  
               } else {
                  NSString *sqlString = [appDelegate.dbHelper insertOrUpdateChats:chatNo roomNo:roomNo userNo:userNo contentType:contentType content:content localContent:@"" chatDate:chatDate fileName:fileName aditInfo:jsonString unReadCnt:unRead contentPrev:@""];
                  [appDelegate.dbHelper crudStatement:sqlString];
               }
               
               NSDictionary *msgEditDic = [NSDictionary dictionary];
               int sendingArrIdx=0;
               //RMQ푸시받아서 선등록한 메시지 교체
               if(msgDataCnt > 0){
                  for(int i=0; i<self.sendingMsgArr.count; i++){
                     NSString *editInfo = [[self.sendingMsgArr objectAtIndex:i] objectForKey:@"ADIT_INFO"]; //메시지 데이터는 ADIT_INFO, 푸시 받은건 ADITINFO
                     NSData *jsonData = [editInfo dataUsingEncoding:NSUTF8StringEncoding];
                     NSDictionary *editDic = [NSJSONSerialization JSONObjectWithData:jsonData options:0 error:&error];
                     
                     NSString *editIdx = [editDic objectForKey:@"TMP_IDX"];
                     
                     //sendingMsgArr의 TMP_IDX와 푸시받은 데이터의 TMP_IDX가 같은지 비교
                     if(tmpIdx == [editIdx integerValue]){
                        //같으면 전체Array에서 TMP_IDX번째 데이터를 저장
                        msgEditDic = [self.msgData.chatArray objectAtIndex:[editIdx integerValue]];
                        sendingArrIdx = i;
                     }
                  }
                  
                  //전체Array의 TMP_IDX번째 데이터
                  NSString *msgEditInfo = [msgEditDic objectForKey:@"ADIT_INFO"];
                  if(msgEditInfo!=nil){
                     NSData *msgJsonData = [msgEditInfo dataUsingEncoding:NSUTF8StringEncoding];
                     NSDictionary *msgEditDic2 = [NSJSONSerialization JSONObjectWithData:msgJsonData options:0 error:&error];
                     NSString *msgEditIdx = [msgEditDic2 objectForKey:@"TMP_IDX"];
                     
                     //푸시 TMP_IDX와 전체Array의 TMP_IDX번째 데이터의 TMP_IDX가 같은지 비교
                     if(tmpIdx == [msgEditIdx integerValue]) {
                        NSString *logUserNo = [[self.msgData.chatArray objectAtIndex:[msgEditIdx integerValue]] objectForKey:@"USER_NO"];
                        
                        //전체Array의 TMP_IDX번째 데이터의 userNo, 내 userNo가 같은지 비교
                        if([[NSString stringWithFormat:@"%@", logUserNo] isEqualToString:[NSString stringWithFormat:@"%@", _myUserNo]]){
                           [self.msgData.chatArray replaceObjectAtIndex:[msgEditIdx integerValue] withObject:userInfoDic];
                           
                           NSIndexPath *reloadCell = [NSIndexPath indexPathForItem:[msgEditIdx integerValue] inSection:0];
                           [self.tableView beginUpdates];
                           [self.tableView reloadRowsAtIndexPaths:@[reloadCell] withRowAnimation:UITableViewRowAnimationNone];
                           [self.tableView endUpdates];
                           
#ifdef DEBUG
                           NSLog(@"4.테이블 갱신");
#endif
                           
                           [self.msgData.chatArray removeObjectAtIndex:[msgEditIdx integerValue]];
                           [self.msgData.chatArray insertObject:userInfoDic atIndex:(msgDataCnt-1)-(count+self.sendingMsgArr.count-1)];
                           
                           [self scrollToBottomAnimated:YES]; //채팅 빨리 보냈을 때 위로 올라가는게 완화됨
                           
                        } else {
                           for(int i=(int)msgDataCnt-1; i>=0; i--){
                              NSString *msgEditInfo = [[self.msgData.chatArray objectAtIndex:i] objectForKey:@"ADIT_INFO"];
                              NSData *msgJsonData = [msgEditInfo dataUsingEncoding:NSUTF8StringEncoding];
                              NSDictionary *msgEditDic = [NSJSONSerialization JSONObjectWithData:msgJsonData options:0 error:&error];
                              NSString *msgEditTy = [msgEditDic objectForKey:@"TYPE"];
                              NSString *msgTmpIdx = [msgEditDic objectForKey:@"TMP_IDX"];
                              
                              //전체 Array 역순으로 돌면서 SENDING이고 푸시 TMP_IDX와 전체Array의 TMP_IDX가 같은것을 찾음
                              if([msgEditTy isEqualToString:@"SENDING"] && tmpIdx == [msgTmpIdx integerValue]){
                                 NSString *logUserNo = [[self.msgData.chatArray objectAtIndex:i] objectForKey:@"USER_NO"];
                                 
                                 //찾은 Array의 userNo, 내 userNo가 같은지 비교
                                 if([[NSString stringWithFormat:@"%@", logUserNo] isEqualToString:[NSString stringWithFormat:@"%@", _myUserNo]]){
                                    [self.msgData.chatArray replaceObjectAtIndex:i withObject:userInfoDic];
                                    
                                    NSIndexPath *reloadCell = [NSIndexPath indexPathForItem:i inSection:0];
                                    [self.tableView beginUpdates];
                                    [self.tableView reloadRowsAtIndexPaths:@[reloadCell] withRowAnimation:UITableViewRowAnimationNone];
                                    [self.tableView endUpdates];
                                    
#ifdef DEBUG
                                    NSLog(@"4.테이블 갱신(전체)");
#endif
                                    [self scrollToBottomAnimated:YES];
                                    
                                    [self.msgData.chatArray removeObjectAtIndex:i];
                                    [self.msgData.chatArray insertObject:userInfoDic atIndex:(msgDataCnt-1)-(count+self.sendingMsgArr.count-1)];
                                    
                                 }
                                 break;
                              }
                           }
                        }
                        
                     } else {
                        //푸시 TMP_IDX와 전체Array의 TMP_IDX번째 데이터의 TMP_IDX가 다르면
                        for(int i=(int)msgDataCnt-1; i>=0; i--){
                           NSString *msgEditInfo = [[self.msgData.chatArray objectAtIndex:i] objectForKey:@"ADIT_INFO"];
                           NSData *msgJsonData = [msgEditInfo dataUsingEncoding:NSUTF8StringEncoding];
                           NSDictionary *msgEditDic = [NSJSONSerialization JSONObjectWithData:msgJsonData options:0 error:&error];
                           NSString *msgEditTy = [msgEditDic objectForKey:@"TYPE"];
                           NSString *msgTmpIdx = [msgEditDic objectForKey:@"TMP_IDX"];
                           
                           //전체 Array 역순으로 돌면서 SENDING이고 푸시 TMP_IDX와 전체Array의 TMP_IDX가 같은것을 찾음
                           if([msgEditTy isEqualToString:@"SENDING"] && tmpIdx == [msgTmpIdx integerValue]){
                              NSString *logUserNo = [[self.msgData.chatArray objectAtIndex:i] objectForKey:@"USER_NO"];
                              
                              //찾은 Array의 userNo, 내 userNo가 같은지 비교
                              if([[NSString stringWithFormat:@"%@", logUserNo] isEqualToString:[NSString stringWithFormat:@"%@", _myUserNo]]){
                                 [self.msgData.chatArray replaceObjectAtIndex:i withObject:userInfoDic];
                                 
                                 NSIndexPath *reloadCell = [NSIndexPath indexPathForItem:i inSection:0];
                                 [self.tableView beginUpdates];
                                 [self.tableView reloadRowsAtIndexPaths:@[reloadCell] withRowAnimation:UITableViewRowAnimationNone];
                                 [self.tableView endUpdates];
#ifdef DEBUG
                                 NSLog(@"4.테이블 갱신(전체)");
#endif
                                 [self scrollToBottomAnimated:YES];

                                 [self.msgData.chatArray removeObjectAtIndex:i];
                                 [self.msgData.chatArray insertObject:userInfoDic atIndex:(msgDataCnt-1)-(count+self.sendingMsgArr.count-1)];
                              }
                              break;
                           }
                        }
                     }
                     
                     [self.sendingMsgArr removeObjectAtIndex:sendingArrIdx];
                     
#ifdef DEBUG
                     NSLog(@"========================================================");
#endif
                  }
                  
               } else {
                  [self.msgData.chatArray addObject:userInfoDic];
               }
               
            } else if([pushType isEqualToString:@"ADD_CHAT_USER"]){
//               NSLog(@"[noti_Chat] : ADD_CHAT_USER");
               
            } else if([pushType isEqualToString:@"CREATE_CHAT_ROOM"]){
//               NSLog(@"[noti_Chat] : CREATE_CHAT_ROOM");
               
            } else{
               
            }
            
            if(appDelegate.isChatViewing) {
               [self socketCheck:@"CHAT_READ_STATUS" :nil :nil];
            }
            
         } else {
            //받은 메시지
            if([contentType isEqualToString:@"LONG_TEXT"]){
               NSString *sqlString = [appDelegate.dbHelper insertOrUpdateChats:chatNo roomNo:roomNo userNo:userNo contentType:contentType content:@"" localContent:@"" chatDate:chatDate fileName:fileName aditInfo:fileThumb unReadCnt:unRead contentPrev:content];
   
               [appDelegate.dbHelper crudStatement:sqlString];
               
            } else {
               NSString *sqlString = [appDelegate.dbHelper insertOrUpdateChats:chatNo roomNo:roomNo userNo:userNo contentType:contentType content:content localContent:@"" chatDate:chatDate fileName:fileName aditInfo:fileThumb unReadCnt:unRead contentPrev:@""];
               
               [appDelegate.dbHelper crudStatement:sqlString];
            }
#ifdef DEBUG
            NSLog(@"2.받은메시지 DB저장 : %@ / %@", content, chatDate);
#endif
            NSError *error;
            NSData *jsonData = [NSJSONSerialization dataWithJSONObject:aditInfoDic options:0 error:&error];
            NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
            [userInfoDic setObject:jsonString forKey:@"ADIT_INFO"];
            
            [self.msgData.chatArray insertObject:userInfoDic atIndex:msgDataCnt-(count+self.sendingMsgArr.count)];
            
#ifdef DEBUG
            NSLog(@"3.받은메시지 데이터 추가 (%lu) : %@ ", msgDataCnt-(count+self.sendingMsgArr.count), userInfoDic);
#endif
            NSIndexPath *lastCell = [NSIndexPath indexPathForItem:msgDataCnt inSection:0];
            [self.tableView beginUpdates];
            [self.tableView insertRowsAtIndexPaths:@[lastCell] withRowAnimation:UITableViewRowAnimationNone];
            [self.tableView endUpdates];
            
#ifdef DEBUG
            NSLog(@"4.받은메시지 테이블 갱신");
            NSLog(@"========================================================");
#endif
            //받은메시지 등록될 때 읽음처리
            if(appDelegate.isChatViewing) {
               [self socketCheck:@"CHAT_READ_STATUS" :nil :nil];
            }
            
            CGRect rectOfCellInTableView = [self.tableView rectForRowAtIndexPath:lastCell];
            CGRect rectOfCellInSuperview = [self.tableView convertRect: rectOfCellInTableView toView: self.tableView.superview];
            
            int rectSuperview = rectOfCellInSuperview.origin.y;
            int toolbarY = self.inputToolbar.frame.origin.y;
            
            if(rectSuperview > toolbarY){
               NSArray *subviewArray = [[NSBundle mainBundle] loadNibNamed:@"ChatToastView" owner:self options:nil];
               self.toastView = [subviewArray objectAtIndex:0];
               [self.toastView setFrame:CGRectMake(0, self.inputToolbar.frame.origin.y-60, self.tableView.frame.size.width, 60)];
               
               UIImage *image = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(50, 50) :[MFUtil saveThumbImage:@"Profile" :profileImg]];
               
               self.toastView.imgView.image = image; //[UIImage imageNamed:@"profile_default.png"];
               if([contentType isEqualToString:@"TEXT"]||[contentType isEqualToString:@"LONG_TEXT"]){
                  self.toastView.contentLabel.text = content;
               } else if([contentType isEqualToString:@"IMG"]){
                  //                    NSRange range = [content rangeOfString:@"." options:NSBackwardsSearch];
                  //                    NSString *fileExt = [[content substringFromIndex:range.location+1] lowercaseString];
                  //
                  //                    if([fileExt isEqualToString:@"png"] || [fileExt isEqualToString:@"jpg"] || [fileExt isEqualToString:@"jpeg"]||[fileExt isEqualToString:@"heic"]){
                  self.toastView.contentLabel.text = NSLocalizedString(@"chat_receive_image", @"chat_receive_image");
                  //                    }
                  
               } else if([contentType isEqualToString:@"VIDEO"]){
                  self.toastView.contentLabel.text = NSLocalizedString(@"chat_receive_video", @"chat_receive_video");
                  
               }  else if([contentType isEqualToString:@"FILE"]){
                  self.toastView.contentLabel.text = NSLocalizedString(@"chat_receive_file", @"chat_receive_file");
                  
               } else if([contentType isEqualToString:@"INVITE"]){
                  self.toastView.contentLabel.text = NSLocalizedString(@"chat_receive_invite", @"chat_receive_invite");
               } else {
                  self.toastView.contentLabel.text = content;
               }
               
               self.toastView.userLabel.text = userName;
               
               UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapOnToastView:)];
               [self.toastView addGestureRecognizer:tap];
               [self.toastView setUserInteractionEnabled:YES];
               
               for(UIView *subview in [self.view subviews]) {
                  if([subview isKindOfClass:[self.toastView class]]) {
                     [subview removeFromSuperview];
                  }
               }
               [self.view addSubview:self.toastView];
               
            } else {
               
               NSIndexPath *lastCell2 = [NSIndexPath indexPathForRow:([self.tableView numberOfRowsInSection:0]-1) inSection:0];
               [self.tableView scrollToRowAtIndexPath:lastCell2 atScrollPosition:UITableViewScrollPositionBottom animated:YES];
            }
         }
         
      } else {
#ifdef DEBUG
         NSLog(@"다른방메시지도착2");
#endif
         if(![[NSString stringWithFormat:@"%@", userNo] isEqualToString:[NSString stringWithFormat:@"%@", _myUserNo]]){
            if([contentType isEqualToString:@"LONG_TEXT"]){
               NSString *sqlString = [appDelegate.dbHelper insertOrUpdateChats2:chatNo roomNo:roomNo userNo:userNo contentType:contentType content:@"" localContent:@"" chatDate:chatDate fileName:fileName aditInfo:fileThumb isRead:@"0" unReadCnt:unRead contentPrev:content];
               [appDelegate.dbHelper crudStatement:sqlString];
               
            } else {
               NSString *sqlString = [appDelegate.dbHelper insertOrUpdateChats2:chatNo roomNo:roomNo userNo:userNo contentType:contentType content:content localContent:@"" chatDate:chatDate fileName:fileName aditInfo:fileThumb isRead:@"0" unReadCnt:unRead contentPrev:@""];
               [appDelegate.dbHelper crudStatement:sqlString];
               
            }
            
            if(![contentType isEqualToString:@"SYS"]){
               NSString *sqlString2 = [appDelegate.dbHelper updateRoomNewChat:1 roomNo:roomNo];
               [appDelegate.dbHelper crudStatement:sqlString2];
            }
         } else {
            if([contentType isEqualToString:@"LONG_TEXT"]){
               NSString *sqlString = [appDelegate.dbHelper insertOrUpdateChats2:chatNo roomNo:roomNo userNo:userNo contentType:contentType content:@"" localContent:@"" chatDate:chatDate fileName:fileName aditInfo:fileThumb isRead:@"1" unReadCnt:unRead contentPrev:content];
               
               [appDelegate.dbHelper crudStatement:sqlString];
               
            } else {
               NSString *sqlString = [appDelegate.dbHelper insertOrUpdateChats2:chatNo roomNo:roomNo userNo:userNo contentType:contentType content:content localContent:@"" chatDate:chatDate fileName:fileName aditInfo:fileThumb isRead:@"1" unReadCnt:unRead contentPrev:@""];
               
               [appDelegate.dbHelper crudStatement:sqlString];
            }
         }
      }
      
      if([self.fromSegue isEqualToString:@"SHARE_CHAT_MODAL"]||[self.fromSegue isEqualToString:@"SHARE_FROM_CHAT_MODAL"]||[self.fromSegue isEqualToString:@"SHARE_FROM_POST_MODAL"]){
         [self dismissViewControllerAnimated:YES completion:^(void){
            [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_ShareViewClose" object:nil];
         }];
      }
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
   
}

- (void)noti_APNS_ChatReadPush:(NSNotification *)notification {
#ifdef DEBUG
   NSLog(@"noti_APNS_ChatReadPush userInfo : %@", notification.userInfo);
#endif

   NSUInteger msgDataCnt = self.msgData.chatArray.count;
   
   @try{
      NSString *roomNo = [notification.userInfo objectForKey:@"ROOM_NO"];
      NSArray *dataSet = [notification.userInfo objectForKey:@"DATASET"];
      
      for(int i=0; i<dataSet.count; i++){
         NSString *chatNoList = [NSString urlDecodeString:[[dataSet objectAtIndex:i] objectForKey:@"CHAT_NO_LIST"]];
         NSNumber *unreadCnt = [[dataSet objectAtIndex:i] objectForKey:@"UNREAD_COUNT"];
         
         NSMutableArray *chatNoArr = [NSMutableArray array];
         if([chatNoList rangeOfString:@","].location != NSNotFound){
            chatNoArr = [[chatNoList componentsSeparatedByString:@","] mutableCopy];
         } else {
            [chatNoArr addObject:chatNoList];
         }
         
         if([[NSString stringWithFormat:@"%@", roomNo] isEqualToString:[NSString stringWithFormat:@"%@", self.roomNo]]){
            for(int i=0; i<msgDataCnt; i++){
               NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:i];
               NSString *chatNo = [msgDict objectForKey:@"CHAT_NO"];
               
               for(int j=0; j<chatNoArr.count; j++){
                  NSString *chatNo2 = [chatNoArr objectAtIndex:j];
                  if([chatNo integerValue] == [chatNo2 integerValue]){
                     [msgDict setValue:unreadCnt forKey:@"UNREAD_COUNT"];
                     
                     NSIndexPath *replaceCell = [NSIndexPath indexPathForItem:i inSection:0];
                     [self.tableView beginUpdates];
                     [self.tableView reloadRowsAtIndexPaths:@[replaceCell] withRowAnimation:UITableViewRowAnimationNone];
                     [self.tableView endUpdates];
                  }
               }
            }
         }
      }
      [[NSNotificationCenter defaultCenter] removeObserver:self name:@"noti_APNS_ChatReadPush" object:nil];
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)noti_ChatReadPush:(NSNotification *)notification {
#ifdef DEBUG
//   NSLog(@"noti_ChatReadPush userInfo : %@", notification.userInfo);
//   NSLog(@"noti_ChatReadPush roomNo : %@", self.roomNo);
#endif
   
   NSUInteger msgDataCnt = self.msgData.chatArray.count;
   
   @try{
      NSString *roomNo = [notification.userInfo objectForKey:@"ROOM_NO"];
      NSArray *dataSet = [notification.userInfo objectForKey:@"DATASET"];
      
      for(int i=0; i<dataSet.count; i++){
         NSString *chatNoList = [NSString urlDecodeString:[[dataSet objectAtIndex:i] objectForKey:@"CHAT_NO_LIST"]];
         NSNumber *unreadCnt = [[dataSet objectAtIndex:i] objectForKey:@"UNREAD_COUNT"];
         
         NSMutableArray *chatNoArr = [NSMutableArray array];
         if([chatNoList rangeOfString:@","].location != NSNotFound){
            chatNoArr = [[chatNoList componentsSeparatedByString:@","] mutableCopy];
         } else {
            [chatNoArr addObject:chatNoList];
         }
         
         if([[NSString stringWithFormat:@"%@", roomNo] isEqualToString:[NSString stringWithFormat:@"%@", self.roomNo]]){
            for(int i=0; i<msgDataCnt; i++){
               NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:i];
               NSString *chatNo = [msgDict objectForKey:@"CHAT_NO"];
               
               for(int j=0; j<chatNoArr.count; j++){
                  NSString *chatNo2 = [chatNoArr objectAtIndex:j];
                  if([chatNo integerValue] == [chatNo2 integerValue]){
                     [msgDict setValue:unreadCnt forKey:@"UNREAD_COUNT"];
                     
                     NSIndexPath *replaceCell = [NSIndexPath indexPathForItem:i inSection:0];
                     [self.tableView beginUpdates];
                     [self.tableView reloadRowsAtIndexPaths:@[replaceCell] withRowAnimation:UITableViewRowAnimationNone];
                     [self.tableView endUpdates];
                  }
               }
            }
            [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_ChangeChatBadge" object:nil userInfo:nil];
         }
      }
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)noti_ChatExit:(NSNotification *)notification {
   [self.navigationController popViewControllerAnimated:YES];
}

#pragma mark Album Photo/Video
- (void)getImageNotification:(NSNotification *)notification {
   @try {
      self.assetArray = [notification.userInfo objectForKey:@"ASSET_LIST"];
      
      NSArray *imageArray = [[NSArray alloc] initWithObjects:notification.userInfo, nil];
      NSArray *imgList = [[imageArray objectAtIndex:0] objectForKey:@"IMG_LIST"];
      if(imgList.count==1&&[mediaType isEqualToString:@"IMG"]){
         self.croppingStyle = TOCropViewCroppingStyleDefault;
         TOCropViewController *cropController = [[TOCropViewController alloc] initWithCroppingStyle:self.croppingStyle image:[imgList objectAtIndex:0]];
         cropController.delegate = self;
         self.image = [imgList objectAtIndex:0];
         [self presentViewController:cropController animated:YES completion:nil];
         
      } else {
         [self setChatData:imageArray :mediaType :YES];
      }
      
      [[NSNotificationCenter defaultCenter] removeObserver:self name:@"getImageNotification" object:nil];
     
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

#pragma mark - UIImagePickerController Delegate
- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker{
   [picker dismissViewControllerAnimated:YES completion:nil];
}

- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *,id> *)info{
   if ([[info objectForKey:UIImagePickerControllerMediaType] isEqualToString:@"public.movie"]) {
      NSURL *mediaUrl = [info objectForKey:UIImagePickerControllerMediaURL];
      [picker dismissViewControllerAnimated:YES completion:nil];
      
      if([appDelegate.legacy_name isEqualToString:@"NONE"]){
         UISaveVideoAtPathToSavedPhotosAlbum([mediaUrl path], self, @selector(video:didFinishSavingWithError:contextInfo:), nil);
         
      } else if([appDelegate.legacy_name isEqualToString:@"ANYMATE"]){
         UISaveVideoAtPathToSavedPhotosAlbum([mediaUrl path], self, @selector(video:didFinishSavingWithError:contextInfo:), nil);
         
      } else if([appDelegate.legacy_name isEqualToString:@"HHI"]){
         [self video:mediaUrl.absoluteString didFinishSavingWithError:nil contextInfo:nil];
      }
      
   }else{
      UIImage *image = [info objectForKey:UIImagePickerControllerOriginalImage];
      [picker dismissViewControllerAnimated:YES completion:nil];
      
      //현중 촬영이미지 저장 X
      if([appDelegate.legacy_name isEqualToString:@"NONE"]){
         UIImageWriteToSavedPhotosAlbum(image, self, @selector(image:didFinishSavingWithError:contextInfo:), nil);
         
      } else if([appDelegate.legacy_name isEqualToString:@"ANYMATE"]){
         UIImageWriteToSavedPhotosAlbum(image, self, @selector(image:didFinishSavingWithError:contextInfo:), nil);
         
      } else if([appDelegate.legacy_name isEqualToString:@"HHI"]){
         [self image:image didFinishSavingWithError:nil contextInfo:nil];
      }
   }
}

#pragma mark RealTime Video
- (void)video:(NSString *)videoPath didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo {
   if (error) {
#ifdef DEBUG
      NSLog(@"error: %@", [error localizedDescription]);
#endif
   } else {
      mediaType = @"VIDEO";
      AVURLAsset *asset = [AVURLAsset assetWithURL:[NSURL URLWithString:videoPath]];
      
      NSArray *assetArr = [[NSArray alloc] initWithObjects:asset, nil];
      NSArray *imgArr = [[NSArray alloc] initWithObjects:@"NONE", nil];
      
      NSMutableDictionary *assetDict = [NSMutableDictionary dictionary];
      [assetDict setObject:assetArr forKey:@"ASSET_LIST"];
      [assetDict setObject:imgArr forKey:@"IMG_LIST"];
      
      NSArray *videoArray = [[NSArray alloc] initWithObjects:videoPath, nil];
      [self setChatData:videoArray :mediaType :NO];
   }
}

#pragma mark RealTime Image
- (void)image:(UIImage *)image didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo{
   if (error) {
#ifdef DEBUG
      NSLog(@"error: %@", [error localizedDescription]);
#endif
   } else {
      mediaType = @"IMG";
      
      appDelegate.isChatViewing = YES;
      
      UIImage *rotateImg = nil;
      if(image.size.width>image.size.height){
         rotateImg = [MFUtil rotateImage:image byOrientationFlag:image.imageOrientation];
      } else {
         rotateImg = [MFUtil rotateImage90:image];
      }
      
      self.croppingStyle = TOCropViewCroppingStyleDefault;
      TOCropViewController *cropController = [[TOCropViewController alloc] initWithCroppingStyle:self.croppingStyle image:image];
      cropController.delegate = self;
      self.image = image;
      [self presentViewController:cropController animated:YES completion:nil];
   }
}

#pragma mark - Cropper Delegate
- (void)cropViewController:(TOCropViewController *)cropViewController didCropToImage:(UIImage *)image withRect:(CGRect)cropRect angle:(NSInteger)angle
{
   self.croppedFrame = cropRect;
   self.angle = angle;
   [self updateImageViewWithImage:image fromCropViewController:cropViewController];
}

- (void)cropViewController:(TOCropViewController *)cropViewController didCropToCircularImage:(UIImage *)image withRect:(CGRect)cropRect angle:(NSInteger)angle
{
   self.croppedFrame = cropRect;
   self.angle = angle;
   [self updateImageViewWithImage:image fromCropViewController:cropViewController];
}

- (void)updateImageViewWithImage:(UIImage *)image fromCropViewController:(TOCropViewController *)cropViewController
{
   if (image!=nil) {
      
      if (cropViewController.croppingStyle != TOCropViewCroppingStyleCircular) {
         //self.imageView.hidden = YES;
         [cropViewController dismissAnimatedFromParentViewController:self
                                                    withCroppedImage:image
                                                              toView:nil
                                                             toFrame:CGRectZero
                                                               setup:^{}
                                                          completion:^{
                                                             [self saveAttachedCropImage:image];
                                                          }];
      }
      
   }
}

#pragma mark - Chat Util
-(void)videoSizeCheck{
   uploadCnt = 0;
   resultArr = [NSMutableArray array];
   self.firstAddMsg = [NSMutableDictionary dictionary];
   self.fileNameArr = [NSMutableArray array];
   
   UIAlertController *alert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"upload_fail_title", @"upload_fail_title") message:NSLocalizedString(@"upload_fail_size_limit", @"upload_fail_size_limit") preferredStyle:UIAlertControllerStyleAlert];
   UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                    handler:^(UIAlertAction * action) {
                                                       [alert dismissViewControllerAnimated:YES completion:nil];
                                                    }];
   [alert addAction:okButton];
   [self presentViewController:alert animated:YES completion:nil];
}
-(NSString *)creatLocalChatFolder :(NSString *)type roomNo:(NSString *)roomNo chatDate:(NSString *)date{
   NSString *localPath = @"";
   
   NSString *bundleIdentifier = [[NSBundle mainBundle] bundleIdentifier];
   NSString *documentFolder = [NSString stringWithFormat:@"/%@/%@/%@", [NSHomeDirectory() stringByAppendingPathComponent:@"Documents"], bundleIdentifier, [appDelegate.appPrefs objectForKey:@"COMP_NO"]];
   
   NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
   [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
   NSDate *dfDate = [dateFormat dateFromString:date];
   
   NSDateFormatter *dateFormat2 = [[NSDateFormatter alloc] init];
   [dateFormat2 setDateFormat:@"yyyyMMdd"];
   NSString *currentTime = [dateFormat2 stringFromDate:dfDate];
   
   if(![type isEqualToString:@"TEXT"]){
      NSString *folder = @"";
      if([type isEqualToString:@"IMG"]) folder = @"Image";
      else if([type isEqualToString:@"VIDEO"]) folder = @"Video";
      else if([type isEqualToString:@"FILE"]) folder = @"File";
      
      localPath = [documentFolder stringByAppendingFormat:@"/Chat/%@/%@/.thumb/%@", roomNo, folder, currentTime];
      
      NSFileManager *fileManager = [NSFileManager defaultManager];
      BOOL issue = [fileManager isReadableFileAtPath:localPath];
      if (issue) {
         
      }else{
#ifdef DEBUG
         NSLog(@"[%@] directory can't read...Create Folder", localPath);
#endif
         [fileManager createDirectoryAtPath:localPath withIntermediateDirectories:YES attributes:nil error:nil];
      }
   }
   
   return localPath;
}
-(BOOL)checkExpireChatImg :(NSString *)chatDate{
   BOOL isExpire = NO;
   
   //오늘날짜
   NSDate *today = [NSDate date];
   NSDateFormatter *formatter = [[NSDateFormatter alloc]init];
   formatter.dateFormat = @"yyyy-MM-dd";
   
   NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
   [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
   NSDate *dfDate = [dateFormat dateFromString:chatDate];

   NSString *currentTime = [formatter stringFromDate:dfDate];

   //1.채팅 이미지 전송 날짜
   NSDate *startDate = [formatter dateFromString:currentTime];
   
   //2.채팅 이미지 전송 날짜로부터 90일
   NSDateComponents *dayComponent = [[NSDateComponents alloc] init];
   dayComponent.day = 90;
   NSCalendar *theCalendar = [NSCalendar currentCalendar];
   NSDate *endDate = [theCalendar dateByAddingComponents:dayComponent toDate:startDate options:0];
   
   //3.채팅 이미지 전송 날짜와 오늘 날짜 비교
   NSCalendar *sysCalendar = [NSCalendar currentCalendar];
   unsigned int unitFlags = NSCalendarUnitDay;
   NSDateComponents *dateComp = [sysCalendar components:unitFlags fromDate:today toDate:endDate options:0];//날짜 비교해서 차이값 추출
   NSInteger date = dateComp.day;
   
   if(date>=0){
      //유효
      isExpire = NO;
   } else {
      //만료
      isExpire = YES;
   }
   
   //return isExpire; //기능 추후에 사용
   return NO;
}

#pragma mark - Search Chat Content
- (void)searchChatContent:(NSString *)text{
   int searchCnt=0;
   NSUInteger msgDataCnt = self.msgData.chatArray.count;
   
   if(text!=nil && ![text isEqualToString:@""]){
      self.searchText = text;
      
      for(int i=0; i<msgDataCnt; i++){
         NSString *content = [NSString urlDecodeString:[[self.msgData.chatArray objectAtIndex:i] objectForKey:@"CONTENT"]];
         //if([text isEqualToString:content]){
         if([content rangeOfString:[NSString stringWithFormat:@"%@", text]].location != NSNotFound){
            searchCnt++;
         }
      }
      
      if(searchCnt<1){
         UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"검색결과가 없습니다." preferredStyle:UIAlertControllerStyleAlert];
         UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                          handler:^(UIAlertAction * action) {
                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                             [self resignFirstResponder];
                                                          }];
         [alert addAction:okButton];
         [self presentViewController:alert animated:YES completion:nil];
      }
      [self.tableView reloadData];
   }
}

- (void)closeSearchChat{
   if(self.searchText!=nil && ![self.searchText isEqualToString:@""]){
      self.searchText = nil;
      [self.tableView reloadData];
   }
}

#pragma mark - Keyboard events
- (void)keyboardWillAnimate:(NSNotification *)notification{
   CGRect keyboardBounds;
   [[notification.userInfo valueForKey:UIKeyboardFrameEndUserInfoKey] getValue:&keyboardBounds];
   NSNumber *duration = [notification.userInfo objectForKey:UIKeyboardAnimationDurationUserInfoKey];
   NSNumber *curve = [notification.userInfo objectForKey:UIKeyboardAnimationCurveUserInfoKey];
   
   keyboardBounds = [self.view convertRect:keyboardBounds toView:nil];
   [UIView beginAnimations:nil context:NULL];
   [UIView setAnimationDuration:[duration doubleValue]];
   [UIView setAnimationCurve:[curve intValue]];
   NSDictionary* info = [notification userInfo];
   //CGSize kbSize = [[info objectForKey:UIKeyboardFrameBeginUserInfoKey] CGRectValue].size;
   CGSize kbSize = [[info objectForKey:UIKeyboardFrameEndUserInfoKey] CGRectValue].size;
   
   if (@available(iOS 11.0, *)) {
      kbSize.height = kbSize.height - self.view.safeAreaInsets.bottom;
   } else {
      kbSize.height = kbSize.height;
   }
   
   if(kbSize.height==199) kbSize.height = 257; //아이폰X에서만 키보드 이슈가 생겨서
   
   if([self.fromSegue isEqualToString:@"SIDE_MENU_SEARCH"]) self.inputToolbar.hidden = YES;
   else self.inputToolbar.hidden = NO;
   
   if ([notification name]==UIKeyboardWillShowNotification) {
      self.keyboardHeight.constant = kbSize.height;
      
      if(msgDataCnt>0){
         if((int)self.tableView.contentOffset.y >= (int)tableBottom){
            //아래코드는 스크롤이 하단일 경우에만 사용, 스크롤 중간일때는 화면 내리지 않음
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
               NSInteger row = [self.tableView numberOfRowsInSection:0];
               NSIndexPath *indexPath = [NSIndexPath indexPathForRow:row-1 inSection:0];
               [self.tableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionBottom animated:YES];
            });
         }
      }
      [self.view layoutIfNeeded];
      
   } else if([notification name]==UIKeyboardWillHideNotification){
      self.keyboardHeight.constant = 0;
      
      if(msgDataCnt>0){
         if(self.tableView.contentOffset.y > tableBottom){
            //아래코드는 스크롤이 하단일 경우에만 사용, 스크롤 중간일때는 화면 내리지 않음
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
               NSInteger row = [self.tableView numberOfRowsInSection:0];
               NSIndexPath *indexPath = [NSIndexPath indexPathForRow:row-1 inSection:0];
               [self.tableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionBottom animated:YES];
            });
         }
      }
      [self.view layoutIfNeeded];
   }
   
   [UIView commitAnimations];
   self.fromSegue=nil;
}


- (void)scrollToBottomAnimated:(BOOL)animated {
   @try{
      if(self.msgData.chatArray.count > 0){
         //         NSInteger lastSection = [self.tableView numberOfSections]-1;
         //         NSInteger lastRow = [self.tableView numberOfRowsInSection:lastSection]-1;
         //         NSIndexPath *lastRowIndexPath =[NSIndexPath indexPathForRow:lastRow inSection:lastSection];
         //         [self.tableView selectRowAtIndexPath:lastRowIndexPath animated:YES scrollPosition:UITableViewScrollPositionBottom];
         //
         NSInteger row = [self.tableView numberOfRowsInSection:0];
         NSIndexPath *indexPath = [NSIndexPath indexPathForRow:row-1 inSection:0];
         [self.tableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionBottom animated:YES];
         
      } else {
         return;
      }
   } @catch(NSException *exception){
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

#pragma mark - UIScrollView Delegate
- (NSMutableArray *) loadMessage{
   rowCnt += CHAT_LOAD_COUNT;
   return [self.msgData readFromDatabase:rowCnt];
}

- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate{
   @try{
      CGRect screen = [[UIScreen mainScreen]bounds];
      CGFloat screenWidth = screen.size.width;
      CGFloat screenHeight = screen.size.height;
      if ([MFUtil retinaDisplayCapable]) {
         screenHeight = screenHeight*2;
         screenWidth = screenWidth*2;
      }
      
      if (scrollView.contentSize.height-scrollView.contentOffset.y<self.tableView.frame.size.height) {
         for(UIView *subview in [self.view subviews]) {
            if([subview isKindOfClass:[self.toastView class]]) {
               [subview removeFromSuperview];
            }
         }
         
      } else {
         
      }
      
   } @catch(NSException *exception){
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

- (void)scrollViewDidScroll:(UIScrollView *)scrollView{
   @try{
      CGFloat scrollOffsetY = scrollView.contentOffset.y;
      
      BOOL scOffset;
      if(@available(iOS 11, *)) {
         if(scrollOffsetY <= -REFRESH_HEADER_DEFAULT_HEIGHT) scOffset=true;
         else scOffset=false;
      } else {
         if(scrollOffsetY < -REFRESH_HEADER_DEFAULT_HEIGHT) scOffset=true;
         else scOffset=false;
      }
      
      NSIndexPath *indexPath = [NSIndexPath indexPathForRow:0 inSection:0];
      CGRect rectOfCellInTableView = [self.tableView rectForRowAtIndexPath:indexPath];
      CGRect rectOfCellInSuperview = [self.tableView convertRect:rectOfCellInTableView toView: self.tableView.superview];
      int loadPosition = (int)rectOfCellInSuperview.origin.y;

      beforeRowCnt = afterRowCnt;
      
      if(isScroll){
         if((int)scrollOffsetY == loadPosition){
            isScroll = NO;
            
            if(rowCnt<loadMsgCnt+CHAT_LOAD_COUNT){
               [self tabledraw];
            }
         }
      }
      
   } @catch(NSException *exception){
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}

-(void)tabledraw{
   if(rowCnt<loadMsgCnt+CHAT_LOAD_COUNT){
      loadMsgCnt = (int)[self loadMessage].count;
      
      afterRowCnt = loadMsgCnt;
      
      if(beforeRowCnt!=afterRowCnt){
         //메시지로드 후 데이터사이즈에 맞게 스크롤위치 조정
         CGSize beforeContentSize;
         CGSize afterContentSize;
         
         beforeContentSize = self.tableView.contentSize;
         [self.tableView reloadData];
         afterContentSize = self.tableView.contentSize;

         if(beforeContentSize.height < afterContentSize.height){
            CGPoint afterContentOffset = self.tableView.contentOffset;
            CGPoint newContentOffset = CGPointMake(afterContentOffset.x, afterContentOffset.y + afterContentSize.height - beforeContentSize.height);
            self.tableView.contentOffset = newContentOffset;
            
         } else{
            //로딩한 메시지 높이의 합이 보여지는 뷰보다 작을때는 스크롤을 제일 상단으로 올린다.
            //아니면 화면 새로고침해서 밑에서부터 주르륵 올라감.
            
            int tmp = loadMsgCnt - CHAT_LOAD_COUNT;
            if(tmp>0&&tmp<=CHAT_LOAD_COUNT){
               NSIndexPath *indexPath = [NSIndexPath indexPathForRow:tmp-1 inSection:0];
               [self.tableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionTop animated:NO];
            } else if(tmp>CHAT_LOAD_COUNT) {
               NSIndexPath *indexPath = [NSIndexPath indexPathForRow:tmp-CHAT_LOAD_COUNT inSection:0];
               [self.tableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionTop animated:NO];
            }
         }
         isScroll = YES;
      }
   }
}

// 테이블뷰를 드래깅 할 때 호출
- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView{
   
}

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
   [[NSNotificationCenter defaultCenter] addObserver:self
                                            selector:@selector(getImageNotification:)
                                                name:@"getImageNotification"
                                              object:nil];
   
   if ([[segue identifier] isEqualToString:@"CHAT_PHLIB_MODAL"]) {
      UINavigationController *destination = segue.destinationViewController;
      PHLibListViewController *vc = [[destination childViewControllers] objectAtIndex:0];
      vc.fromSegue = segue.identifier;
      vc.listType = sender;
      destination.modalPresentationStyle = UIModalPresentationOverFullScreen;
      
   } else if([segue.identifier isEqualToString:@"CHAT_FILE_OPEN_MODAL"]){
      
   }
}

-(NSMutableAttributedString *)textGetRanges:(NSString *)text keyword:(NSString *)keyword {
   NSDictionary *attrs = @{ NSBackgroundColorAttributeName : [UIColor redColor], NSForegroundColorAttributeName : [UIColor whiteColor], NSFontAttributeName : [UIFont systemFontOfSize:13] };
   NSMutableAttributedString *rangeStr = [[NSMutableAttributedString alloc] initWithString:text];
   
   NSRange searchRange = NSMakeRange(0,text.length);
   NSRange foundRange;
   
   while (searchRange.location < text.length) {
      searchRange.length = text.length-searchRange.location;
      foundRange = [text rangeOfString:keyword options:NSCaseInsensitiveSearch range:searchRange];
      if (foundRange.location != NSNotFound) {
         searchRange.location = foundRange.location+foundRange.length;
         [rangeStr addAttributes:attrs range:foundRange];
      } else {
         break;
      }
   }
   return rangeStr;
}

/*
-(void)checkDataNetwork:(int)type{
   [[AFNetworkReachabilityManager sharedManager] startMonitoring];
   [[AFNetworkReachabilityManager sharedManager] setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {
      if (status == AFNetworkReachabilityStatusNotReachable) {
//         NSLog(@"네트워크 사용 할 수 없음");
         network = @"No wifi or cellular";
      } else if (status == AFNetworkReachabilityStatusUnknown){
//         NSLog(@"네트워크 상태 알 수 없음");
         network = @"No wifi or cellular";
      } else {
         if (status == AFNetworkReachabilityStatusReachableViaWiFi) {
//            NSLog(@"와이파이");
            network = @"WIFI";
         } else if (status == AFNetworkReachabilityStatusReachableViaWWAN){
//            NSLog(@"3G/LTE 등 셀룰러 네트워크");
            network = @"Cellular";
         }
      }
   }];
}
*/

- (void)handyViewerOpen:(NSString *)filePath{
   @try{
      filePath = [filePath stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLFragmentAllowedCharacterSet]];
      
      NSString *platform = [[UIDevice currentDevice] modelName];
      NSRange range = NSMakeRange(7, 1);
      NSString *platformNumber = [platform substringWithRange:range];
      if([platformNumber isEqualToString:@"X"]){
         [[UIApplication sharedApplication] setStatusBarHidden:YES withAnimation:UIStatusBarAnimationNone];
      } else {
         [[UIApplication sharedApplication] setStatusBarHidden:NO withAnimation:UIStatusBarAnimationNone];
      }
      
      [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(receiveTestNotification:) name:@"HideImageViewer" object: nil];
      
      if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) {
         imageViewer = [[HISImageViewer alloc] initWithNibName:@"HISImageViewer" bundle:nil];
      } else {
         imageViewer = [[HISImageViewer alloc] initWithNibName:@"HISImageViewer_IPad" bundle:nil];
      }
      
      NSString *path = [NSString stringWithFormat:@"toiphoneapp://callDocumentFunction?fileName=%@&filePath=%@", [filePath lastPathComponent], filePath];
      if(imageViewer == nil) {
#ifdef DEBUG
         NSLog(@"imageViewer is nil");
#endif
      }
      
      NSString *BASE_URL = @"https://touch1.hhi.co.kr/";
      [imageViewer setBaseUrl:BASE_URL];
      [imageViewer setParamInformation:path];
      
      [[[UIApplication sharedApplication] keyWindow] addSubview:imageViewer.view];
      
   } @catch (NSException *exception) {
      NSLog(@"%s Exception : %@", __func__, exception);
   }
}
- (void) receiveTestNotification:(NSNotification *)notification {
   if([[notification name] isEqualToString:@"HideImageViewer"]) {
#ifdef DEBUG
      NSLog(@"receiveTestNotification");
#endif
      [[UIApplication sharedApplication] setStatusBarHidden:NO withAnimation:UIStatusBarAnimationNone];
      // 만일 이미지 뷰어가 종료되었을 때 이벤트를 받아서 처리할게 있다면 이곳에서 처리 한다.
      [imageViewer dismissViewControllerAnimated:YES completion:nil];
   }
}

#pragma mark - TTTAttributedLabel Delegate
- (void)attributedLabel:(TTTAttributedLabel *)label didSelectLinkWithURL:(NSURL *)url{
   [[UIApplication sharedApplication] openURL:url options:@{} completionHandler:^(BOOL success) {
      
   }];
}
-(void)attributedLabel:(TTTAttributedLabel *)label didSelectLinkWithPhoneNumber:(NSString *)phoneNumber{
   [[UIApplication sharedApplication] openURL:[NSURL URLWithString:[NSString stringWithFormat:@"telprompt://%@",phoneNumber]] options:@{} completionHandler:nil];
}


@end


