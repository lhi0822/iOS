//
//  IntroViewController.m
//  mfinity_sns
//
//  Created by hilee on 2017. 3. 7..
//  Copyright © 2017년 com.dbvalley. All rights reserved.
//

#import "IntroViewController.h"
#import "MFUtil.h"
#import "MFDBHelper.h"

#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v)  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)

@interface IntroViewController () {
    NSString *returnCode;
    AppDelegate *appDelegate;
    
    NSMutableDictionary *dictForMDM;
    SDImageCache *imgCache;
}
@end

@implementation IntroViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    appDelegate = (AppDelegate *)[UIApplication sharedApplication].delegate;
    appDelegate.ipAddr = [self getIPAddress];
    
    self.navigationController.navigationBarHidden = YES;
    self.introBg.image = [UIImage imageNamed:@"intro.png"];
    
    NSString *version = [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleShortVersionString"];
    self.verLabel.text = [NSString stringWithFormat:@"v %@", version];
    
    imgCache = [SDImageCache sharedImageCache];
    NSString *bundleIdentifier = [[NSBundle mainBundle] bundleIdentifier];
    NSString *cachePath = [NSString stringWithFormat:@"/%@/%@/%@/Cache", [NSHomeDirectory() stringByAppendingPathComponent:@"Documents"], bundleIdentifier, [appDelegate.appPrefs objectForKey:@"COMP_NO"]];
    [imgCache makeDiskCachePath:cachePath];
    
    /*테스트*******************/
//    [appDelegate.appPrefs setObject:@"BP15214" forKey:@"USERID"];
//    [appDelegate.appPrefs setObject:@"feel100101" forKey:[appDelegate setPreferencesKey:@"USERPWD"]];
//    [appDelegate.appPrefs setObject:@"BP15214" forKey:[appDelegate setPreferencesKey:@"DBNAME"]];
//    [appDelegate.appPrefs setObject:@"974EEC67-697C-48B9-B510-856699FDE590" forKey:[appDelegate setPreferencesKey:@"DVCID"]]; //iphone7+
//
//    [appDelegate.appPrefs setObject:@"NOT_SET" forKey:[appDelegate setPreferencesKey:@"SETLOCALDB"]];
//    [appDelegate.appPrefs setObject:@"HIGH" forKey:[appDelegate setPreferencesKey:@"IMGQUALITY"]];
//    [appDelegate.appPrefs setObject:@"1" forKey:[appDelegate setPreferencesKey:@"NOTINEWPOST"]];
//    [appDelegate.appPrefs setObject:@"1" forKey:[appDelegate setPreferencesKey:@"NOTINEWCOMM"]];
//    [appDelegate.appPrefs setObject:@"1" forKey:[appDelegate setPreferencesKey:@"NOTINEWCHAT"]];
//
//    [appDelegate.appPrefs synchronize];
    /************************/
    
#ifdef DEBUG
    NSLog(@"INTRO DVC_ID : %@", [appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"DVCID"]]);
#endif
    
    if(appDelegate.isMDM){
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_MDMExcuteNextPage:) name:@"noti_MDMExcuteNextPage" object:nil];
        dictForMDM = [NSMutableDictionary dictionary];
    }
    
    [self setTimer];
}

-(void)setTimer{
    count = 0;
    endCount = 1;
    myTimer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(handleTimer:) userInfo:nil repeats:YES];
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
}

-(void)handleTimer:(NSTimer *)timer {
    count++;
    
    userId = [appDelegate.appPrefs objectForKey:@"USERID"];
    userPwd = [appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"USERPWD"]];
    
    legacyNm = appDelegate.legacy_name;
    
    if(appDelegate.isMDM){
        NSURL *url = [NSURL URLWithString:@"com.gaia.mobikit.apple://"];

        if (![[UIApplication sharedApplication] canOpenURL:url]) {
            UIAlertController * alert = [UIAlertController alertControllerWithTitle:@"" message:@"MDM이 설치되지 않았습니다." preferredStyle:UIAlertControllerStyleAlert];
            [self presentViewController:alert animated:YES completion:nil];
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                [alert dismissViewControllerAnimated:YES completion:nil];

                NSURL *url = [NSURL URLWithString:@"https://mdm.hhi.co.kr/mdm_admin_server/download"];
                [[UIApplication sharedApplication] openURL:url options:@{} completionHandler:^(BOOL success) {}];
                exit(0);
            });
        }else{
            if (count==endCount) {
                [self loginCheck];
                [myTimer invalidate];
            }
        }
    } else {
        if (count==endCount) {
            [self loginCheck];
            [myTimer invalidate];
        }
    }
}

- (void)loginCheck{
    if([legacyNm isEqualToString:@"HHI"]){
        if(appDelegate.use30dayLogin){
//            [appDelegate.appPrefs setObject:@"2019-04-28" forKey:[appDelegate setPreferencesKey:@"AUTOLOGINDATE"]];
//            [appDelegate.appPrefs synchronize];
            
#ifdef DEBUG
            NSLog(@"AUTO_LOGIN_DATE : %@", [appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"AUTOLOGINDATE"]]);
#endif
            
            //오늘날짜
            NSDate *today = [NSDate date];
            NSDateFormatter *formatter = [[NSDateFormatter alloc]init];
            formatter.dateFormat = @"yyyy-MM-dd";
            
            if([appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"AUTOLOGINDATE"]]==nil||[[appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"AUTOLOGINDATE"]] isEqual:@""]||[[appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"AUTOLOGINDATE"]] isEqual:@"(null)"]||[[appDelegate.appPrefs objectForKey:@"{@AUTO_LOGIN_DATE}"] isEqual:@""]){
                NSString *snsDate = [formatter stringFromDate:today];
                [appDelegate.appPrefs setObject:snsDate forKey:[appDelegate setPreferencesKey:@"AUTOLOGINDATE"]];
                [appDelegate.appPrefs synchronize];
            }
            
            //1.자동로그인 시작 날짜
            NSDate *startDate = [formatter dateFromString:[appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"AUTOLOGINDATE"]]];
            
            //2.자동로그인 시작날짜로부터 30일
            NSDateComponents *dayComponent = [[NSDateComponents alloc] init];
            dayComponent.day = 30;
            NSCalendar *theCalendar = [NSCalendar currentCalendar];
            NSDate *endDate = [theCalendar dateByAddingComponents:dayComponent toDate:startDate options:0];
            
            //3.자동로그인30일과 오늘 날짜 비교
            NSCalendar *sysCalendar = [NSCalendar currentCalendar];
            unsigned int unitFlags = NSCalendarUnitDay;
            NSDateComponents *dateComp = [sysCalendar components:unitFlags fromDate:today toDate:endDate options:0];//날짜 비교해서 차이값 추출
            NSInteger date = dateComp.day;
            
            if(date>=0){
#ifdef DEBUG
                NSLog(@"자동로그인 유효--------------------");
#endif
                if(userId!=nil&&userPwd!=nil&&![userId isEqualToString:@""]&&![userPwd isEqualToString:@""]){
#ifdef DEBUG
                    NSLog(@"터치원 정보있음");
#endif
                    [self callWebService];
                    
                } else {
                    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:NSLocalizedString(@"login_not_info", @"login_not_info") preferredStyle:UIAlertControllerStyleAlert];
                    UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * action) {
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                         exit(0);
                                                                     }];
                    [alert addAction:okButton];
                    [self presentViewController:alert animated:YES completion:nil];
                }
                
            } else {
#ifdef DEBUG
                NSLog(@"자동로그인 만료--------------------");
#endif
                
                UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:NSLocalizedString(@"auto_login_expired", @"auto_login_expired") preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction * action) {
                                                                     [alert dismissViewControllerAnimated:YES completion:nil];
                                                                     
                                                                     [[UIApplication sharedApplication] openURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@://",appDelegate.hhiScheme]] options:@{} completionHandler:^(BOOL success) {
                                                                         if(!success){
                                                                             NSURL *browser;
                                                                             if([appDelegate.dvcType isEqualToString:@"DEV"]) browser = [NSURL URLWithString:@"https://dev.hhi.co.kr:44175/deploy"];
                                                                             else if([appDelegate.dvcType isEqualToString:@"ENT"]) browser = [NSURL URLWithString:@"https://touch1.hhi.co.kr/deploy"];
                                                                             [[UIApplication sharedApplication] openURL:browser options:@{} completionHandler:nil];
                                                                             
                                                                         } else {
                                                                             NSString *stringURLScheme = [[NSBundle mainBundle] bundleIdentifier];
                                                                             NSString *callUrl = [NSString stringWithFormat:@"%@://?call=%@&", appDelegate.hhiScheme,stringURLScheme];
                                                                             [[UIApplication sharedApplication] openURL:[NSURL URLWithString:callUrl] options:@{} completionHandler:nil];
                                                                         }
                                                                     }];
                                                                 }];
                [alert addAction:okButton];
                [self presentViewController:alert animated:YES completion:nil];
            }
            
        } else {
            if(userId!=nil&&userPwd!=nil&&![userId isEqualToString:@""]&&![userPwd isEqualToString:@""]){
#ifdef DEBUG
                NSLog(@"터치원 정보있음");
#endif
                [self callWebService];
                
            } else {
                UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:NSLocalizedString(@"login_not_info", @"login_not_info") preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction * action) {
                                                                     [alert dismissViewControllerAnimated:YES completion:nil];
                                                                     exit(0);
                                                                 }];
                [alert addAction:okButton];
                [self presentViewController:alert animated:YES completion:nil];
            }
        }
    } else {
        [self callWebService];
    }
}
-(void)enterWorkApp{
    appDelegate.mdmCallAPI = @"enterWorkApp";

    NSString *stringURLScheme = [[NSBundle mainBundle] bundleIdentifier];
    NSMutableString * urlString = [NSMutableString stringWithFormat:@"com.gaia.mobikit.apple://?command=enterWorkApp"];
    [urlString appendFormat:@"&caller=%@", stringURLScheme];
    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:urlString] options:@{} completionHandler:^(BOOL success) {}];
}

-(void)getMDMExageInfo:(NSString*)command{
    appDelegate.isExcuteMDM = YES;
    
    NSString *stringURLScheme = [[NSBundle mainBundle] bundleIdentifier];
    if (stringURLScheme) {
        NSMutableString * urlString = [NSMutableString stringWithFormat:@"com.gaia.mobikit.apple://?command=%@",command];
        [urlString appendFormat:@"&caller=%@", stringURLScheme];
#ifdef DEBUG
        NSLog(@"INTRO MDM urlString : %@",urlString);
#endif
        [[UIApplication sharedApplication] openURL:[NSURL URLWithString:urlString] options:@{} completionHandler:nil];
    }
    else{
        NSLog(@"현재 앱에 URL Scheme 이 지정되어 있지 않아 호출할 수 없습니다. URL Scheme 지정해야 결과를 응답받을 수 있습니다.");

        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"현재 앱에 URL Scheme 이 지정되어 있지 않아 호출할 수 없습니다. URL Scheme 지정해야 결과를 응답받을 수 있습니다." preferredStyle:UIAlertControllerStyleAlert];
        UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                         handler:^(UIAlertAction * action) {
                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                         }];
        [alert addAction:okButton];
        [self presentViewController:alert animated:YES completion:nil];
    }
}
- (void)nextPage {
    if ([appDelegate.appPrefs objectForKey:@"USERID"] != nil) {
        UITabBarController *rootViewController = appDelegate.tabBarController; 
        //rootViewController.selectedIndex = 0; //처음에 보여질 탭 설정
        
#ifdef DEBUG
        NSLog(@"LASTTABITEM : %@", [appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"LASTTABITEM"]]);
#endif
        //TABARR를 가져와서 라스트아이템이 몇번째에 있는지 확인, 그 인덱스를 처음 시작할때 사용하면 됨
        NSArray *tabArr = [appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"TABITEM"]];
        NSUInteger tabIdx = [tabArr indexOfObject:[appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"LASTTABITEM"]]];
        rootViewController.selectedIndex = tabIdx;
        
        //채팅 탭 배지카운트 표시============================================================
        NSMutableArray *selectArr = [appDelegate.dbHelper selectRoomList];
        
        int badgeCnt=0;
        for(int i=0; i<selectArr.count; i++){
            int notReadCnt = [[[selectArr objectAtIndex:i]objectForKey:@"NOT_READ_COUNT"] intValue];
            badgeCnt+=notReadCnt;
        }
        
        NSUInteger tabCount = rootViewController.tabBar.items.count;
        for(int i=0; i<tabCount; i++){
            if([rootViewController.tabBar.items objectAtIndex:i].tag == 3){
                if(badgeCnt>0 && badgeCnt<100) {
                    [rootViewController.tabBar.items objectAtIndex:i].badgeValue = [NSString stringWithFormat:@"%d", badgeCnt];
                    //[rootViewController.tabBar.items objectAtIndex:2].badgeColor = [MFUtil myRGBfromHex:@"FB8C26"];
                    if(SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"9.0")) [rootViewController.tabBar.items objectAtIndex:i].badgeColor = [MFUtil myRGBfromHex:@"FB8C26"];
                } else if(badgeCnt==0){
                    [rootViewController.tabBar.items objectAtIndex:i].badgeValue = nil;
                } else {
                    [rootViewController.tabBar.items objectAtIndex:i].badgeValue = @"99+";
                    //[rootViewController.tabBar.items objectAtIndex:2].badgeColor = [MFUtil myRGBfromHex:@"FB8C26"];
                    if(SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"9.0")) [rootViewController.tabBar.items objectAtIndex:i].badgeColor = [MFUtil myRGBfromHex:@"FB8C26"];
                }
            }
        }
        //=============================================================================

        [[UIApplication sharedApplication].keyWindow setRootViewController:rootViewController];
//        rootViewController.modalPresentationStyle = UIModalPresentationFullScreen;
//        [self presentViewController:rootViewController animated:YES completion:nil];
        
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            if([appDelegate.appPrefs objectForKey:@"SHARE_INFO"]!=nil){
                [rootViewController presentViewController:[MFUtil showToShareView] animated:YES completion:nil];
            }
        });
    }
}

- (void)callWebService{
    NSString *urlString = appDelegate.main_url;
    userId = [appDelegate.appPrefs objectForKey:@"USERID"];
    userPwd = [appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"USERPWD"]];
    dvcId = [appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"DVCID"]];
    isRooted = [MFUtil isRooted]?@"Y":@"N";
    pushId1 = [appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"PUSHID1"]];
    
    UIDevice *device = [UIDevice currentDevice];
    dvcOs = device.systemName;
    dvcKind = [device modelName];
    
    appVersion = [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleShortVersionString"];
    //NSLog(@"appVersion1 : %@", appVersion);
    
    legacyNm = appDelegate.legacy_name;
    cpnCode = [appDelegate.appPrefs objectForKey:@"CPN_CODE"];
    
#ifdef DEBUG
    NSLog(@"INTRO url : %@, legacy : %@", appDelegate.main_url, appDelegate.legacy_name);
#endif
    
    CTTelephonyNetworkInfo *networkInfo = [[CTTelephonyNetworkInfo alloc] init];
    CTCarrier *ctCarrier = [networkInfo subscriberCellularProvider];
    
    //총 용량
    float totalSpace = 0.0f;
    NSString *totalVolume;
    NSError *error = nil;
    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSDictionary *dictionary = [[NSFileManager defaultManager] attributesOfFileSystemForPath:[paths lastObject] error:&error];
    if (dictionary) {
        NSNumber *fileSystemSizeInBytes = [dictionary objectForKey:NSFileSystemSize];
        totalSpace = [fileSystemSizeInBytes floatValue];
        totalVolume = [NSString stringWithFormat:@"%0.0f",totalSpace];
        //totalSpace = ((totalSpace/1024)/1024)/1024;
    }
    //사용 용량
    float availableDisk;
    NSArray *path = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    struct statfs tStats;
    statfs([[path lastObject] UTF8String], &tStats);
    availableDisk = (float)(tStats.f_bavail * tStats.f_bsize);
    
    dvcVer = device.systemVersion;
    carrier = [ctCarrier carrierName]; if(carrier==nil)carrier = @"-";
    extRam = @"N";
    extTotVol = @"0";
    extUseVol = @"0";
    useVol = [NSString stringWithFormat:@"%0.0f",availableDisk];
    
    NSString *compNo = [appDelegate.appPrefs objectForKey:@"COMP_NO"];
    
    NSString *paramString = [NSString stringWithFormat:@"usrId=%@&usrPwd=%@&dvcId=%@&dvcOs=%@&appVersion=%@&dvcKind=%@&isRooted=%@&pushId1=%@&pushId2=-&legacyNm=%@&compNo=%@&appType=%@&dvcType=%@&dvcVer=%@", userId, userPwd, dvcId, dvcOs, appVersion, dvcKind, isRooted, pushId1, legacyNm, compNo, appDelegate.appType, appDelegate.dvcType,dvcVer];
    
    if([legacyNm isEqualToString:@"ANYMATE"]){
        //paramString = [paramString stringByAppendingString:[NSString stringWithFormat:@"&cpnCode=%@&compNo=10&dvcVer=%@&carrier=%@&extRam=%@&extTotVol=%@&extUseVol=%@&useVol=%@", cpnCode, dvcVer, carrier, extRam, extTotVol, extUseVol, useVol]];
        paramString = [paramString stringByAppendingString:[NSString stringWithFormat:@"&cpnCode=%@&compNo=10&carrier=%@&extRam=%@&extTotVol=%@&extUseVol=%@&useVol=%@", cpnCode, carrier, extRam, extTotVol, extUseVol, useVol]];
    }
    
    NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"chkUsrLogin"]];
    MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
    session.delegate = self;
    [session start];
}

-(void)anymateLogin{
    NSString *cpnUrl = [appDelegate.appPrefs objectForKey:@"URL"];
    NSString *_urlString = [NSString stringWithFormat:@"%@/m/main/",cpnUrl];
    NSURL *url2 = [NSURL URLWithString:_urlString];
    
    NSString *paramString2 = [NSString stringWithFormat:@"id=%@&pass=%@&sel_cpn_code=%@&mode=login&token=%@&os_type=I&device_id=%@&model_nm=%@&ver=beacon",userId,userPwd,cpnCode,pushId1,dvcId,dvcKind];
    
    NSData *postData = [paramString2 dataUsingEncoding:NSUTF8StringEncoding allowLossyConversion:YES];
    NSMutableURLRequest *request = [[NSMutableURLRequest alloc]initWithURL:url2];
    [request setHTTPMethod:@"POST"];
    [request setHTTPBody: postData];
    [request setTimeoutInterval:10.0];
    NSURLConnection *urlConnection = [[NSURLConnection alloc]initWithRequest:request delegate:self];
    [urlConnection start];
}

- (void)callChangeDevice{
    NSString *urlString = appDelegate.main_url;
    NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"changeDevice"]];
    
    NSMutableDictionary *userInfo = [NSMutableDictionary dictionary];
    [userInfo setObject:userId forKey:@"USER_ID"];
    
    NSString *paramString = [NSString stringWithFormat:@"dvcId=%@&dvcKind=%@&dvcOs=%@&appVersion=%@&dvcVer=%@&carrier=%@&extRam=%@&extTotVol=%@&extUseVol=%@&useVol=%@&pushId1=%@&pushId2=-&isRooted=%@&usrId=%@&usrPwd=%@&legacyNm=%@&appType=%@&dvcType=%@", dvcId, dvcKind, dvcOs, appVersion, dvcVer, carrier, extRam, extTotVol, extUseVol, useVol, pushId1, isRooted, userId, userPwd, legacyNm, appDelegate.appType, appDelegate.dvcType];
    
    if([legacyNm isEqualToString:@"ANYMATE"]){
        paramString = [paramString stringByAppendingString:[NSString stringWithFormat:@"&cpnCode=%@&compNo=10", cpnCode]];
        
    } else if([legacyNm isEqualToString:@"HHI"]){
        
    }
    
    MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
    session.delegate = self;
    [session start];
}

- (void)noti_MDMExcuteNextPage:(NSNotification *)notification{
    [self introConnectServer:dictForMDM];
//    [self nextPage];
    [self teamAndUserDataSetting];
    dictForMDM = [NSMutableDictionary dictionary];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"noti_MDMExcuteNextPage" object:nil];
}

#pragma mark - NSURLSession Delegate
- (void)returnDataWithObject:(MFURLSession *)session error:(NSString *)error{
    [SVProgressHUD dismiss];
    if (error!=nil&&![error isEqualToString:@""]) {
        [self reconnectFromError];
        
    }else{
        NSDictionary *dataSet = [[session.returnDictionary objectForKey:@"DATASET"]objectAtIndex:0];
        NSString *wsName = [[session.url absoluteString] lastPathComponent];
//        NSLog(@"wsName : %@", wsName);
        
        dictForMDM = [[NSMutableDictionary alloc] initWithDictionary:dataSet];
        
        if([wsName isEqualToString:@"changePublicPushId"]){
//            NSLog(@"changePublicPushId");
            
        } else if([wsName isEqualToString:@"getUserSNSLists"]){
//            NSLog(@"getUserSNSLists : %@", session.returnDictionary);
            
            NSMutableArray *normalArr = [session.returnDictionary objectForKey:@"DATASET"];
            if(normalArr.count>0) {
                for(int i=0; i<normalArr.count; i++){
                    NSDictionary *dataSet = [normalArr objectAtIndex:i];
                    NSString *snsType = [dataSet objectForKey:@"SNS_TY"];
                    NSString *snsNo = [dataSet objectForKey:@"SNS_NO"];
                    NSString *snsName = [NSString urlDecodeString:[dataSet objectForKey:@"SNS_NM"]];
                    NSString *needAllow = [dataSet objectForKey:@"NEED_ALLOW"];
                    NSString *snsDesc = [NSString urlDecodeString:[dataSet objectForKey:@"SNS_DESC"]];
                    NSString *coverImg = [NSString urlDecodeString:[dataSet objectForKey:@"COVER_IMG"]];
                    NSString *createUserNo = [dataSet objectForKey:@"CREATE_USER_NO"];
                    NSString *createDate = [NSString urlDecodeString:[dataSet objectForKey:@"CREATE_DATE"]];
                    NSString *compNo = [dataSet objectForKey:@"COMP_NO"];
                    NSString *snsKind = [dataSet objectForKey:@"SNS_KIND"];
                    NSString *createUserNm = [NSString urlDecodeString:[dataSet objectForKey:@"CREATE_USER_NM"]];
                    NSString *userCount = [dataSet objectForKey:@"USER_COUNT"];
                    NSString *waitingCount = [dataSet objectForKey:@"WAITING_USER_COUNT"];
                    NSString *itemType = [dataSet objectForKey:@"ITEM_TYPE"];
                    
                    NSString *userList = [NSString urlDecodeString:[dataSet objectForKey:@"USER_LIST"]];
                    NSData *jsonData = [userList dataUsingEncoding:NSUTF8StringEncoding];
                    NSError *error;
                    NSArray *userArr = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
                    for(int i=0; i<userArr.count; i++){
                        NSString *sqlStr = [appDelegate.dbHelper insertSnsUser:snsNo userNo:[userArr objectAtIndex:i]];
                        [appDelegate.dbHelper crudStatement:sqlStr];
                    }
                    
                    if(![coverImg isEqualToString:@""]&&![coverImg isEqualToString:@"null"]&&coverImg!=nil){
                        UIImage *image = [MFUtil saveThumbImage:@"Cover" :coverImg];
                        if(image!=nil){
                            UIImage *postCover = [MFUtil imageByScalingAndCroppingForSize:CGSizeMake(90, 90) :image];
                            [imgCache storeImage:postCover forKey:coverImg toDisk:YES];
                        }
                    }
                                    
                    NSMutableArray *selectArr = [appDelegate.dbHelper selectMutableArray:[appDelegate.dbHelper getSnsNo:snsNo]];
                    if(selectArr.count>0){
                        //POST_NOTI INTEGER DEFAULT 1, COMMENT_NOTI
                        NSString *sqlString = [appDelegate.dbHelper updateSnsInfo:snsName snsType:snsType needAllow:needAllow snsDesc:snsDesc coverImg:coverImg snsNo:snsNo];
                        [appDelegate.dbHelper crudStatement:sqlString];
                        
                        NSString *sqlString2 = [appDelegate.dbHelper updateSnsMemberInfo:createUserNo createUserNm:createUserNm userCount:userCount waitingCount:waitingCount itemType:itemType snsNo:snsNo];
                        [appDelegate.dbHelper crudStatement:sqlString2];

                    } else {
//                        NSString *sqlString = [appDelegate.dbHelper insertOrUpdateSns:snsNo snsName:snsName snsType:snsType needAllow:needAllow snsDesc:snsDesc coverImg:coverImg createUser:createUser createDate:createDate compNo:compNo snsKind:snsKind];
                        NSString *sqlString = [appDelegate.dbHelper insertOrUpdateSns:snsNo snsName:snsName snsType:snsType needAllow:needAllow snsDesc:snsDesc coverImg:coverImg createUserNo:createUserNo createUserNm:createUserNm createDate:createDate compNo:compNo snsKind:snsKind userCount:userCount waitingCount:waitingCount itemType:itemType];
                        [appDelegate.dbHelper crudStatement:sqlString];
                    }
                }
                
            } else {
                
            }
            [self nextPage];
            
        } else {
            if ([[session.returnDictionary objectForKey:@"RESULT"] isEqualToString:@"SUCCESS"]) {
#ifdef DEBUG
                NSLog(@"[RESULT_CODE] : %@", [dataSet objectForKey:@"RESULT_CODE"]);
#endif
                if ([[dataSet objectForKey:@"RESULT_CODE"] intValue] == 1) {
                    //SUCCEED
                    [appDelegate.appPrefs setObject:[dataSet objectForKey:@"COMP_NM"] forKey:[appDelegate setPreferencesKey:@"COMPNM"]];
                    [appDelegate.appPrefs setObject:[dataSet objectForKey:@"COMP_NO"] forKey:@"COMP_NO"];
                    [appDelegate.appPrefs setObject:[dataSet objectForKey:@"CUSER_NO"] forKey:[appDelegate setPreferencesKey:@"CUSERNO"]];
                    [appDelegate.appPrefs setObject:[dataSet objectForKey:@"USER_NM"] forKey:[appDelegate setPreferencesKey:@"USERNM"]];
                    [appDelegate.appPrefs setObject:[dataSet objectForKey:@"DEPT_NM"] forKey:[appDelegate setPreferencesKey:@"DEPTNM"]];
                    [appDelegate.appPrefs setObject:[dataSet objectForKey:@"DEPT_NO"] forKey:[appDelegate setPreferencesKey:@"DEPTNO"]];
                    [appDelegate.appPrefs synchronize];
                    
                    NSUserDefaults *notiDefaults = [[NSUserDefaults alloc] initWithSuiteName:appDelegate.notiGroupName];
                    [notiDefaults setObject:[dataSet objectForKey:@"USER_NM"] forKey:[appDelegate setPreferencesKey:@"USERNM"]];
                    [notiDefaults synchronize];
                    
                    if([legacyNm isEqualToString:@"ANYMATE"]){
                        [self anymateLogin];
                        
                    } else if([legacyNm isEqualToString:@"HHI"]){
                      
                    }
                    
                    NSString *isUpgrade = [dataSet objectForKey:@"IS_UPGRADE"];
                    appDelegate.compareAppVer = isUpgrade;
                    NSString *deployURL = [dataSet objectForKey:@"DEPLOY_URL"];
                    appDelegate.downAppUrl = deployURL;
                    
                    if([isUpgrade isEqualToString:@"UPGRADE"]){
                        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@""  message:NSLocalizedString(@"app_is_upgrade_for_hhi", @"app_is_upgrade_for_hhi") preferredStyle:UIAlertControllerStyleAlert];
                        UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                                         handler:^(UIAlertAction * action) {
                                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                                             
                                                                             NSString *stringURLScheme = [[NSBundle mainBundle] bundleIdentifier];
                                                                             NSString *callUrl = [NSString stringWithFormat:@"%@://?call=%@&", appDelegate.hhiScheme,stringURLScheme];
                                                                             [[UIApplication sharedApplication] openURL:[NSURL URLWithString:callUrl] options:@{} completionHandler:^(BOOL success) {exit(0);}];
                                                                         }];
                        [alert addAction:okButton];
                        [self presentViewController:alert animated:YES completion:nil];
                        
                    } else if([isUpgrade isEqualToString:@"DOWNGRADE"]){
                        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@""  message:NSLocalizedString(@"app_is_downgrade_for_hhi", @"app_is_downgrade_for_hhi") preferredStyle:UIAlertControllerStyleAlert];
                        UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                                         handler:^(UIAlertAction * action) {
                                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                                             
                                                                             NSString *stringURLScheme = [[NSBundle mainBundle] bundleIdentifier];
                                                                             NSString *callUrl = [NSString stringWithFormat:@"%@://?call=%@&", appDelegate.hhiScheme,stringURLScheme];
                                                                             [[UIApplication sharedApplication] openURL:[NSURL URLWithString:callUrl] options:@{} completionHandler:^(BOOL success) {}];
                                                                             exit(0);
                                                                         }];
                        [alert addAction:okButton];
                        [self presentViewController:alert animated:YES completion:nil];
                        
                    } else {
                        appDelegate.isLogin = YES;
                        if(appDelegate.isMDM){
                            [self getMDMExageInfo:@"queries_getStatus_getRichStatus_enterWorkApp"];

                            appDelegate.mdmCallAPI = @"enterWorkApp";

                        } else {
                            [self introConnectServer:dataSet];
//                            [self nextPage];
                            [self teamAndUserDataSetting];
                        }
                    }
                    
                } else if([[dataSet objectForKey:@"RESULT_CODE"] intValue] == 10){
                    //NOTMATCH_DEVICE
                    UIAlertController *alert = [UIAlertController alertControllerWithTitle:nil
                                                                                   message:NSLocalizedString(@"등록된 기기와 일치하지않은 기기입니다. 등록된 기기를 삭제하고 새로 등록하시겠습니까?", @"")
                                                                            preferredStyle:UIAlertControllerStyleAlert];
                    
                    UIAlertAction *okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * action) {
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                         [self callChangeDevice];
                                                                     }];
                    UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"cancel", @"cancel") style:UIAlertActionStyleDefault
                                                                         handler:^(UIAlertAction * action) {
                                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                                             exit(0);
                                                                         }];
                    
                    [alert addAction:okButton];
                    [alert addAction:cancelButton];
                    
                    [self presentViewController:alert animated:YES completion:nil];
                    
                } else{
                    UIAlertController *alert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"msg1", @"")
                                                                                   message:NSLocalizedString([dataSet objectForKey:@"RESULT"], @"msg2")
                                                                            preferredStyle:UIAlertControllerStyleAlert];
                    
                    UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * action) {
                                                                         [appDelegate.appPrefs removeObjectForKey:[appDelegate setPreferencesKey:@"DVCID"]];
                                                                         [appDelegate.appPrefs removeObjectForKey:@"USERID"];
                                                                         [appDelegate.appPrefs synchronize];
                                                                         //[self performSegueWithIdentifier:@"LOGIN_VIEW_PUSH" sender:self]; //로그인화면으로 가지않도록 막음
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                         exit(0);
                                                                     }];
                    [alert addAction:okButton];
                    [self presentViewController:alert animated:YES completion:nil];
                }
                
            } else {
                if([dataSet objectForKey:@"RESULT_CODE"] == nil){
                    //인터넷이 연결되지 않았을 경우 (백그라운드에 오랫동안 있다가 앱 실행 시에도 발생)
                    UIAlertController *alert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"error", @"error") message:NSLocalizedString(@"exception_msg_unknownhostexception", @"exception_msg_unknownhostexception") preferredStyle:UIAlertControllerStyleAlert];
                    UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * action) {
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                         [self viewDidLoad];
                                                                     }];
                    [alert addAction:okButton];
                    [self presentViewController:alert animated:YES completion:nil];
                    
                } else {
                    UIAlertController *alert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"error", @"error") message:[NSString stringWithFormat:@"RESULT_CODE : %@",[dataSet objectForKey:@"RESULT_CODE"]] preferredStyle:UIAlertControllerStyleAlert];
                    UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * action) {
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                     }];
                    [alert addAction:okButton];
                    [self presentViewController:alert animated:YES completion:nil];
                }
                
            }
        }
    }
}

- (void)returnError:(MFURLSession *)session error:(NSError *)error{
    //NSLog(@"Intro error : %ld", (long)error.code);
    //[SVProgressHUD dismiss];
    if(error.code == -1001){
        //Code=-1001 : 요청한 시간이 초과되었습니다.
        
//        count = 0;
//        endCount = 1;
//        myTimer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(handleTimer:) userInfo:nil repeats:YES];
//
//        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(10.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
//            NSLog(@"INTRO DISPATCH_TIME_NOW>>>>>>>>>>>>>>>>");
//            [SVProgressHUD dismiss];
//            UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"서버에 연결할 수 없습니다." preferredStyle:UIAlertControllerStyleAlert];
//            UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
//                                                             handler:^(UIAlertAction * action) {
//                                                                 [alert dismissViewControllerAnimated:YES completion:nil];
//                                                                 exit(0);
//                                                             }];
//            [alert addAction:okButton];
//            [self presentViewController:alert animated:YES completion:nil];
//        });
        
    } else if(error.code == -1009){
        //인터넷/와이파이 X, 연결되었을 경우 웹서비스 호출
        [[AFNetworkReachabilityManager sharedManager] startMonitoring];
        [[AFNetworkReachabilityManager sharedManager] setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {
            if (status == AFNetworkReachabilityStatusNotReachable) {
//                NSLog(@"네트워크 사용 할 수 없음");
            } else if (status == AFNetworkReachabilityStatusUnknown){
//                NSLog(@"네트워크 상태 알 수 없음");
            } else {
                if (status == AFNetworkReachabilityStatusReachableViaWiFi) {
//                    NSLog(@"와이파이");
                } else if (status == AFNetworkReachabilityStatusReachableViaWWAN){
//                    NSLog(@"3G/LTE 등 셀룰러 네트워크");
                }
            }
        }];
    }
    
    [self reconnectFromError];
}

#pragma mark - NSURLConnectionDataDelegate
-(void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error{
    [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:FALSE];
    
//    NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
//    [prefs removeObjectForKey:@"USER_ID"];
//    [prefs removeObjectForKey:@"DEVICE_ID"];
//    [prefs removeObjectForKey:@"URL"];
//    [prefs removeObjectForKey:@"CPN_CODE"];
//    [prefs synchronize];
//
//    //isLogin = NO;
//    NSLog(@"IntroViewController error : %@",error);
//    if (error.code == -1003) {
//        NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
//        NSString *errorMessage = [NSString stringWithFormat:@"정보가 올바르지 않습니다.\n%@\nURL을 확인하세요.",[prefs objectForKey:@"URL"]];
//        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"로그인 오류" message:errorMessage delegate:nil cancelButtonTitle:@"확인" otherButtonTitles: nil];
//        [alertView show];
//
//
//    }else{
//        NSLog(@"%s 일시적인 네트워크 오류가 발생했습니다.", __func__);
//        [self setTimer];
//    }
    
    [self reconnectFromError];
}
-(void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data{
    NSString *absoluteString = connection.currentRequest.URL.absoluteString;
//    NSLog(@"query : %@",connection.currentRequest.URL.query);
    NSString *query = connection.currentRequest.URL.query;
    NSString *returnString = [[NSString alloc]initWithData:data encoding:NSUTF8StringEncoding];
    if (query==nil) {
        returnCode = returnString;
    }else{
        if ([query hasPrefix:@"event=get_version"]) {
#ifdef DEBUG
            NSLog(@"getVersion");
#endif
        }else{
#ifdef DEBUG
            NSLog(@"getBeacon : %@",returnString);
#endif
        }
    }
    
    NSArray *tempArr = [[absoluteString lastPathComponent] componentsSeparatedByString:@"="];
    if ([tempArr count]==1) {
        returnCode = [[NSString alloc]initWithData:data encoding:NSUTF8StringEncoding];
    }else{
        
    }
}

- (void)connectionDidFinishLoading:(NSURLConnection *)connection{
    [SVProgressHUD dismiss];
}

- (void)introConnectServer :(NSDictionary *)dataSet {
#ifdef DEBUG
    NSLog(@"%s", __func__);
#endif
    
    NSString *compNo = [appDelegate.appPrefs objectForKey:@"COMP_NO"];
    
    NSArray *snsList = [dataSet objectForKey:@"SNS_LIST"];
    for(int i=0; i<snsList.count; i++){
        NSNumber *snsNo = [[snsList objectAtIndex:i]objectForKey:@"SNS_NO"];
        NSString *itemType = [[snsList objectAtIndex:i]objectForKey:@"ITEM_TYPE"];
        
        if([itemType isEqualToString:@"MEMBER"]){
            [appDelegate.bindQueueArr addObject:[NSString stringWithFormat:@"%@.BOARD.POST.%@.%@", appDelegate.dvcType, compNo, snsNo]];
            [appDelegate.bindQueueArr addObject:[NSString stringWithFormat:@"%@.BOARD.COMMENT.%@.%@", appDelegate.dvcType, compNo, snsNo]];
        }
    }
    
    NSMutableArray *selectArr = [appDelegate.dbHelper selectRoomList];
    for(int i=0; i<selectArr.count; i++){
        NSString *roomNo = [[selectArr objectAtIndex:i]objectForKey:@"ROOM_NO"];
        [appDelegate.bindQueueArr addObject:[NSString stringWithFormat:@"%@.CHAT.%@.%@", appDelegate.dvcType, compNo, roomNo]];
    }
    [appDelegate.appPrefs setObject:appDelegate.bindQueueArr forKey:[appDelegate setPreferencesKey:@"BINDQARR"]];
    [appDelegate.appPrefs synchronize];
    
    NSDictionary *dic = [NSDictionary dictionaryWithObject:[appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"BINDQARR"]] forKey:@"ROUTING_KEY"];
    [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_RmqConnect" object:nil userInfo:dic];
    
}

#pragma mark - IntroView Data Setting
-(void)teamAndUserDataSetting{
    NSLog(@"%s", __func__);
//    팀룸 로딩하는데 시간이 걸려서 인트로에서 웹서비스 호출하여 로컬 저장.
//    사용자 정보는 프로필을 눌렀을 경우 또는 멤버리스트 볼 경우에 가져오기.
//    getUserSNSLists
    NSString *urlString = appDelegate.main_url;
    NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"getUserSNSLists"]];
    int snsKind = 1;
    
    NSString *compNo = [appDelegate.appPrefs objectForKey:@"COMP_NO"];
    NSString *paramString = [NSString stringWithFormat:@"compNo=%@&usrId=%@&snsKind=%d&searchNm=""&dvcId=%@",compNo, [appDelegate.appPrefs objectForKey:@"USERID"], snsKind, [appDelegate.appPrefs objectForKey:[appDelegate setPreferencesKey:@"DVCID"]]];
    
    MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
    session.delegate = self;
    [session start];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
}

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    self.navigationController.navigationBarHidden = NO;
}

-(void)reconnectFromError{
    if(appDelegate.errorExecCnt<appDelegate.errorMaxCnt){
        [self setTimer];
    } else {
        appDelegate.errorExecCnt = 0;
        [SVProgressHUD dismiss];
        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:NSLocalizedString(@"exception_msg_unknownhostexception", @"exception_msg_unknownhostexception") preferredStyle:UIAlertControllerStyleAlert];
        UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"done", @"done") style:UIAlertActionStyleDefault
                                                         handler:^(UIAlertAction * action) {
                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                             exit(0);
                                                         }];
        [alert addAction:okButton];
        [self presentViewController:alert animated:YES completion:nil];
    }
    appDelegate.errorExecCnt++;
}

- (NSString *)getIPAddress {
    NSString *address = @"error";
    struct ifaddrs *interfaces = NULL;
    struct ifaddrs *temp_addr = NULL;
    int success = 0;
    // retrieve the current interfaces - returns 0 on success
    success = getifaddrs(&interfaces);
    if (success == 0) {
        // Loop through linked list of interfaces
        temp_addr = interfaces;
        while(temp_addr != NULL) {
            if(temp_addr->ifa_addr->sa_family == AF_INET) {
                // Check if interface is en0 which is the wifi connection on the iPhone
                if([[NSString stringWithUTF8String:temp_addr->ifa_name] isEqualToString:@"en0"]) {
                    // Get NSString from C String
                    address = [NSString stringWithUTF8String:inet_ntoa(((struct sockaddr_in *)temp_addr->ifa_addr)->sin_addr)];
                }
            }
            temp_addr = temp_addr->ifa_next;
        }
    }
    // Free memory
    freeifaddrs(interfaces);
    return address;
}

@end
