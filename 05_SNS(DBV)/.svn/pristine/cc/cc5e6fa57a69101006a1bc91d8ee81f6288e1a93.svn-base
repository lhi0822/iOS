//
//  SNSUserInfoViewController.m
//  mfinity_sns
//
//  Created by hilee on 2017. 8. 23..
//  Copyright © 2017년 com.dbvalley. All rights reserved.
//

#import "SNSUserInfoViewController.h"
#import "MFStyle.h"
#import "MFDBHelper.h"
#import "CustomHeaderViewController.h"
#import "ChatUserListCell.h"
#import "DeptListViewController.h"
#import "UserListViewController.h"


@interface SNSUserInfoViewController () {
    NSMutableArray *sortDataArr;
    AppDelegate *appDelegate;
    MFDBHelper *dbHelper;
    NSMutableArray *existUserArr;
}
@end

@implementation SNSUserInfoViewController

-(void)viewWillAppear:(BOOL)animated{
    NSString *titleStr = [NSString stringWithFormat:@"%@ 멤버 정보", self.snsName];
    
    self.navigationController.navigationBar.translucent = NO;
    self.navigationController.navigationBar.barTintColor = [MFUtil myRGBfromHex:@"1D4696"];
    self.navigationController.navigationBar.tintColor = [UIColor whiteColor];
    
    self.navigationItem.titleView = [MFStyle navigationTitleStyle1:titleStr];
    
    self.navigationItem.leftBarButtonItem =[[UIBarButtonItem alloc]initWithImage:[self getScaledImage:[UIImage imageNamed:@"btn_close.png"] scaledToMaxWidth:20] style:UIBarButtonItemStylePlain target:self action:@selector(closeButtonClick)];
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_InviteBoardChat:) name:@"noti_InviteBoardChat" object:nil];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    dbHelper = [[MFDBHelper alloc]init];
    appDelegate = (AppDelegate *)[UIApplication sharedApplication].delegate;
    existUserArr = [NSMutableArray array];
    
    [self callGetSNSUserList];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}


-(void)closeButtonClick{
    [self dismissViewControllerAnimated:YES completion:nil];
}

- (void)callGetSNSUserList{
    NSLog(@"%s",__FUNCTION__);
    
    NSString *urlString = appDelegate.main_url;
    NSString *paramString = [NSString stringWithFormat:@"snsNo=%@&currentUserNos=", self.snsNo];
    
    NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"getSNSMemberList"]];
    MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
    session.delegate = self;
    if ([session start]) {
        [SVProgressHUD show];
    }
    //[session start];
}

-(void)noti_InviteBoardChat:(NSNotification *)notification {
    NSLog(@"noti_InviteBoardChat userInfo : %@", notification.userInfo);
    
    NSArray *documentPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *documentsDir = [documentPaths objectAtIndex:0];
    NSString *DBName = [AppDelegate getDBName];
    NSString *DBPath = [documentsDir stringByAppendingPathComponent:DBName];
    
    NSLog(@"self.parentViewController : %@", self.parentViewController);
    NSLog(@"self.parentViewController childViewControllers : %@", [self.parentViewController childViewControllers]);
    
    if([self.parentViewController childViewControllers].count == 1){
        NSString *nRoomNo = [notification.userInfo objectForKey:@"NEW_ROOM_NO"];
        NSString *nRoomNm = [NSString urlDecodeString:[notification.userInfo objectForKey:@"NEW_ROOM_NM"]];
        NSString *roomType = [notification.userInfo objectForKey:@"NEW_ROOM_TY"];
        NSArray *users = [notification.userInfo objectForKey:@"NEW_USERS"];
        
        NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
        NSString *userNm = [prefs objectForKey:@"USER_NM"];
        NSString *decodeUserNm = [NSString urlDecodeString:userNm];
        NSString *myUserNo = [prefs objectForKey:@"CUSER_NO"];
        /*
         if([nRoomNm rangeOfString:[NSString stringWithFormat:@",%@", decodeUserNm]].location != NSNotFound){
         nRoomNm = [nRoomNm stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@",%@", decodeUserNm] withString:@""];
         } else if([nRoomNm rangeOfString:[NSString stringWithFormat:@"%@,", decodeUserNm]].location != NSNotFound){
         nRoomNm = [nRoomNm stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@"%@,", decodeUserNm] withString:@""];
         } else if([nRoomNm rangeOfString:[NSString stringWithFormat:@",%@,", decodeUserNm]].location != NSNotFound){
         nRoomNm = [nRoomNm stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@",%@", decodeUserNm] withString:@""];
         }
         */
        
        NSArray *roomNmArr = [NSArray array];
        if([nRoomNm rangeOfString:@","].location != NSNotFound){
            roomNmArr = [nRoomNm componentsSeparatedByString:@","];
        }
        //NSLog(@"roomNmArr : %@", roomNmArr);
        
        NSMutableString *resultRoomNm = [NSMutableString string];
        if(roomNmArr.count>0){
            for(int i=0; i<roomNmArr.count; i++){
                NSString *arrUserNm = [roomNmArr objectAtIndex:i];
                if(![arrUserNm isEqualToString:[NSString stringWithFormat:@"%@", decodeUserNm]]){
                    [resultRoomNm appendString:[NSString stringWithFormat:@",%@", arrUserNm]];
                }
            }
            resultRoomNm = [[resultRoomNm substringFromIndex:1] mutableCopy];
        }else {
            resultRoomNm = [nRoomNm mutableCopy];
        }
        
        NSString *sqlStr = [NSString stringWithFormat:@"SELECT A.ROOM_NO ROOM_NO, A.ROOM_NM ROOM_NM, A.ROOM_NOTI ROOM_NOTI, A.NEW_CHAT NEW_CHAT, (SELECT COUNT(B.USER_NO) FROM CHAT_USERS B WHERE B.ROOM_NO = A.ROOM_NO) MEMBER_COUNT, IFNULL((SELECT DATE FROM CHATS C WHERE C.ROOM_NO = A.ROOM_NO ORDER BY C.CHAT_NO DESC LIMIT 1),'') LAST_DATE, IFNULL(B.USER_IMG,'') ROOM_IMG FROM CHAT_ROOMS A LEFT OUTER JOIN(SELECT C.ROOM_NO, GROUP_CONCAT(D.USER_IMG) USER_IMG FROM CHAT_USERS C, USERS D WHERE LENGTH(D.USER_IMG) > 0 AND D.USER_NO = C.USER_NO AND C.USER_NO != %@ GROUP BY C.ROOM_NO) B ON A.ROOM_NO = B.ROOM_NO WHERE A.ROOM_NO = %@ ORDER BY ROOM_NO ASC;", myUserNo, nRoomNo];
        
        sqlite3 *database;
        
        NSMutableArray *roomChatArr = [NSMutableArray array];
        NSMutableDictionary *dic = nil;
        
        if (sqlite3_open([DBPath UTF8String], &database) == SQLITE_OK) {
            NSString *sql = sqlStr;
            const char *sqlStatement = [sql UTF8String];
            sqlite3_stmt *compiledStatement;
            
            if (sqlite3_prepare_v2(database, sqlStatement, -1, &compiledStatement, NULL) == SQLITE_OK) {
                int rowCount = 0;
                
                while(sqlite3_step(compiledStatement) == SQLITE_ROW) {
                    rowCount = sqlite3_column_int(compiledStatement, 0);
                    
                    dic = [[NSMutableDictionary alloc]init];
                    
                    for(int j=0; j<sqlite3_column_count(compiledStatement);j++){
                        NSString *keyString = [NSString stringWithUTF8String:(sqlite3_column_name(compiledStatement, j))];
                        NSString *valueString = nil;
                        if (sqlite3_column_text(compiledStatement, j)==NULL) {
                            valueString = @"null";
                        }else{
                            valueString = [NSString stringWithUTF8String:(char *)sqlite3_column_text(compiledStatement, j)];
                        }
                        //NSLog(@"key String : %@",keyString);
                        //NSLog(@"value String : %@",valueString);
                        
                        [dic setObject:valueString forKey:keyString];
                    }
                    [roomChatArr addObject:dic];
                }
            }else {
                NSLog(@"not SQLITE_OK");
                printf("could not prepare statement: %s\n", sqlite3_errmsg(database));
            }
            sqlite3_finalize(compiledStatement);
            
        }else{
            NSLog(@"noti_InviteBoardChat db not open");
        }
        sqlite3_close(database);
        
        if(roomChatArr.count==0){
            NSString *sqlString1 = [NSString stringWithFormat:@"INSERT INTO CHAT_ROOMS VALUES (%@, '%@', '%@', 1, 0, '');", nRoomNo, resultRoomNm, roomType];
            
            for (int i=0; i<users.count; i++) {
                NSString *userNo = [[users objectAtIndex:i] objectForKey:@"USER_NO"];
                NSString *userNm = [[users objectAtIndex:i] objectForKey:@"USER_NM"];
                NSString *decodeUserNm = [NSString urlDecodeString:userNm];
                NSString *userMsg = [[users objectAtIndex:i] objectForKey:@"USER_MSG"];
                NSString *decodeUserMsg = [NSString urlDecodeString:userMsg];
                NSString *userImg = [[users objectAtIndex:i] objectForKey:@"USER_IMG"];
                NSString *decodeUserImg = [NSString urlDecodeString:userImg];
                NSString *userId = [[users objectAtIndex:i] objectForKey:@"USER_ID"];
                NSString *phoneNo = [[users objectAtIndex:i] objectForKey:@"PHONE_NO"];
                NSString *deptNo = [[users objectAtIndex:i] objectForKey:@"DEPT_NO"];
                NSString *userBgImg = [[users objectAtIndex:i] objectForKey:@"USER_BG_IMG"];
                
                NSString *sqlString2 = [NSString stringWithFormat:@"INSERT OR REPLACE INTO USERS VALUES(%@, '%@', '%@', '%@','%@', '%@', '%@', '%@');", userNo, userId, decodeUserNm, decodeUserImg, decodeUserMsg, phoneNo, deptNo, userBgImg];
                NSString *sqlString3 = [NSString stringWithFormat:@"INSERT INTO CHAT_USERS VALUES (%@, %@);", nRoomNo, userNo];
                
                [self crudStatement:DBPath :sqlString2];
                [self crudStatement:DBPath :sqlString3];
                
                //프로필 썸네일 로컬저장
                /*NSString *tmpPath = NSTemporaryDirectory();
                 UIImage *thumbImage = [UIImage imageWithData:[NSData dataWithContentsOfURL:[NSURL URLWithString:[decodeUserImg stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]]]];
                 NSData *imageData = UIImagePNGRepresentation(thumbImage);
                 NSString *fileName = [decodeUserImg lastPathComponent];
                 
                 NSString *thumbImgPath =[tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"mThumb_%@",fileName]];
                 [imageData writeToFile:thumbImgPath atomically:YES];*/
            }
            
            [self crudStatement:DBPath :sqlString1];
            
        }
        
        //UIBarButtonItem *left = [[UIBarButtonItem alloc]initWithTitle:@"" style:UIBarButtonItemStylePlain target:self action:nil];
        //self.navigationItem.backBarButtonItem = left;
        self.navigationController.navigationBar.topItem.title = @"";
        
        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
        ChatViewController *destination = [storyboard instantiateViewControllerWithIdentifier:@"ChatViewController"];
        destination.fromSegue = @"BOARD_ADD_USER_MODAL";
        destination.snsInfoDic = self.snsInfoDic;
        
        RightSideViewController *rightViewController = [storyboard instantiateViewControllerWithIdentifier:@"RightSideViewController"];
        CGRect screen = [[UIScreen mainScreen]bounds];
        CGFloat screenWidth = screen.size.width;
        CGFloat screenHeight = screen.size.height;
        
        rightViewController.view.frame = CGRectMake(rightViewController.view.frame.origin.x, rightViewController.view.frame.origin.y, screenWidth, screenHeight);
        
        destination.roomName = resultRoomNm;
        destination.roomNo = nRoomNo;
        destination.roomNoti = @"1";
        rightViewController.roomNo = nRoomNo;
        rightViewController.roomNoti = @"1";
        
        LGSideMenuController *container = [LGSideMenuController sideMenuControllerWithRootViewController:destination leftViewController:nil rightViewController:rightViewController];
        [container setNavigationItemTitle:[NSString urlDecodeString:destination.roomName]];
        
        NSString *sqlString = [NSString stringWithFormat:@"UPDATE CHAT_ROOMS SET NEW_CHAT = 0 WHERE ROOM_NO=%@;", nRoomNo];
        [self crudStatement:DBPath :sqlString];
        
        [self.tabBarController.tabBar setHidden:YES];
        [self.navigationController pushViewController:container animated:YES];
    }
}

#pragma mark - MFURLSessionDelegate
- (void)returnDataWithObject:(MFURLSession *)session error:(NSString *)error{
    [SVProgressHUD dismiss];
    //NSLog(@"reteurnDataString : %@",session.returnDataString);
    NSLog(@"error : %@",error);
    if (error!=nil) {
        NSLog(@"error : %@",error);
    }else{
        NSDictionary *dic = session.returnDictionary;
        self.dataSetArray = [dic objectForKey:@"DATASET"];
        NSLog(@"self.dataSetArray : %@", self.dataSetArray);
        NSString *myUserNo = [[NSUserDefaults standardUserDefaults] objectForKey:@"CUSER_NO"];
        
        sortDataArr = [NSMutableArray array];
        
        NSDictionary *myInfo = [NSDictionary dictionary];
        NSDictionary *leaderInfo = [NSDictionary dictionary];
        
        //NSLog(@"self.snsLeader : %@", self.snsLeader);
        
        for(int i=0; i<self.dataSetArray.count; i++){
            NSString *userNo = [[self.dataSetArray objectAtIndex:i] objectForKey:@"CUSER_NO"];
            [existUserArr addObject:userNo];
            
            if([[NSString stringWithFormat:@"%@", userNo] isEqualToString:[NSString stringWithFormat:@"%@", myUserNo]]){
                myInfo = [[NSDictionary alloc] initWithDictionary:[self.dataSetArray objectAtIndex:i]];
                
            }  else {
                if(![[NSString stringWithFormat:@"%@", self.snsLeader] isEqualToString:[NSString stringWithFormat:@"%@", appDelegate.adminNo1]]&&![[NSString stringWithFormat:@"%@", self.snsLeader] isEqualToString:[NSString stringWithFormat:@"%@", appDelegate.adminNo2]]){
                    if([[NSString stringWithFormat:@"%@", self.snsLeader] isEqualToString:[NSString stringWithFormat:@"%@", userNo]]){
                        leaderInfo = [[NSDictionary alloc] initWithDictionary:[self.dataSetArray objectAtIndex:i]];
                    } else {
                        [sortDataArr addObject:[self.dataSetArray objectAtIndex:i]];
                    }
                } else {
                    [sortDataArr addObject:[self.dataSetArray objectAtIndex:i]];
                }
            }
        }
        
        NSSortDescriptor *sortDescriptor;
        sortDescriptor = [[NSSortDescriptor alloc] initWithKey:@"USER_NM" ascending:YES];
        NSArray *sortDescriptors = [NSArray arrayWithObject:sortDescriptor];
        [sortDataArr sortUsingDescriptors:sortDescriptors];
        
        if(myInfo.count>0) [sortDataArr insertObject:myInfo atIndex:0];
        if(leaderInfo.count>0) [sortDataArr insertObject:leaderInfo atIndex:1];
        
        self.dataSetArray = sortDataArr;
        [self.tableView reloadData];
    }
}

-(void)returnError:(MFURLSession *)session error:(NSError *)error{
    NSLog(@"error : %@", error);
}

-(void) crudStatement:(NSString *)dbPath :(NSString *)crudStmt{
    NSLog(@"%s", __func__);
    sqlite3 *database;
    NSLog(@"crudStmt : %@", crudStmt);
    if (sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
        const char *sqlStatement = [crudStmt UTF8String];
        
        sqlite3_stmt *compiledStatement;
        if (sqlite3_prepare_v2(database, sqlStatement, -1, &compiledStatement, NULL) == SQLITE_OK) {
            
            if(sqlite3_step(compiledStatement) != SQLITE_DONE){
                NSLog(@"Error updating table: %s", sqlite3_errmsg(database));
                
            }else{
                NSLog(@"ok");
            }
            
            if(sqlite3_finalize(compiledStatement) != SQLITE_OK){
                NSLog(@"SQL Error : %s",sqlite3_errmsg(database));
            }
        }else {
            NSLog(@"not SQLITE_OK");
            printf("could not prepare statement: %s\n", sqlite3_errmsg(database));
        }
    }else{
        
    }
    sqlite3_close(database);
}

#pragma mark - UITableViewDelegate UITableViewDataSource
-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
    return 1;
}
-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return self.dataSetArray.count;
}
-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    return 60;
}
- (CGFloat) tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {
    return 60;
}
-(UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section {
    UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 60)];
    
    UIImageView *imgView = [[UIImageView alloc] initWithFrame:CGRectMake(20, view.frame.size.height/2-20, 45, 45)];
    imgView.image = [UIImage imageNamed:@"btn_adduser.png"];
    imgView.layer.cornerRadius = imgView.frame.size.width/2;
    imgView.clipsToBounds = YES;
    [view addSubview:imgView];
    
    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(imgView.frame.size.width+30, 0, self.view.frame.size.width, 60)];
    label.textAlignment = NSTextAlignmentLeft;
    label.font = [UIFont systemFontOfSize:17];
    label.backgroundColor = [UIColor whiteColor];
    label.text = @"멤버 초대하기";
    label.textColor = [MFUtil myRGBfromHex:@"1D4696"];
    [view addSubview:label];
    
    UITapGestureRecognizer *addUserTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapAddUser:)];
    [view setUserInteractionEnabled:YES];
    [view addGestureRecognizer:addUserTap];
    
    return view;
}
-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    ChatUserListCell *cell = [tableView dequeueReusableCellWithIdentifier:@"ChatUserListCell" forIndexPath:indexPath];
    cell.selectionStyle = UITableViewCellSelectionStyleNone;
    cell.userImgView.image = nil;
    
    NSDictionary *snsUserDic = [self.dataSetArray objectAtIndex:indexPath.row];
    NSString *profileImg = [NSString urlDecodeString:[snsUserDic objectForKey:@"PROFILE_IMG"]];
    NSString *userNo = [snsUserDic objectForKey:@"CUSER_NO"];
    NSString *userName = [NSString urlDecodeString:[snsUserDic objectForKey:@"USER_NM"]];
    NSString *deptName = [NSString urlDecodeString:[snsUserDic objectForKey:@"CORP_NM"]];
    NSString *userMsg = [NSString urlDecodeString:[snsUserDic objectForKey:@"PROFILE_MSG"]];
    //NSString *profileBgImg = [NSString urlDecodeString:[snsUserDic objectForKey:@"PROFILE_BACKGROUND_IMG"]];
    NSString *userStr;
    if([userMsg isEqualToString:@""]) userStr = [NSString stringWithFormat:@"%@ (%@)", userName, deptName];
    else userStr = [NSString stringWithFormat:@"%@ (%@ , %@)", userName, deptName, userMsg];
    
    cell.nodeNameLabel.text = userStr;
    cell.checkButton.hidden = YES;
    
    if([[NSString stringWithFormat:@"%@",userNo] isEqualToString:[NSString stringWithFormat:@"%@",self.snsLeader]]){
        cell.leaderBtn.hidden = NO;
        
        [cell.leaderBtn setImage:[self imageByScalingAndCroppingForSize:CGSizeMake(11, 11) :[UIImage imageNamed:@"icon_crown.png"]] forState:UIControlStateNormal];
        [cell.leaderBtn setBackgroundColor:[UIColor whiteColor]];
        
    } else {
        cell.leaderBtn.hidden = YES;
    }
    
    UIImage *userImg = nil;
    if(![profileImg isEqualToString:@""]){
        userImg = [self imageByScalingAndCroppingForSize:CGSizeMake(50, 50) :[dbHelper saveThumbImage:@"profile" :profileImg]];
        cell.userImgView.image = userImg;
        
    } else {
        userImg = [self imageByScalingAndCroppingForSize:CGSizeMake(50, 50) :[UIImage imageNamed:@"profile_default.png"]];
        cell.userImgView.image = userImg;
    }
    
    [cell.userImgView setFrame:CGRectMake(20, (cell.frame.size.height/2) - (45/2), 45, 45)];
    [cell.leaderBtn setFrame:CGRectMake(cell.userImgView.frame.origin.x+cell.userImgView.frame.size.width-cell.leaderBtn.frame.size.width, cell.leaderBtn.frame.origin.y, cell.leaderBtn.frame.size.width, cell.leaderBtn.frame.size.height)];
    [cell.nodeNameLabel setFrame:CGRectMake(cell.userImgView.frame.origin.x+cell.userImgView.frame.size.width+10, cell.nodeNameLabel.frame.origin.y, cell.nodeNameLabel.frame.size.width, cell.nodeNameLabel.frame.size.height)];
    
    cell.userImgView.layer.cornerRadius = cell.userImgView.frame.size.width/2;
    cell.userImgView.clipsToBounds = YES;
    cell.userImgView.layer.borderColor = [[UIColor lightGrayColor] CGColor];
    cell.userImgView.layer.borderWidth = 0.3;
    
    cell.leaderBtn.layer.cornerRadius = cell.leaderBtn.frame.size.width/2;
    cell.leaderBtn.clipsToBounds = YES;
    cell.leaderBtn.layer.borderColor = [[UIColor lightGrayColor] CGColor];
    cell.leaderBtn.layer.borderWidth = 0.3;
    
    cell.nodeNameLabel.text = userStr;
    cell.nodeNameLabel.font = [UIFont systemFontOfSize:17];
    
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    //[self performSegueWithIdentifier:@"BOARD_MEMBER_PROFILE_MODAL" sender:indexPath];
    
    NSDictionary *dic = [self.dataSetArray objectAtIndex:indexPath.row];
    NSString *userNo = [dic objectForKey:@"CUSER_NO"];
    
    CustomHeaderViewController *destination = [[CustomHeaderViewController alloc] initwithUserNo:userNo];
    destination.userNo = userNo;
    destination.fromSegue = @"BOARD_MEMBER_PROFILE_MODAL";
    
    destination.modalTransitionStyle = UIModalTransitionStyleCrossDissolve;
    [self presentViewController:destination animated:YES completion:nil];
}

- (void)tapAddUser:(id)sender{
    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
    
    if(appDelegate.userListSortDept){
        DeptListViewController *vc = (DeptListViewController *)[storyboard instantiateViewControllerWithIdentifier:@"DeptListViewController"];
        UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:vc];
        vc.fromSegue = @"BOARD_ADD_USER_MODAL";
        vc.existUserArr = existUserArr;
        
        //noti_InviteBoardChat
        ChatListViewController *vc2 = (ChatListViewController *)[storyboard instantiateViewControllerWithIdentifier:@"ChatListViewController"];
        [[NSNotificationCenter defaultCenter] addObserver:vc2 selector:@selector(noti_NewChatRoom:) name:@"noti_NewChatRoom" object:nil];
        
        [self presentViewController:nav animated:YES completion:nil];
        
    } else {
        NSLog(@"userListSortUser");
        UserListViewController *vc = (UserListViewController *)[storyboard instantiateViewControllerWithIdentifier:@"UserListViewController"];
        UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:vc];
        vc.fromSegue = @"BOARD_ADD_USER_MODAL";
        vc.existUserArr = existUserArr;
        
        [self presentViewController:nav animated:YES completion:nil];
    }
}

#pragma mark - Navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    
}

- (UIImage *)getScaledImage:(UIImage *)image scaledToMaxWidth:(CGFloat)width {
    CGFloat oldWidth = image.size.width;
    CGFloat oldHeight = image.size.height;
    
    CGFloat scaleFactor=1;
    
    //if (oldWidth > width) {
    scaleFactor = width / oldWidth;
    //} else  //oldWidth<width and height==0이면, scale하지 않음.
    //    return image;
    
    CGFloat newHeight = oldHeight * scaleFactor;
    CGFloat newWidth = oldWidth * scaleFactor;
    CGSize newSize = CGSizeMake(newWidth, newHeight);
    
    //NSLog(@"oldWidth : %f, oldHeight : %f", oldWidth, oldHeight);
    //NSLog(@"newWidth : %f, newHeight : %f", newWidth, newHeight);
    
    //UIGraphicsBeginImageContext(newSize);
    UIGraphicsBeginImageContextWithOptions(newSize, NO, [UIScreen mainScreen].scale);
    [image drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)];
    UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return newImage;
}

- (UIImage*)imageByScalingAndCroppingForSize:(CGSize)targetSize :(UIImage *)image {
    UIImage *sourceImage = image;
    UIImage *newImage = nil;
    CGSize imageSize = sourceImage.size;
    CGFloat width = imageSize.width;
    CGFloat height = imageSize.height;
    CGFloat targetWidth = targetSize.width;
    CGFloat targetHeight = targetSize.height;
    CGFloat scaleFactor = 0.0;
    CGFloat scaledWidth = targetWidth;
    CGFloat scaledHeight = targetHeight;
    CGPoint thumbnailPoint = CGPointMake(0.0,0.0);
    
    if (CGSizeEqualToSize(imageSize, targetSize) == NO)
    {
        CGFloat widthFactor = targetWidth / width;
        CGFloat heightFactor = targetHeight / height;
        
        if (widthFactor > heightFactor)
            scaleFactor = widthFactor; // scale to fit height
        else
            scaleFactor = heightFactor; // scale to fit width
        scaledWidth  = width * scaleFactor;
        scaledHeight = height * scaleFactor;
        
        // center the image
        if (widthFactor > heightFactor)
        {
            thumbnailPoint.y = (targetHeight - scaledHeight) * 0.5;
        }
        else
            if (widthFactor < heightFactor)
            {
                thumbnailPoint.x = (targetWidth - scaledWidth) * 0.5;
            }
    }
    
    //UIGraphicsBeginImageContext(targetSize); // this will crop
    UIGraphicsBeginImageContextWithOptions(targetSize, NO, [UIScreen mainScreen].scale);
    
    CGRect thumbnailRect = CGRectZero;
    thumbnailRect.origin = thumbnailPoint;
    thumbnailRect.size.width  = scaledWidth;
    thumbnailRect.size.height = scaledHeight;
    
    [sourceImage drawInRect:thumbnailRect];
    
    newImage = UIGraphicsGetImageFromCurrentImageContext();
    if(newImage == nil)
        NSLog(@"could not scale image");
    
    //pop the context to get back to the default
    UIGraphicsEndImageContext();
    return newImage;
}

-(void)sendToHilee:(NSString *)func :(NSException *)exception{
    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:NSLocalizedString(@"exception_msg_exception", @"exception_msg_exception") preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction* sendButton = [UIAlertAction actionWithTitle:@"관리자에게 전송" style:UIAlertActionStyleDefault
                                                       handler:^(UIAlertAction * action) {
                                                           [alert dismissViewControllerAnimated:YES completion:nil];
                                                           
                                                           UIDevice *device = [UIDevice currentDevice];
                                                           NSString *myUserNo = [[NSUserDefaults standardUserDefaults] objectForKey:@"CUSER_NO"];
                                                           NSString *dvcKind = [device modelName];
                                                           NSString *dvcVer = device.systemVersion;
                                                           
                                                           MFMessageComposeViewController *controller = [[MFMessageComposeViewController alloc] init];
                                                           if([MFMessageComposeViewController canSendText])
                                                           {
                                                               controller.body = [NSString stringWithFormat:@"%@ / %@ / %@ \n%@ \n\n%@", dvcKind, dvcVer, myUserNo, func, exception];
                                                               controller.recipients = [NSArray arrayWithObject:@"01093917822"];
                                                               controller.messageComposeDelegate = self;
                                                               [self presentViewController:controller animated:YES completion:nil];
                                                           }
                                                       }];
    
    UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                     handler:^(UIAlertAction * action) {
                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                     }];
    
    [alert addAction:sendButton];
    [alert addAction:okButton];
    [self presentViewController:alert animated:YES completion:nil];
}

- (void)messageComposeViewController:(nonnull MFMessageComposeViewController *)controller didFinishWithResult:(MessageComposeResult)result {
    NSString *resultString;
    switch (result) {
        case MessageComposeResultCancelled:
            resultString = NSLocalizedString(@"cancel", @"");
            break;
            
        case MessageComposeResultFailed:
        {
            resultString = NSLocalizedString(@"fail", @"");
            break;
        }
            
        case MessageComposeResultSent:
            resultString = NSLocalizedString(@"success", @"");
            break;
            
        default:
            break;
    }
    [self dismissViewControllerAnimated:YES completion:^{
        NSLog(@"%s resultString : %@",__FUNCTION__,resultString);
    }];
}

@end
