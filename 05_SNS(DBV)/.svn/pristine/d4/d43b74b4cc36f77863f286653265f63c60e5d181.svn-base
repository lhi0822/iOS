//
//  TeamSelectController.m
//  mfinity_sns
//
//  Created by hilee on 2017. 8. 21..
//  Copyright © 2017년 com.dbvalley. All rights reserved.
//

#import "TeamSelectController.h"
#import "CoverImageViewCell.h"
#import "SearchTableViewCell.h"
#import "PostDetailViewController.h"
#import "SNSUserInfoViewController.h"
#import "SNSInfoViewController.h"
#import "TeamSelectViewCell.h"
#import "TeamSelectTaskViewCell.h"
#import "CustomHeaderViewController.h"
#import "TaskDetailViewController.h"
#import "TaskWriteViewController.h"
#import "PostWriteTableViewController.h"

#define NAVBAR_CHANGE_POINT 50

//#define NAVBAR_COLORCHANGE_POINT -80
#define IMAGE_HEIGHT 180
#define SCROLL_DOWN_LIMIT 100
#define kScreenWidth [UIScreen mainScreen].bounds.size.width
#define kScreenHeight [UIScreen mainScreen].bounds.size.height
#define LIMIT_OFFSET_Y -(IMAGE_HEIGHT + SCROLL_DOWN_LIMIT)

#define REFRESH_TABLEVIEW_DEFAULT_ROW               64.f
#define REFRESH_HEADER_DEFAULT_HEIGHT               64.f
#define REFRESH_TITLE_TABLE_PULL                    @"당겼다 놔주세요."
#define REFRESH_TITLE_TABLE_RELEASE                 @"당겼다 놔주세요."
#define REFRESH_TITLE_TABLE_LOAD                    @"새로고치는 중..."
#define REFRESH_TIME_FORMAT                         @"MM/dd (HH:mm:ss)"

#define kSupplementaryViewID @"SUP_VIEW_ID"
#define MODEL_NAME [[UIDevice currentDevice] modelName]

@interface TeamSelectController () {
    int snsKind;
    AppDelegate *appDelegate;
    BOOL naviClear;
}

@property (strong, nonatomic) VCFloatingActionButton *addButton;

@end

@implementation TeamSelectController

- (BOOL)isIphoneX
{
    if (CGRectEqualToRect([UIScreen mainScreen].bounds,CGRectMake(0, 0, 375, 812))) {
        return YES;
    } else {
        return NO;
    }
}
- (int)navBarBottom {
    return [self isIphoneX] ? 88 : 64;
}

- (int)naviChangePoint{
    return [self isIphoneX] ? -80 : -50;
}

- (UIImageView *)imageView
{
    if (_imageView == nil) {
        _imageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, -IMAGE_HEIGHT, kScreenWidth, IMAGE_HEIGHT)];
        _imageView.clipsToBounds = YES;
    }
    return _imageView;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    NSLog(@"TeamSelectController fromSegue : %@", self.fromSegue);
    
    @try{
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_NewPostPush:) name:@"noti_NewPostPush" object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_NewChatPush:) name:@"noti_NewChatPush" object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_SavePost:) name:@"noti_SavePost" object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_SaveTask:) name:@"noti_SaveTask" object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_TeamProfileChat:) name:@"noti_TeamProfileChat" object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_ModifyBoard:) name:@"noti_ModifyBoard" object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_ForceDeleteSNS:) name:@"noti_ForceDeleteSNS" object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_RefreshTeamSelect:) name:@"noti_RefreshTeamSelect" object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_CloseSNS:) name:@"noti_CloseSNS" object:nil];
        
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(naviNoti:) name:@"naviNoti" object:nil];
        
        
        appDelegate = (AppDelegate *)[UIApplication sharedApplication].delegate;
        
        snsKind = 0;
        if([self.fromSegue isEqualToString:@"BOARD_SEARCH_MODAL"]){
            snsKind = [[self.snsInfoDic objectForKey:@"SNS_KIND"] intValue];
        } else {
            snsKind = self.selectBoardKind;
        }
        
        UIButton *left = [UIButton buttonWithType:UIButtonTypeCustom];
        [left setImage:[self getScaledImage:[UIImage imageNamed:@"icon_home_fill.png"] scaledToMaxWidth:25.0f] forState:UIControlStateNormal];
        left.adjustsImageWhenDisabled = NO;
        left.frame = CGRectMake(0, 0, 50, 50);
        left.contentEdgeInsets = UIEdgeInsetsMake(0, 0, 0, 10);
        [left addTarget:self action:@selector(closeModal:) forControlEvents:UIControlEventTouchUpInside];
        
        UIBarButtonItem *customBarItem = [[UIBarButtonItem alloc] initWithCustomView:left];
        self.navigationItem.leftBarButtonItem = customBarItem;
        self.navigationItem.hidesBackButton = YES;

        UIButton *right1 = [[UIButton alloc]initWithFrame:CGRectMake(0, 0, 40, 40)];
        [right1 setImage:[self getScaledImage:[UIImage imageNamed:@"btn_search.png"] scaledToMaxWidth:20] forState:UIControlStateNormal];
        [right1 addTarget:self action:@selector(rightSideMenuButtonPressed:) forControlEvents:UIControlEventTouchUpInside];
        UIBarButtonItem *rightBtn1 = [[UIBarButtonItem alloc]initWithCustomView:right1];
        
        self.navigationItem.rightBarButtonItem = rightBtn1;
        
        //[self changeNavBarAnimateWithIsClear:YES]; //수정
        
        self.tableView.dataSource = self;
        [self.tableView registerClass:[UITableViewCell class] forCellReuseIdentifier:@"Cell"];
        
        UIButton *toolBar1 = [[UIButton alloc]initWithFrame:CGRectMake(0, 0, 30, 30)];
        [toolBar1 setImage:[self getScaledImage:[UIImage imageNamed:@"btn_member.png"] scaledToMaxWidth:30] forState:UIControlStateNormal];
        [toolBar1 addTarget:self action:@selector(snsUserInfoClick:) forControlEvents:UIControlEventTouchUpInside];
        UIBarButtonItem *toolBarBtn1 = [[UIBarButtonItem alloc]initWithCustomView:toolBar1];
        
        UIBarButtonItem *flexibleSpace = [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil];
        
        UIButton *toolBar2 = [[UIButton alloc]initWithFrame:CGRectMake(0, 0, 30, 30)];
        [toolBar2 setImage:[self getScaledImage:[UIImage imageNamed:@"btn_info.png"] scaledToMaxWidth:12] forState:UIControlStateNormal];
        [toolBar2 addTarget:self action:@selector(snsInfoClick:) forControlEvents:UIControlEventTouchUpInside];
        UIBarButtonItem *toolBarBtn2 = [[UIBarButtonItem alloc]initWithCustomView:toolBar2];
        
        NSArray *toolBarBtnArr = [[NSArray alloc]initWithObjects:flexibleSpace, toolBarBtn1, flexibleSpace, toolBarBtn2, flexibleSpace, nil];
        self.toolBar.items = toolBarBtnArr;
        
        self.lastPostNo = @"1";
        self.lastTaskNo = @"1";
        
        [self callWebService:@"getSNSInfo"];
        //[self viewSetting];
        
        
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

- (void)viewWillAppear:(BOOL)animated {
    NSLog(@"%s", __func__);
    //self.navigationController.navigationBar.translucent = YES;
    [super viewWillAppear:animated];
    
    //self.navigationController.navigationBar.barTintColor = [MFUtil myRGBfromHex:@"1D4696"];
    
    //네비 선 없애는거라는데
    [self.navigationController.navigationBar setBackgroundImage:[UIImage new] forBarMetrics:UIBarMetricsDefault];
    self.navigationController.navigationBar.clipsToBounds = YES;

    self.tableView.delegate = self;
    [self scrollViewDidScroll:self.tableView];
}

- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
    self.tableView.delegate = nil;
    //[self.navigationController.navigationBar lt_reset];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)willAnimateRotationToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration{
    CGRect floatFrame = CGRectNull;
    
    if([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad){
        floatFrame = CGRectMake([UIScreen mainScreen].bounds.size.width-64, self.toolBar.frame.origin.y-self.toolBar.frame.size.height-20, 50, 50);
        
    } else {
        if ((toInterfaceOrientation == UIInterfaceOrientationPortrait)||(toInterfaceOrientation == UIInterfaceOrientationPortraitUpsideDown)) {
            floatFrame = CGRectMake([UIScreen mainScreen].bounds.size.width-64, self.toolBar.frame.origin.y-self.toolBar.frame.size.height-20, 50, 50);
        } else {
            floatFrame = CGRectMake([UIScreen mainScreen].bounds.size.width-64, self.toolBar.frame.origin.y-self.toolBar.frame.size.height-20, 50, 50);
        }
    }
    
    //CGRect floatFrame = CGRectMake([UIScreen mainScreen].bounds.size.width-64, self.toolBar.frame.origin.y-self.toolBar.frame.size.height-20, 50, 50);
    self.addButton = [[VCFloatingActionButton alloc]initWithFrame:floatFrame normalImage:[UIImage imageNamed:@"floating_menu_board.png"] andPressedImage:[UIImage imageNamed:@"floating_menu_close.png"] withScrollview:self.tableView naviHeight:self.navigationController.navigationBar.frame.size.height isTranslucent:NO];
    self.addButton.backgroundColor = [MFUtil myRGBfromHex:@"1D4696"];
    self.addButton.layer.cornerRadius = self.addButton.frame.size.width/2;
    self.addButton.clipsToBounds = YES;
    self.addButton.contentMode = UIViewContentModeScaleAspectFit;
    
    if(snsKind==1){//if(self.selectBoardKind==1){
        self.addButton.imageArray = @[@"floating_write.png"];
        self.addButton.labelArray = @[@"새글쓰기"];
        
    } else if(snsKind==2){//if(self.selectBoardKind==2){
        self.addButton.imageArray = @[@"floating_newproject.png"];
        self.addButton.labelArray = @[@"업무생성"];
    }
    
    self.addButton.hideWhileScrolling = YES;
    self.addButton.delegate = self;
    
    [self.view addSubview:self.addButton];
}

- (void)naviNoti:(NSNotification *)notification{
    UIView *statusBar = [[[UIApplication sharedApplication] valueForKey:@"statusBarWindow"] valueForKey:@"statusBar"];
    statusBar.backgroundColor = [MFUtil myRGBfromHex:@"1D4696"];
}


#pragma mark - Floating Button Event
-(void)didSelectMenuOptionAtIndex:(NSInteger)row{
    NSLog(@"%s, row : %ld", __func__, (long)row);
    if(row==0){
        [self createPost:nil];
    }
}

-(void)closeModal:(id)sender {
    [self dismissViewControllerAnimated:YES completion:nil];
}

-(void)viewSetting{
    [self callWebService:@"getSNSMemberList"];
    
    //커버이미지
    //NSLog(@"self.snsInfoDic : %@", self.snsInfoDic);
    NSString *coverImg = [NSString urlDecodeString:[self.snsInfoDic objectForKey:@"COVER_IMG"]];
    //NSLog(@"coverImg : %@", coverImg);
    if(![coverImg isEqualToString:@""]&&![coverImg isEqualToString:@"null"]&&coverImg!=nil){
        MFDBHelper *dbHelper = [[MFDBHelper alloc]init];
        UIImage *image = [dbHelper saveThumbImage:@"cover" :coverImg];
        if(image!=nil){
            UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(self.imageView.frame.size.width, self.imageView.frame.size.height) :[dbHelper saveThumbImage:@"cover" :coverImg]];
            self.imageView.image = postCover;
        } else {
            UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(self.imageView.frame.size.width, self.imageView.frame.size.height) :[UIImage imageNamed:@"cover2-2.png"]];
            self.imageView.image = postCover;
        }
    } else {
        UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(self.imageView.frame.size.width, self.imageView.frame.size.height) :[UIImage imageNamed:@"cover2-2.png"]];
        self.imageView.image = postCover;
    }
    
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapOnCoverImg:)];
    [self.imageView setUserInteractionEnabled:YES];
    [self.imageView addGestureRecognizer:tap];
    
    //플로팅 버튼
    //CGRect floatFrame = CGRectMake([UIScreen mainScreen].bounds.size.width-64, [UIScreen mainScreen].bounds.size.height-self.tabBarController.tabBar.frame.size.height-self.toolBar.frame.size.height-100, 50, 50);
    //CGRect floatFrame = CGRectMake([UIScreen mainScreen].bounds.size.width-64, self.tableView.frame.size.height-self.tabBarController.tabBar.frame.size.height-self.toolBar.frame.size.height-64, 50, 50);
    CGRect floatFrame = CGRectMake([UIScreen mainScreen].bounds.size.width-64, self.toolBar.frame.origin.y-self.toolBar.frame.size.height-20, 50, 50);
    self.addButton = [[VCFloatingActionButton alloc]initWithFrame:floatFrame normalImage:[UIImage imageNamed:@"floating_menu_board.png"] andPressedImage:[UIImage imageNamed:@"floating_menu_close.png"] withScrollview:self.tableView naviHeight:self.navigationController.navigationBar.frame.size.height isTranslucent:NO];
    
    self.addButton.backgroundColor = [MFUtil myRGBfromHex:@"1D4696"];
    self.addButton.layer.cornerRadius = self.addButton.frame.size.width/2;
    self.addButton.clipsToBounds = YES;
    self.addButton.contentMode = UIViewContentModeScaleAspectFit;
    
    //[self.addButton setImageEdgeInsets:UIEdgeInsetsMake(0.0, 0.0, 0.0, 0.0)];
    
    if(snsKind==1){//if(self.selectBoardKind==1){
        self.addButton.imageArray = @[@"floating_write.png"];
        self.addButton.labelArray = @[@"새글쓰기"];
        
    } else if(snsKind==2){//if(self.selectBoardKind==2){
        self.addButton.imageArray = @[@"floating_newproject.png"];
        self.addButton.labelArray = @[@"업무생성"];
    }
    
    self.addButton.hideWhileScrolling = YES;
    self.addButton.delegate = self;
    
    if([self isIphoneX]){
        self.tableView.contentInset = UIEdgeInsetsMake(IMAGE_HEIGHT-64, 0, 0, 0);
    } else {
        self.tableView.contentInset = UIEdgeInsetsMake(IMAGE_HEIGHT, 0, 0, 0);
    }
    
    [self.tableView addSubview:self.imageView];
    [self.view addSubview:self.tableView];
    [self.view addSubview:self.toolBar];
    [self.view addSubview:self.addButton];
}

- (IBAction)snsUserInfoClick:(id)sender {
    //[self performSegueWithIdentifier:@"BOARD_MEMBER_PROFILE_MODAL" sender:nil];
    
    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
    SNSUserInfoViewController *destination = (SNSUserInfoViewController *)[storyboard instantiateViewControllerWithIdentifier:@"SNSUserInfoViewController"];
    UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:destination];
    
    NSString *snsLeader = [self.snsInfoDic objectForKey:@"CREATE_USER_NO"];
    destination.snsNo = self.snsNo;
    destination.snsName = self.snsName;
    destination.snsLeader = snsLeader;
    destination.snsInfoDic = self.snsInfoDic;
    
    //navController.modalTransitionStyle = UIModalTransitionStyleCrossDissolve;
    [self presentViewController:navController animated:YES completion:nil];
}

- (IBAction)snsInfoClick:(id)sender {
    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
    SNSInfoViewController *destination = (SNSInfoViewController *)[storyboard instantiateViewControllerWithIdentifier:@"SNSInfoViewController"];
    UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:destination];
    
    destination.snsInfoDic = self.snsInfoDic;
    
    //navController.modalTransitionStyle = UIModalTransitionStyleCrossDissolve;
    [self presentViewController:navController animated:YES completion:nil];
}

-(void)callWebService:(NSString *)serviceName{
    @try{
        NSString *urlString = appDelegate.main_url;
        NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:serviceName]];
        NSString *paramString = nil;
        
        NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
        NSString *myUserNo = [prefs objectForKey:@"CUSER_NO"];
        
        
        if([serviceName isEqualToString:@"getSNSMemberList"]){
            NSString* jsonData = nil;
            //            if(self.existUserArr!=nil){
            //                NSData* data = [NSJSONSerialization dataWithJSONObject:self.existUserArr options:NSJSONWritingPrettyPrinted error:nil];
            //                jsonData = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
            //            } else {
            jsonData = @"";
            //            }
            paramString = [NSString stringWithFormat:@"snsNo=%@&currentUserNos=%@", self.snsNo, jsonData];
            
        } else if([serviceName isEqualToString:@"getPostLists"]){
            paramString = [NSString stringWithFormat:@"stPostSeq=%@&usrNo=%@&searchNm=""",self.lastPostNo, myUserNo];
            if (self.snsNo!=nil) {
                paramString = [paramString stringByAppendingFormat:@"&snsNo=%@",self.snsNo];
            }
            
        } else if([serviceName isEqualToString:@"getTaskLists"]){
            paramString = [NSString stringWithFormat:@"stTaskSeq=%@&usrNo=%@&searchNm=""",self.lastTaskNo, myUserNo];
            if (self.snsNo!=nil) {
                paramString = [paramString stringByAppendingFormat:@"&snsNo=%@",self.snsNo];
            }
            
        } else if([serviceName isEqualToString:@"getSNSInfo"]){
            //usrNo snsNo snsKind
            
            
            NSString *myUserNo = [[NSUserDefaults standardUserDefaults] objectForKey:@"CUSER_NO"];
            paramString = [NSString stringWithFormat:@"usrNo=%@&snsNo=%@&snsKind=%d", myUserNo, self.snsNo, snsKind];
        }
        
        
        MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
        session.delegate = self;
        [session start];
        
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

- (void)refreshCallGetList{
    //NSLog(@"%s",__FUNCTION__);
    
    @try{
        NSString *urlString = appDelegate.main_url;
        //NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"USER_ID"];
        NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
        NSString *myUserNo = [prefs objectForKey:@"CUSER_NO"];
        NSString *paramString = nil;
        NSURL *url = nil;
        
        if(snsKind==1){//if(self.selectBoardKind==1){
            NSLog(@"TeamSelectController refreshCallGetList selectBoardKind = 1");
            url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"getPostLists"]];
            paramString = [NSString stringWithFormat:@"stPostSeq=1&usrNo=%@&searchNm=""", myUserNo];
            if (self.snsNo!=nil) {
                paramString = [paramString stringByAppendingFormat:@"&snsNo=%@",self.snsNo];
            }
            
            self.normalDataArr = [[NSMutableArray alloc]init];
            self.lastPostNo = @"1";
            
        } else if(snsKind==2){//if(self.selectBoardKind==2){
            NSLog(@"TeamSelectController refreshCallGetList selectBoardKind = 2");
            url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"getTaskLists"]];
            paramString = [NSString stringWithFormat:@"stTaskSeq=1&usrNo=%@&searchNm=""", myUserNo];
            if (self.snsNo!=nil) {
                paramString = [paramString stringByAppendingFormat:@"&snsNo=%@",self.snsNo];
            }
            
            self.projectDataArr = [[NSMutableArray alloc]init];
            self.lastTaskNo = @"1";
        }
        
        //NSLog(@"paramString : %@",paramString);
        
        MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
        session.delegate = self;
        if ([session start]) {
            [SVProgressHUD show];
        }
        
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

- (void)tapOnCoverImg:(UITapGestureRecognizer*)tap{
    NSLog(@"%s", __func__);
}

#pragma mark - MFURLSessionDelegate
-(void)returnDataWithObject:(MFURLSession *)session error:(NSString *)error{
    //Progress stop..gesture recognizers added to a view
    [SVProgressHUD dismiss];
    
//    [self.navigationController.navigationBar setBackgroundImage:[UIImage new] forBarMetrics:UIBarMetricsDefault];
//    self.navigationController.navigationBar.shadowImage = [UIImage new];
//    self.navigationController.navigationBar.translucent = YES;
    
    NSString *wsName = [[session.url absoluteString] lastPathComponent];
    
    if (error!=nil || [error isEqualToString:@"(null)"]) {
        if ([error isEqualToString:@"The request timed out."]) {
            if ([wsName isEqualToString:@"getPostLists"]) {
                [self callWebService:@"getPostLists"];
            }
        } else{
            NSLog(@"%s \n Error Message : %@",__FUNCTION__,error);
            if ([wsName isEqualToString:@"getPostLists"]) {
                NSString *errorMsg =[error stringByAppendingFormat:@"\n=======WebService========\n%@",session.url.absoluteString];
                errorMsg = [errorMsg stringByAppendingFormat:@"\n=======Parameter========\n%@",session.paramString];
                errorMsg = [errorMsg stringByAppendingFormat:@"\n=======return string========\n%@",session.returnDataString];
                UIAlertController* alert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"msg18", @"")
                                                                               message:errorMsg
                                                                        preferredStyle:UIAlertControllerStyleAlert];
                
                UIAlertAction* okAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"msg3", @"") style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction * action) {}];
                UIAlertAction* retryAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"msg19", @"") style:UIAlertActionStyleDefault
                                                                    handler:^(UIAlertAction * action) { [self callWebService:@"getPostLists"]; }];
                
                [alert addAction:okAction];
                [alert addAction:retryAction];
                [self presentViewController:alert animated:YES completion:nil];
                
            } else {
                
            }
        }
    } else{
        @try{
            NSString *result = [session.returnDictionary objectForKey:@"RESULT"];
            NSLog(@"session.returnDictionary : %@", session.returnDictionary);
            
            if ([result isEqualToString:@"SUCCESS"]) {
                if([wsName isEqualToString:@"getSNSMemberList"]){
                    NSMutableArray *dataSets = [session.returnDictionary objectForKey:@"DATASET"];
                    NSLog(@"getSNSMemberList dataSets : %@", dataSets);
                    
                    //getSNSMemberList
                    NSDictionary *dic = session.returnDictionary;
                    NSArray *dataSetArr = [dic objectForKey:@"DATASET"];
                    //NSLog(@"dataSetArr : %@", dataSetArr);
                    
                    for(int i=0; i<dataSetArr.count; i++){
                        NSDictionary *dataSet = [dataSetArr objectAtIndex:i];
                        NSString *userNo = [dataSet objectForKey:@"CUSER_NO"];
                        NSString *userId = [NSString urlDecodeString:[dataSet objectForKey:@"CUSER_ID"]];
                        NSString *userName = [NSString urlDecodeString:[dataSet objectForKey:@"USER_NM"]];
                        NSString *userImg = [NSString urlDecodeString:[dataSet objectForKey:@"PROFILE_IMG"]];
                        NSString *userMsg = [NSString urlDecodeString:[dataSet objectForKey:@"PROFILE_MSG"]];
                        NSString *phoneNo = [NSString urlDecodeString:[dataSet objectForKey:@"PHONE_NO"]];
                        NSString *deptNo = [dataSet objectForKey:@"DEPT_NO"];
                        NSString *userBgImg = [NSString urlDecodeString:[dataSet objectForKey:@"PROFILE_BACKGROUND_IMG"]];
                        
                        MFDBHelper *dbHelper = [[MFDBHelper alloc]init];
                        NSString *sqlString = [NSString stringWithFormat:@"INSERT OR REPLACE INTO USERS VALUES(%@, '%@', '%@', '%@','%@', '%@', '%@', '%@');", userNo, userId, userName, userImg, userMsg, phoneNo, deptNo, userBgImg];
                        [dbHelper crudStatement:sqlString];
                    }
                    
                    if(snsKind==1){//if(self.selectBoardKind==1){
                        [self callWebService:@"getPostLists"];
                    } else if(snsKind==2){//if(self.selectBoardKind==2){
                        [self callWebService:@"getTaskLists"];
                    }
                    
                } else if ([wsName isEqualToString:@"getPostLists"]) {
                    NSMutableArray *dataSets = [session.returnDictionary objectForKey:@"DATASET"];
                    NSLog(@"getPostLists dataSets : %@", dataSets);
                    
                    NSString *seq = [[NSString alloc]init];
                    for(int i=1; i<=dataSets.count; i++){
                        seq = [NSString stringWithFormat:@"%d", [self.lastPostNo intValue]+i];
                    }
                    
                    if(dataSets.count>0){
                        if ([self.lastPostNo intValue]==1) {
                            self.lastPostNo = seq;
                            self.normalDataArr = [NSMutableArray arrayWithArray:dataSets];
                            
                        } else {
                            self.lastPostNo = seq;
                            [self.normalDataArr addObjectsFromArray:dataSets]; //deep copy
                        }
                        
                        [self.tableView reloadData];
                    } else {
                        NSLog(@"없음");
                    }
                    
                } else if([wsName isEqualToString:@"getTaskLists"]){
                    NSMutableArray *dataSets = [session.returnDictionary objectForKey:@"DATASET"];
                    NSLog(@"getTaskLists dataSets : %@", dataSets);
                    
                    NSString *seq = [[NSString alloc]init];
                    for(int i=1; i<=dataSets.count; i++){
                        seq = [NSString stringWithFormat:@"%d", [self.lastTaskNo intValue]+i];
                    }
                    
                    if(dataSets.count>0){
                        if ([self.lastTaskNo intValue]==1) {
                            self.lastTaskNo = seq;
                            self.projectDataArr = [NSMutableArray arrayWithArray:dataSets];
                            
                        } else {
                            self.lastTaskNo = seq;
                            [self.projectDataArr addObjectsFromArray:dataSets];
                        }
                        
                        [self.tableView reloadData];
                        
                    } else {
                        
                    }
                    
                } else if([wsName isEqualToString:@"getSNSInfo"]){
                    NSDictionary *dic = session.returnDictionary;
                    NSArray *dataSetArr = [dic objectForKey:@"DATASET"];
                    NSLog(@"getSNSInfo dataSetArr : %@", dataSetArr);
                    
                    self.snsInfoDic = [NSDictionary dictionary];
                    self.snsInfoDic = [dataSetArr objectAtIndex:0];
                    NSLog(@"getSNSInfo snsinfodic : %@", self.snsInfoDic);
                    
                    [self viewSetting];
                    //[self.tableView reloadData];
                }
                
            } else{
                NSLog(@"%s \n Error Message : %@",__FUNCTION__,[session.returnDictionary objectForKey:@"MESSAGE"]);
            }
            
        } @catch(NSException *exception){
            //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
        }
    }
}



-(void)returnError:(MFURLSession *)session error:(NSError *)error{
    NSLog(@"%s, error : %@", __func__, error);
    //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :error];
}


#pragma mark - UITableView Delegate & Datasrouce
-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return 1;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    if(snsKind==1){//if(self.selectBoardKind==1){
        if(self.normalDataArr.count>0){
            @try{
                NSDictionary *dataSetItem = [self.normalDataArr objectAtIndex:indexPath.row];
                NSArray *contentArray =[dataSetItem objectForKey:@"CONTENT"];
                
                BOOL isText = false;
                BOOL isImg = false;
                BOOL isFile = false;
                
                for (NSDictionary *content in contentArray) {
                    if ([[content objectForKey:@"TYPE"] isEqualToString:@"TEXT"]) {
                        isText = YES;
                    } else if ([[content objectForKey:@"TYPE"] isEqualToString:@"IMG"]) {
                        isImg = YES;
                    } else if ([[content objectForKey:@"TYPE"] isEqualToString:@"FILE"]) {
                        isFile = YES;
                    }
                }
                
                //NSLog(@"contentArray : %@", contentArray);
                
                /*
                 if(isText && !isImg && !isFile) {
                 return 181;
                 
                 } else if(isText && isImg && !isFile){
                 return 431;
                 
                 } else if(isText && !isImg && isFile){
                 return 231;
                 
                 } else if(isText && isImg && isFile){
                 return 486;
                 
                 } else if(!isText && isImg && !isFile){
                 return 395;
                 
                 } else if(!isText && isImg && isFile){
                 return 455;
                 
                 } else if(!isText && !isImg && isFile){
                 return 190;
                 
                 } else {
                 return 486;
                 }
                 */
                
                static TeamSelectViewCell *teamSelectCell = nil;
                static dispatch_once_t onceToken;
                
                dispatch_once(&onceToken, ^{
                    teamSelectCell = [tableView dequeueReusableCellWithIdentifier:@"TeamSelectViewCell"];
                    if (teamSelectCell == nil) {
                        NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"TeamSelectViewCell" owner:self options:nil];
                        
                        for (id currentObject in topLevelObject) {
                            if ([currentObject isKindOfClass:[TeamSelectViewCell class]]) {
                                teamSelectCell = (TeamSelectViewCell *) currentObject;
                                [teamSelectCell setSelectionStyle:UITableViewCellSelectionStyleNone];
                            }
                        }
                    }
                });
                
                return [self tmpSetTeamSelectCell:teamSelectCell atIndexPath:indexPath];
                
            } @catch(NSException *exception){
                //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
            }
        }
        
    } else if(snsKind==2){//if(self.selectBoardKind==2){
        if(self.projectDataArr.count>0){
            @try{
                return 330;
                
            } @catch(NSException *exception){
                //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
            }
        }
    }
    
    return 0;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    @try{
        if(snsKind==1){//if(self.selectBoardKind==1){
            return self.normalDataArr.count;
            
        } else if(snsKind==2){//if(self.selectBoardKind==2){
            return self.projectDataArr.count;
        }
        
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

- (float)tmpSetTeamSelectCell:(TeamSelectViewCell *)cell atIndexPath:(NSIndexPath *)indexPath {
    int textH = 0;
    int imgH = 0;
    int fileH = 0;
    
    @try{
        cell.descriptionLabel.text = nil;
        cell.contentImageView.image = nil;
        cell.fileName.text = nil;
        
        if(cell!=nil && self.normalDataArr.count>0){
            NSDictionary *dataSetItem = [self.normalDataArr objectAtIndex:indexPath.item];
            NSArray *contentArray = [dataSetItem objectForKey:@"CONTENT"];
            
            //읽음카운트 20이상 줄바꿈 현상 수정
            NSDictionary *attributes = @{NSFontAttributeName: [cell.readCnt font]};
            CGSize textSize = [[cell.readCnt text] sizeWithAttributes:attributes];
            CGFloat strikeWidth = textSize.width;
            
            if(strikeWidth < 14.0f){
                cell.readCntConstraint.constant = 15;
            } else {
                cell.readCntConstraint.constant = strikeWidth+5;
            }
            cell.readCnt.textAlignment = NSTextAlignmentRight;
            
            NSInteger count = [contentArray count]-1;
            NSString *description = @"";
            NSString *originImagePath =  @"";
            NSString *filePath =  @"";
            
            for (int i=(int)count; i>=0; i--) {
                NSDictionary *content = [contentArray objectAtIndex:i];
                if ([[content objectForKey:@"TYPE"] isEqualToString:@"TEXT"]) {
                    description = [NSString urlDecodeString:[content objectForKey:@"VALUE"]];
                    
                    NSString *newString = [description stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                    if(![newString isEqualToString:@""]){
                        cell.descriptionLabel.text = newString;
                        [cell.descriptionLabel setNumberOfLines:5]; //글내용라인수
                        
                        CGSize maximumSize = CGSizeMake(300, 9999);
                        UIFont *textFont = [UIFont fontWithName:@"Helvetica" size:15];
                        NSAttributedString *str = [[NSAttributedString alloc] initWithString:newString attributes:@{NSFontAttributeName: textFont}];
                        CGRect rect = [str boundingRectWithSize:(CGSize)maximumSize options:NSStringDrawingUsesLineFragmentOrigin context:nil];
                        CGSize textStringSize = rect.size;
                        
                        CGRect newFrame = cell.descriptionLabel.frame;
                        newFrame.size.height = textStringSize.height; //expectedLabelSize.height;
                        
                        int line = (int)(newFrame.size.height/cell.descriptionLabel.frame.size.height);
                        if(line==0){
                            textH = cell.descriptionLabel.frame.size.height + 10;
                        } else if(line>0 && line<6){
                            textH = cell.descriptionLabel.frame.size.height*line + 10;
                        } else {
                            textH = cell.descriptionLabel.frame.size.height*5 + 10;
                        }
                    }
                }
                if ([[content objectForKey:@"TYPE"] isEqualToString:@"IMG"]) {
                    NSDictionary *value = [content objectForKey:@"VALUE"];
                    originImagePath = [NSString urlDecodeString:[value objectForKey:@"ORIGIN"]];
                    imgH = 250;
                }
                if ([[content objectForKey:@"TYPE"] isEqualToString:@"FILE"]) {
                    filePath = [NSString urlDecodeString:[content objectForKey:@"VALUE"]];
                }
            }
            
            if(filePath!=nil && ![filePath isEqualToString:@""]){
                cell.fileView.frame = CGRectMake(cell.frame.origin.x, 350, cell.contentView.frame.size.width, 0);
                
                if(![description isEqualToString:@""] && ![originImagePath isEqualToString:@""]) {
                    cell.fileView.frame = CGRectMake(cell.frame.origin.x, cell.contentImageView.frame.origin.y+cell.contentImageView.frame.size.height+7, cell.contentView.frame.size.width, 50);
                    
                } else if([description isEqualToString:@""] && ![originImagePath isEqualToString:@""]){
                    cell.fileView.frame = CGRectMake(cell.frame.origin.x, cell.descriptionLabel.frame.origin.y+cell.contentImageView.frame.size.height+10, cell.contentView.frame.size.width, 50);
                    
                } else if(![description isEqualToString:@""] && [originImagePath isEqualToString:@""]){
                    cell.fileView.frame = CGRectMake(cell.frame.origin.x, cell.descriptionLabel.frame.origin.y+cell.descriptionLabel.frame.size.height+4, cell.contentView.frame.size.width, 50);
                    
                } else {
                    cell.fileView.frame = CGRectMake(cell.frame.origin.x, cell.descriptionLabel.frame.origin.y, cell.contentView.frame.size.width, 50);
                }
            }
            else {
                cell.fileView.frame = CGRectMake(cell.frame.origin.x, cell.fileView.frame.origin.y, cell.contentView.frame.size.width, 0);
            }
            
            fileH = cell.fileView.frame.size.height;
            
        }
        
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
    
    //NSLog(@"textH : %d, imgH : %d, fileH : %d", textH, imgH, fileH);
    return textH + imgH + fileH + 160;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    @try{
        if(snsKind==1){//if(self.selectBoardKind==1){
            TeamSelectViewCell *cell = (TeamSelectViewCell *)[tableView dequeueReusableCellWithIdentifier:@"TeamSelectViewCell"];
            
            if (cell == nil) {
                NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"TeamSelectViewCell" owner:self options:nil];
                
                for (id currentObject in topLevelObject) {
                    if ([currentObject isKindOfClass:[TeamSelectViewCell class]]) {
                        cell = (TeamSelectViewCell *) currentObject;
                        [cell setSelectionStyle:UITableViewCellSelectionStyleNone];
                    }
                }
            }
            
            cell.descriptionLabel.text = nil;
            cell.contentImageView.image = nil;
            cell.fileName.text = nil;
            
            if(cell!=nil && self.normalDataArr.count>0){
                //NSLog(@"normalDataArr : %@", normalDataArr);
                NSDictionary *dataSetItem = [self.normalDataArr objectAtIndex:indexPath.item];
                //NSLog(@"dataSetItem : %@", dataSetItem);
                
                NSString *profileImagePath = [NSString urlDecodeString:[dataSetItem objectForKey:@"STATUS_IMG"]];
                //NSString *snsName = [NSString urlDecodeString:[dataSetItem objectForKey:@"SNS_NM"]];
                NSString *postDate = [NSString urlDecodeString:[dataSetItem objectForKey:@"POST_DATE"]];
                NSString *writerName = [NSString urlDecodeString:[dataSetItem objectForKey:@"CUSER_NM"]];
                NSArray *contentArray = [dataSetItem objectForKey:@"CONTENT"];
                NSString *commCnt = [dataSetItem objectForKey:@"POST_COMMENT_COUNT"];
                NSString *readCnt = [dataSetItem objectForKey:@"POST_READ_COUNT"];
                
                //NSLog(@"postDate : %@", postDate);
                //NSLog(@"snsName : %@", snsName);
                
                if (![profileImagePath isEqual:@""]) {
                    NSString *contentsImagePath = [profileImagePath stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
                    
                    NSURL *url = [NSURL URLWithString:[contentsImagePath stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]];
                    NSURLSessionTask *task = [[NSURLSession sharedSession] dataTaskWithURL:url completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
                        
                        if (data) {
                            UIImage *image = [UIImage imageWithData:data];
                            if (image) {
                                dispatch_async(dispatch_get_main_queue(), ^{
                                    
                                    UIImage *userImg = [self imageByScalingAndCroppingForSize:CGSizeMake(90, 90) :image];
                                    [cell.userImageButton setImage:userImg forState:UIControlStateNormal];
                                });
                            }
                        }
                    }];
                    [task resume];
                } else{
                    [cell.userImageButton setImage:[UIImage imageNamed:@"profile_default.png"] forState:UIControlStateNormal];
                }
                
                NSDate *currentDate = [NSDate date];
                NSDateFormatter *formatter = [[NSDateFormatter alloc]init];
                formatter.dateFormat = @"yyyy-MM-dd HH:mm";
                NSString *tmp = [postDate substringToIndex:postDate.length-3];
                NSDate *regiDate = [formatter dateFromString:tmp];
                
                NSCalendar *sysCalendar = [NSCalendar currentCalendar];
                unsigned int unitFlags = NSCalendarUnitDay;
                NSDateComponents *dateComp = [sysCalendar components:unitFlags fromDate:regiDate toDate:currentDate options:0];//날짜 비교해서 차이값 추출
                NSInteger date = dateComp.day;
                
                NSString *postDateString = [[NSString alloc]init];
                if(date > 0){
                    postDateString = tmp;
                    //NSLog(@"postDateString : %@", postDateString);
                } else{
                    postDateString = [MFUtil getTimeIntervalFromDate:regiDate ToDate:currentDate];
                }
                
                cell.userNameLabel.text = writerName;
                cell.dateLabel.text = postDateString;
                //cell.teamNameLabel.text = snsName;
                
                [cell.userImageButton addTarget:self action:@selector(tapDetected:) forControlEvents:UIControlEventTouchUpInside];
                cell.userImageButton.tag = indexPath.item;
                
                cell.commentCnt.text = [NSString stringWithFormat:@"댓글 %@",commCnt];
                cell.readCnt.text = [NSString stringWithFormat:@"%@",readCnt];
                
                //읽음카운트 20이상 줄바꿈 현상 수정
                NSDictionary *attributes = @{NSFontAttributeName: [cell.readCnt font]};
                CGSize textSize = [[cell.readCnt text] sizeWithAttributes:attributes];
                CGFloat strikeWidth = textSize.width;
                //NSLog(@"strikeWidth : %f", strikeWidth);
                
                if(strikeWidth < 14.0f){
                    cell.readCntConstraint.constant = 15;
                } else {
                    cell.readCntConstraint.constant = strikeWidth+5;
                }
                cell.readCnt.textAlignment = NSTextAlignmentRight;
                
                NSInteger count = [contentArray count]-1;
                NSString *description = @"";
                NSString *thumbImagePath =  @"";
                NSString *originImagePath =  @"";
                NSString *filePath =  @"";
                
                for (int i=(int)count; i>=0; i--) {
                    NSDictionary *content = [contentArray objectAtIndex:i];
                    if ([[content objectForKey:@"TYPE"] isEqualToString:@"TEXT"]) {
                        description = [NSString urlDecodeString:[content objectForKey:@"VALUE"]];
                        
                        NSString *newString = [description stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                        if(![newString isEqualToString:@""]){
                            cell.descriptionLabel.text = newString;
                            //cell.descriptionLabel.text = description;
                            [cell.descriptionLabel setNumberOfLines:5]; //글내용라인수
                        }
                    }
                    if ([[content objectForKey:@"TYPE"] isEqualToString:@"IMG"]) {
                        NSDictionary *value = [content objectForKey:@"VALUE"];
                        thumbImagePath = [NSString urlDecodeString:[value objectForKey:@"THUMB"]];
                        originImagePath = [NSString urlDecodeString:[value objectForKey:@"ORIGIN"]];
                    }
                    if ([[content objectForKey:@"TYPE"] isEqualToString:@"FILE"]) {
                        filePath = [NSString urlDecodeString:[content objectForKey:@"VALUE"]];
                        NSRange range = [filePath rangeOfString:@"/" options:NSBackwardsSearch];
                        NSString *fileName = [filePath substringFromIndex:range.location+1];
                        cell.fileName.text = fileName;
                        
                        NSRange range2 = [fileName rangeOfString:@"." options:NSBackwardsSearch];
                        NSString *fileExt = [[fileName substringFromIndex:range2.location+1] lowercaseString];
                        
                        if([fileExt isEqualToString:@"jpg"]||[fileExt isEqualToString:@"jpeg"]||[fileExt isEqualToString:@"gif"]||[fileExt isEqualToString:@"png"]||[fileExt isEqualToString:@"tiff"]||[fileExt isEqualToString:@"bmp"]||[fileExt isEqualToString:@"heic"]){
                            cell.fileIcon.image = [UIImage imageNamed:@"file_img.png"];
                            
                        } else if([fileExt isEqualToString:@"mp4"]||[fileExt isEqualToString:@"mkv"]||[fileExt isEqualToString:@"wma"]||[fileExt isEqualToString:@"mov"]||[fileExt isEqualToString:@"swf"]||[fileExt isEqualToString:@"mpg"]||[fileExt isEqualToString:@"mpeg"]||[fileExt isEqualToString:@"vob"]||[fileExt isEqualToString:@"asf"]){
                            cell.fileIcon.image = [UIImage imageNamed:@"file_movie.png"];
                            
                        } else if([fileExt isEqualToString:@"mp3"]||[fileExt isEqualToString:@"wav"]||[fileExt isEqualToString:@"ogg"]||[fileExt isEqualToString:@"wma"]||[fileExt isEqualToString:@"m4a"]||[fileExt isEqualToString:@"flac"]){
                            cell.fileIcon.image = [UIImage imageNamed:@"file_music.png"];
                            
                        } else if([fileExt isEqualToString:@"psd"]){
                            cell.fileIcon.image = [UIImage imageNamed:@"file_psd.png"];
                            
                        } else if([fileExt isEqualToString:@"ai"]){
                            cell.fileIcon.image = [UIImage imageNamed:@"file_ai.png"];
                            
                        } else if([fileExt isEqualToString:@"docx"]||[fileExt isEqualToString:@"doc"]){
                            cell.fileIcon.image = [UIImage imageNamed:@"file_word.png"];
                            
                        } else if([fileExt isEqualToString:@"pptx"]||[fileExt isEqualToString:@"ppt"]){
                            cell.fileIcon.image = [UIImage imageNamed:@"file_ppt.png"];
                            
                        } else if([fileExt isEqualToString:@"xls"]||[fileExt isEqualToString:@"xlsx"]){
                            cell.fileIcon.image = [UIImage imageNamed:@"file_excel.png"];
                            
                        } else if([fileExt isEqualToString:@"pdf"]){
                            cell.fileIcon.image = [UIImage imageNamed:@"file_pdf.png"];
                            
                        } else if([fileExt isEqualToString:@"txt"]){
                            cell.fileIcon.image = [UIImage imageNamed:@"file_txt.png"];
                            
                        } else if([fileExt isEqualToString:@"hwp"]){
                            cell.fileIcon.image = [UIImage imageNamed:@"file_hwp.png"];
                            
                        } else if([fileExt isEqualToString:@"zip"]||[fileExt isEqualToString:@"rar"]||[fileExt isEqualToString:@"egg"]||[fileExt isEqualToString:@"alz"]||[fileExt isEqualToString:@"7z"]){
                            cell.fileIcon.image = [UIImage imageNamed:@"file_zip.png"];
                            
                        } else {
                            cell.fileIcon.image = [UIImage imageNamed:@"file_document.png"];
                        }
                    }
                }
                
                if (originImagePath!=nil && ![originImagePath isEqualToString:@""]) {
                    NSString *contentsImagePath = originImagePath;
                    
                    NSURL *url = [NSURL URLWithString:[contentsImagePath stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]];
                    NSURLSessionTask *task = [[NSURLSession sharedSession] dataTaskWithURL:url completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
                        if (data) {
                            UIImage *image = [UIImage imageWithData:data];
                            if (image) {
                                dispatch_async(dispatch_get_main_queue(), ^{
                                    cell.contentImageView.image = [self imageByScalingAndCroppingForSize:CGSizeMake(cell.contentImageView.frame.size.width, cell.contentImageView.frame.size.height) :image];
                                    cell.contentImageView.hidden = NO;
                                });
                            }
                        }
                    }];
                    [task resume];
                    
                } else{
                    cell.contentImageView.hidden = YES;
                }
                
                if(filePath!=nil && ![filePath isEqualToString:@""]){
                    //NSLog(@"filePath : %@", filePath);
                    cell.fileView.hidden = NO;
                    cell.fileIcon.hidden = NO;
                    cell.fileName.hidden = NO;
                    
                    cell.fileView.frame = CGRectMake(cell.frame.origin.x, 350, cell.contentView.frame.size.width, 0);
                    
                    if(![description isEqualToString:@""] && ![originImagePath isEqualToString:@""]) {
                        cell.fileView.frame = CGRectMake(cell.frame.origin.x, cell.contentImageView.frame.origin.y+cell.contentImageView.frame.size.height+7, cell.contentView.frame.size.width, 50);
                        
                    } else if([description isEqualToString:@""] && ![originImagePath isEqualToString:@""]){
                        cell.fileView.frame = CGRectMake(cell.frame.origin.x, cell.descriptionLabel.frame.origin.y+cell.contentImageView.frame.size.height+10, cell.contentView.frame.size.width, 50);
                        
                    } else if(![description isEqualToString:@""] && [originImagePath isEqualToString:@""]){
                        cell.fileView.frame = CGRectMake(cell.frame.origin.x, cell.descriptionLabel.frame.origin.y+cell.descriptionLabel.frame.size.height+4, cell.contentView.frame.size.width, 50);
                        
                    } else {
                        cell.fileView.frame = CGRectMake(cell.frame.origin.x, cell.descriptionLabel.frame.origin.y, cell.contentView.frame.size.width, 50);
                    }
                }
                else {
                    cell.fileView.hidden = YES;
                    cell.fileIcon.hidden = YES;
                    cell.fileName.hidden = YES;
                    cell.fileView.frame = CGRectMake(cell.frame.origin.x, cell.fileView.frame.origin.y, cell.contentView.frame.size.width, 0);
                }
                
            }
            return cell;
            
        } else if(snsKind==2){//if(self.selectBoardKind==2){
            TeamSelectTaskViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"TeamSelectTaskViewCell"];
            
            if (cell == nil) {
                NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"TeamSelectTaskViewCell" owner:self options:nil];
                
                for (id currentObject in topLevelObject) {
                    if ([currentObject isKindOfClass:[TeamSelectTaskViewCell class]]) {
                        cell = (TeamSelectTaskViewCell *) currentObject;
                        [cell setSelectionStyle:UITableViewCellSelectionStyleNone];
                    }
                }
            }
            
            if(cell!=nil && self.projectDataArr.count>0){
                NSLog(@"projectDataArr : %@", self.projectDataArr);
                NSDictionary *dataSetItem = [self.projectDataArr objectAtIndex:indexPath.item];
                
                NSString *profileImagePath = [NSString urlDecodeString:[dataSetItem objectForKey:@"STATUS_IMG"]]; //thumb
                NSString *snsName = [NSString urlDecodeString:[dataSetItem objectForKey:@"SNS_NM"]];
                NSString *taskDate = [NSString urlDecodeString:[dataSetItem objectForKey:@"TASK_DATE"]];
                NSString *writerName = [NSString urlDecodeString:[dataSetItem objectForKey:@"CUSER_NM"]];
                NSString *taskTitle = [NSString urlDecodeString:[dataSetItem objectForKey:@"TASK_TITLE"]];
                NSString *taskStartDate = [NSString urlDecodeString:[dataSetItem objectForKey:@"TASK_START_DATE"]];
                NSString *taskEndDate = [NSString urlDecodeString:[dataSetItem objectForKey:@"TASK_END_DATE"]];
                NSNumber *taskStatus = [dataSetItem objectForKey:@"STATUS"];
                NSString *managerName = [NSString urlDecodeString:[dataSetItem objectForKey:@"MANAGER_NAME_LIST"]];
                NSNumber *taskProgress = [dataSetItem objectForKey:@"PROGRESS"];
                NSString *taskCaption = [NSString urlDecodeString:[dataSetItem objectForKey:@"TASK_CAPTION"]];
                NSArray *contentFileArray = [dataSetItem objectForKey:@"TASK_ATTACHED_FILE"];
                NSString *commCnt = [dataSetItem objectForKey:@"TASK_COMMENT_COUNT"];
                NSString *readCnt = [dataSetItem objectForKey:@"TASK_READ_COUNT"];
                
                if (![profileImagePath isEqual:@""]) {
                    MFDBHelper *dbHelper = [[MFDBHelper alloc]init];
                    UIImage *userImg = [self imageByScalingAndCroppingForSize:CGSizeMake(120, 120) :[dbHelper saveThumbImage:@"profile" :profileImagePath]];
                    [cell.userImgButton setImage:userImg forState:UIControlStateNormal];
                    
                } else{
                    [cell.userImgButton setImage:[UIImage imageNamed:@"profile_default.png"] forState:UIControlStateNormal];
                }
                
                NSDate *currentDate = [NSDate date];
                NSDateFormatter *formatter = [[NSDateFormatter alloc]init];
                formatter.dateFormat = @"yyyy-MM-dd HH:mm";
                NSString *tmp = [taskDate substringToIndex:taskDate.length-3];
                NSDate *regiDate = [formatter dateFromString:tmp];
                
                NSCalendar *sysCalendar = [NSCalendar currentCalendar];
                unsigned int unitFlags = NSCalendarUnitDay;
                NSDateComponents *dateComp = [sysCalendar components:unitFlags fromDate:regiDate toDate:currentDate options:0];//날짜 비교해서 차이값 추출
                NSInteger date = dateComp.day;
                
                NSString *postDateString = [[NSString alloc]init];
                if(date > 0){
                    postDateString = tmp;
                } else{
                    postDateString = [MFUtil getTimeIntervalFromDate:regiDate ToDate:currentDate];
                }
                
                NSDateFormatter *formatter2 = [[NSDateFormatter alloc] init];
                [formatter2 setDateFormat:@"yyyy-MM-dd HH:mm:ss.s"];
                
                NSDate *sDate = [formatter2 dateFromString:taskStartDate];
                NSDate *eDate = [formatter2 dateFromString:taskEndDate];
                
                NSDateFormatter *formatter3 = [[NSDateFormatter alloc] init];
                [formatter3 setDateFormat:@"yyyy-MM-dd"];
                NSString *sDateStr = [formatter3 stringFromDate:sDate];
                NSString *eDateStr = [formatter3 stringFromDate:eDate];
                
                cell.userName.text = writerName;
                cell.taskDate.text = postDateString;
                cell.teamName.text = snsName;
                
                [cell.userImgButton addTarget:self action:@selector(tapDetected:) forControlEvents:UIControlEventTouchUpInside];
                cell.userImgButton.tag = indexPath.item;
                
                cell.projectIcon.image = [self getScaledImage:[UIImage imageNamed:@"project_schedule_blue.png"] scaledToMaxWidth:25.0f];
                cell.projectTitle.text = taskTitle;
                
                NSLog(@"taskStartDate.length : %lu, taskEndDate.length : %lu", (unsigned long)taskStartDate.length, (unsigned long)taskEndDate.length);
                
                if(taskStartDate.length<=0 && taskEndDate.length<=0){
                    cell.projectDate.text = @"미정";
                } else if(taskStartDate.length>0 && taskEndDate.length<=0){
                    cell.projectDate.text = [NSString stringWithFormat:@"%@ ~ 미정", sDateStr];
                } else if(taskStartDate.length<=0 && taskEndDate.length>0){
                    cell.projectDate.text = [NSString stringWithFormat:@"미정 ~ %@", eDateStr];
                } else {
                    cell.projectDate.text = [NSString stringWithFormat:@"%@ ~ %@", sDateStr, eDateStr];
                }
                
                [cell.statusBtn setBackgroundColor:[UIColor clearColor]];
                [cell.statusBtn setImage:[self getScaledImage:[UIImage imageNamed:@"project_progress.png"] scaledToMaxWidth:13.0f] forState:UIControlStateNormal];
                [cell.statusBtn setImageEdgeInsets:UIEdgeInsetsMake(0.0, 0.0, 0.0, 0.0)];
                [cell.statusBtn setTitleEdgeInsets:UIEdgeInsetsMake(0.0, 5.0, 0.0, 0.0)];
                [cell.statusBtn setTitle:@"상태" forState:UIControlStateNormal];
                
                NSString *statusStr = nil;
                if([taskStatus intValue]==1){
                    statusStr = @"요청";
                } else if([taskStatus intValue]==2){
                    statusStr = @"진행";
                } else if([taskStatus intValue]==3){
                    statusStr = @"완료";
                } else if([taskStatus intValue]==4){
                    statusStr = @"보류";
                }
                cell.statusLbl.text = statusStr;
                
                [cell.userBtn setBackgroundColor:[UIColor clearColor]];
                [cell.userBtn setImage:[self getScaledImage:[UIImage imageNamed:@"project_member.png"] scaledToMaxWidth:13.0f] forState:UIControlStateNormal];
                [cell.userBtn setImageEdgeInsets:UIEdgeInsetsMake(0.0, 0.0, 0.0, 0.0)];
                [cell.userBtn setTitleEdgeInsets:UIEdgeInsetsMake(0.0, 5.0, 0.0, 0.0)];
                [cell.userBtn setTitle:@"수행자" forState:UIControlStateNormal];
                cell.userLbl.text = managerName;
                
                [cell.proceedBtn setBackgroundColor:[UIColor clearColor]];
                [cell.proceedBtn setImage:[self getScaledImage:[UIImage imageNamed:@"project_graph.png"] scaledToMaxWidth:13.0f] forState:UIControlStateNormal];
                [cell.proceedBtn setImageEdgeInsets:UIEdgeInsetsMake(0.0, 0.0, 0.0, 0.0)];
                [cell.proceedBtn setTitleEdgeInsets:UIEdgeInsetsMake(0.0, 5.0, 0.0, 0.0)];
                [cell.proceedBtn setTitle:@"진행률" forState:UIControlStateNormal];
                
                //[cell.proceedBar setFrame:CGRectMake(cell.proceedBar.frame.origin.x, cell.proceedBar.frame.origin.y, cell.proceedBar.frame.size.width, 20)];
                [cell.ProgressView setProgress:[taskProgress intValue]*0.01 animated:NO];
                
                cell.commCnt.text = [NSString stringWithFormat:@"댓글 %@",commCnt];
                cell.viewCnt.text = [NSString stringWithFormat:@"%@",readCnt];
            }
            
            return cell;
        }
        
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
        
    }
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];

    /*if(self.selectBoardKind==1)*/ if(snsKind==1) [self performSegueWithIdentifier:@"TEAM_POST_DETAIL" sender:indexPath];
    else if(snsKind==2)/*if(self.selectBoardKind==2)*/ [self performSegueWithIdentifier:@"TEAM_TASK_DETAIL" sender:indexPath];
}

- (void)tapDetected:(id)sender{
    @try{
        UIImageView *profileButton = (UIImageView *)sender;
        
        NSDictionary *dic = [NSDictionary dictionary];
        if(snsKind==1){//if(self.selectBoardKind==1){
            dic = [self.normalDataArr objectAtIndex:profileButton.tag];
            
        } else if(snsKind==2){//if(self.selectBoardKind==2){
            dic = [self.projectDataArr objectAtIndex:profileButton.tag];
            
        }
        
        NSString *userNo = [dic objectForKey:@"CUSER_NO"];
        
        CustomHeaderViewController *destination = [[CustomHeaderViewController alloc] initwithUserNo:userNo];
        destination.userNo = userNo;
        
        if([self.fromSegue isEqualToString:@"BOARD_SELECT_TEAM"]) destination.fromSegue = @"BOARD_PROFILE_MODAL";
        else destination.fromSegue = @"POST_PROFILE_MODAL";
        
        destination.modalTransitionStyle = UIModalTransitionStyleCrossDissolve;
        
        [self presentViewController:destination animated:YES completion:nil];
        
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

- (void)createPost:(id)sender {
    if (self.snsNo != nil) {
        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
        
        if(snsKind==1){//if(self.selectBoardKind==1){
            PostWriteTableViewController *destination = (PostWriteTableViewController *)[storyboard instantiateViewControllerWithIdentifier:@"PostWriteTableViewController"];
            UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:destination];
            
            destination.fromSegue = @"BOARD_POST_WRITE_MODAL";
            destination.snsNo = self.snsNo;
            destination.snsName = self.snsName;
            
            [self presentViewController:navController animated:YES completion:nil];
            
        } else if(snsKind==2){//if(self.selectBoardKind==2){
            TaskWriteViewController *destination = (TaskWriteViewController *)[storyboard instantiateViewControllerWithIdentifier:@"TaskWriteViewController"];
            UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:destination];
            
            destination.fromSegue = @"BOARD_TASK_WRITE_MODAL";
            destination.snsNo = self.snsNo;
            destination.snsName = self.snsName;
            
            [self presentViewController:navController animated:YES completion:nil];
        }
        
    }
}

- (void)rightSideMenuButtonPressed:(id)sender {
    //[self performSegueWithIdentifier:@"BOARD_POST_SEARCH_MODAL" sender:nil];
    
    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
    SearchViewController *destination = (SearchViewController *)[storyboard instantiateViewControllerWithIdentifier:@"SearchViewController"];
    UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:destination];
    
    destination.fromSegue = @"BOARD_POST_SEARCH_MODAL";
    destination.snsNo = self.snsNo;
    
    [self presentViewController:navController animated:YES completion:nil];
}

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    if([segue.identifier isEqualToString:@"TEAM_POST_DETAIL"]){
        
        //[self.tableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionBottom animated:NO];

        self.navigationController.navigationBar.topItem.title = @"";
        PostDetailViewController *destination = segue.destinationViewController;
        
        NSIndexPath *indexPath = (NSIndexPath *)sender;
        destination._postNo = [[self.normalDataArr objectAtIndex:indexPath.item] objectForKey:@"POST_NO"];
        destination._snsName = [[self.normalDataArr objectAtIndex:indexPath.item] objectForKey:@"SNS_NM"];
        destination._postDate = [[self.normalDataArr objectAtIndex:indexPath.item] objectForKey:@"POST_DATE"];
        destination._readCnt = [[self.normalDataArr objectAtIndex:indexPath.item] objectForKey:@"POST_READ_COUNT"];
        destination.indexPath  = indexPath;
        destination.postInfo = [self.normalDataArr objectAtIndex:indexPath.item];
        
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_DeletePost:) name:@"noti_DeletePost" object:nil];
        
        if(naviClear){
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                //텍스트 뷰 커서에 따라 스크롤 위치 변경해주기 위해.
                [self.tableView scrollRectToVisible:CGRectMake(0, -75, self.tableView.bounds.size.width, self.tableView.bounds.size.height) animated:YES];
            });
        }
        
        
    } else if([segue.identifier isEqualToString:@"TEAM_TASK_DETAIL"]){
        //        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_SaveTask:) name:@"noti_SaveTask" object:nil];
        
        self.navigationController.navigationBar.topItem.title = @"";
        TaskDetailViewController *destination = segue.destinationViewController;
        
        NSIndexPath *indexPath = (NSIndexPath *)sender;
        destination._taskNo = [[self.projectDataArr objectAtIndex:indexPath.item] objectForKey:@"TASK_NO"];
        destination._snsName = [[self.projectDataArr objectAtIndex:indexPath.item] objectForKey:@"SNS_NM"];
        destination._taskDate = [[self.projectDataArr objectAtIndex:indexPath.item] objectForKey:@"TASK_DATE"];
        destination._readCnt = [[self.projectDataArr objectAtIndex:indexPath.item] objectForKey:@"TASK_READ_COUNT"];
        destination.indexPath  = indexPath;
        destination.taskInfo = [self.projectDataArr objectAtIndex:indexPath.item];
        //        [[NSNotificationCenter defaultCenter] addObserver:self
        //                                                 selector:@selector(noti_DeletePost:)
        //                                                     name:@"noti_DeletePost"
        //                                                   object:nil];
    }
    
    /*else if([segue.identifier isEqualToString:@"BOARD_POST_WRITE_MODAL"]){
     [self.tabBarController.tabBar setHidden:YES];
     UINavigationController *destination = segue.destinationViewController;
     PostWriteViewController *vc = [[destination childViewControllers] objectAtIndex:0];
     vc.snsNo = self.snsNo;
     vc.snsName = self.snsName;
     vc.fromSegue = segue.identifier;
     [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_SavePost:) name:@"noti_SavePost" object:nil];
     
     } else if([segue.identifier isEqualToString:@"BOARD_POST_SEARCH_MODAL"]){
     UINavigationController *nav = segue.destinationViewController;
     SearchViewController *destination = [nav.childViewControllers objectAtIndex:0];
     destination.fromSegue = segue.identifier;
     destination.snsNo = self.snsNo;
     
     } else if([segue.identifier isEqualToString:@"BOARD_MEMBER_PROFILE_MODAL"]){
     self.navigationController.navigationBar.topItem.title = @"";
     SNSUserInfoViewController *destination = segue.destinationViewController;
     NSString *snsLeader = [self.snsInfoDic objectForKey:@"CREATE_USER_NO"];
     destination.snsNo = self.snsNo;
     destination.snsName = self.snsName;
     destination.snsLeader = snsLeader;
     destination.snsInfoDic = self.snsInfoDic;
     
     }*/
}

#pragma mark - Push Notification
- (void)noti_SavePost:(NSNotification *)notification{
    NSLog(@"%s",__FUNCTION__);
    self.lastPostNo = @"1";
    self.selectBoardKind=1;
    snsKind=1;
    [self startLoading];
    //[[NSNotificationCenter defaultCenter] removeObserver:self name:@"noti_SavePost" object:nil];
}

- (void)noti_SaveTask:(NSNotification *)notification{
    NSLog(@"%s",__FUNCTION__);
    self.lastTaskNo = @"1";
    self.selectBoardKind=2;
    snsKind=2;
    [self startLoading];
    //[[NSNotificationCenter defaultCenter] removeObserver:self name:@"noti_SaveTask" object:nil];
}

- (void)noti_DeletePost:(NSNotification *)notification{
    NSLog(@"%s",__FUNCTION__);
    self.lastPostNo = @"1";
    [self startLoading];
    //[[NSNotificationCenter defaultCenter] removeObserver:self name:@"noti_DeletePost" object:nil];
}

- (void)noti_ForceDeleteSNS:(NSNotification *)notification{
    self.lastPostNo = @"1";
    [self startLoading];
}

- (void)noti_TeamProfileChat:(NSNotification *)notification {
    NSLog(@"%s", __func__);
    
    NSLog(@"FROM_SEGUE : %@", [notification.userInfo objectForKey:@"FROM_SEGUE"]);
    if([[notification.userInfo objectForKey:@"FROM_SEGUE"] isEqualToString:@"BOARD_MEMBER_PROFILE_MODAL"]){
        [self dismissViewControllerAnimated:YES completion:nil];
    }
    
    @try{
        //그룹선택-글목록에서 푸시받았을경우
        NSLog(@"TEAMSELECTVIEW [self.parentViewController childViewControllers] : %@", [self.parentViewController childViewControllers]);
        if([self.parentViewController childViewControllers].count == 1){ //> 1){
            NSString *nRoomNo = [notification.userInfo objectForKey:@"NEW_ROOM_NO"];
            NSString *nRoomNm = [NSString urlDecodeString:[notification.userInfo objectForKey:@"NEW_ROOM_NM"]];
            NSString *roomType = [notification.userInfo objectForKey:@"NEW_ROOM_TY"];
            NSArray *users = [notification.userInfo objectForKey:@"NEW_USERS"];
            
            NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
            NSString *userNm = [prefs objectForKey:@"USER_NM"];
            NSString *decodeUserNm = [NSString urlDecodeString:userNm];
            NSString *myUserNo = [prefs objectForKey:@"CUSER_NO"];
            /*
             if([nRoomNm rangeOfString:[NSString stringWithFormat:@",%@", decodeUserNm]].location != NSNotFound){
             nRoomNm = [nRoomNm stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@",%@", decodeUserNm] withString:@""];
             } else if([nRoomNm rangeOfString:[NSString stringWithFormat:@"%@,", decodeUserNm]].location != NSNotFound){
             nRoomNm = [nRoomNm stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@"%@,", decodeUserNm] withString:@""];
             } else if([nRoomNm rangeOfString:[NSString stringWithFormat:@",%@,", decodeUserNm]].location != NSNotFound){
             nRoomNm = [nRoomNm stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@",%@", decodeUserNm] withString:@""];
             }
             */
            
            NSArray *roomNmArr = [NSArray array];
            if([nRoomNm rangeOfString:@","].location != NSNotFound){
                roomNmArr = [nRoomNm componentsSeparatedByString:@","];
            }
            //NSLog(@"roomNmArr : %@", roomNmArr);
            
            NSMutableString *resultRoomNm = [NSMutableString string];
            if(roomNmArr.count>0){
                for(int i=0; i<roomNmArr.count; i++){
                    NSString *arrUserNm = [roomNmArr objectAtIndex:i];
                    if(![arrUserNm isEqualToString:[NSString stringWithFormat:@"%@", decodeUserNm]]){
                        [resultRoomNm appendString:[NSString stringWithFormat:@",%@", arrUserNm]];
                    }
                }
                resultRoomNm = [[resultRoomNm substringFromIndex:1] mutableCopy];
            }else {
                resultRoomNm = [nRoomNm mutableCopy];
            }
            
            NSString *sqlStr = [NSString stringWithFormat:@"SELECT A.ROOM_NO ROOM_NO, A.ROOM_NM ROOM_NM, A.ROOM_NOTI ROOM_NOTI, A.NEW_CHAT NEW_CHAT, (SELECT COUNT(B.USER_NO) FROM CHAT_USERS B WHERE B.ROOM_NO = A.ROOM_NO) MEMBER_COUNT, IFNULL((SELECT DATE FROM CHATS C WHERE C.ROOM_NO = A.ROOM_NO ORDER BY C.CHAT_NO DESC LIMIT 1),'') LAST_DATE, IFNULL(B.USER_IMG,'') ROOM_IMG FROM CHAT_ROOMS A LEFT OUTER JOIN(SELECT C.ROOM_NO, GROUP_CONCAT(D.USER_IMG) USER_IMG FROM CHAT_USERS C, USERS D WHERE LENGTH(D.USER_IMG) > 0 AND D.USER_NO = C.USER_NO AND C.USER_NO != %@ GROUP BY C.ROOM_NO) B ON A.ROOM_NO = B.ROOM_NO WHERE A.ROOM_NO = %@ ORDER BY ROOM_NO ASC;", myUserNo, nRoomNo];
            
            sqlite3 *database;
            
            NSMutableArray *roomChatArr = [NSMutableArray array];
            NSMutableDictionary *dic = nil;
            
            if (sqlite3_open([self.DBPath UTF8String], &database) == SQLITE_OK) {
                NSString *sql = sqlStr;
                const char *sqlStatement = [sql UTF8String];
                sqlite3_stmt *compiledStatement;
                
                if (sqlite3_prepare_v2(database, sqlStatement, -1, &compiledStatement, NULL) == SQLITE_OK) {
                    int rowCount = 0;
                    
                    while(sqlite3_step(compiledStatement) == SQLITE_ROW) {
                        rowCount = sqlite3_column_int(compiledStatement, 0);
                        
                        dic = [[NSMutableDictionary alloc]init];
                        
                        for(int j=0; j<sqlite3_column_count(compiledStatement);j++){
                            NSString *keyString = [NSString stringWithUTF8String:(sqlite3_column_name(compiledStatement, j))];
                            NSString *valueString = nil;
                            if (sqlite3_column_text(compiledStatement, j)==NULL) {
                                valueString = @"null";
                            }else{
                                valueString = [NSString stringWithUTF8String:(char *)sqlite3_column_text(compiledStatement, j)];
                            }
                            //NSLog(@"key String : %@",keyString);
                            //NSLog(@"value String : %@",valueString);
                            
                            [dic setObject:valueString forKey:keyString];
                        }
                        [roomChatArr addObject:dic];
                    }
                }else {
                    NSLog(@"not SQLITE_OK");
                    printf("could not prepare statement: %s\n", sqlite3_errmsg(database));
                }
                sqlite3_finalize(compiledStatement);
                
            }else{
                NSLog(@"noti_TeamProfileChat db not open");
            }
            sqlite3_close(database);
            
            //NSLog(@"roomChatArr : %@", roomChatArr);
            if(roomChatArr.count==0){
                NSString *sqlString1 = [NSString stringWithFormat:@"INSERT INTO CHAT_ROOMS VALUES (%@, '%@', '%@', 1, 0, '');", nRoomNo, resultRoomNm, roomType];
                
                for (int i=0; i<users.count; i++) {
                    NSString *userNo = [[users objectAtIndex:i] objectForKey:@"USER_NO"];
                    NSString *userNm = [[users objectAtIndex:i] objectForKey:@"USER_NM"];
                    NSString *decodeUserNm = [NSString urlDecodeString:userNm];
                    NSString *userMsg = [[users objectAtIndex:i] objectForKey:@"USER_MSG"];
                    NSString *decodeUserMsg = [NSString urlDecodeString:userMsg];
                    NSString *userImg = [[users objectAtIndex:i] objectForKey:@"USER_IMG"];
                    NSString *decodeUserImg = [NSString urlDecodeString:userImg];
                    NSString *userId = [[users objectAtIndex:i] objectForKey:@"USER_ID"];
                    NSString *phoneNo = [[users objectAtIndex:i] objectForKey:@"PHONE_NO"];
                    NSString *deptNo = [[users objectAtIndex:i] objectForKey:@"DEPT_NO"];
                    NSString *userBgImg = [[users objectAtIndex:i] objectForKey:@"USER_BG_IMG"];
                    
                    NSString *sqlString2 = [NSString stringWithFormat:@"INSERT OR REPLACE INTO USERS VALUES(%@, '%@', '%@', '%@','%@', '%@', '%@', '%@');", userNo, userId, decodeUserNm, decodeUserImg, decodeUserMsg, phoneNo, deptNo, userBgImg];
                    NSString *sqlString3 = [NSString stringWithFormat:@"INSERT INTO CHAT_USERS VALUES (%@, %@);", nRoomNo, userNo];
                    
                    [self crudStatement:self.DBPath :sqlString2];
                    [self crudStatement:self.DBPath :sqlString3];
                    
                    //프로필 썸네일 로컬저장
                    /*NSString *tmpPath = NSTemporaryDirectory();
                     UIImage *thumbImage = [UIImage imageWithData:[NSData dataWithContentsOfURL:[NSURL URLWithString:[decodeUserImg stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]]]];
                     NSData *imageData = UIImagePNGRepresentation(thumbImage);
                     NSString *fileName = [decodeUserImg lastPathComponent];
                     
                     NSString *thumbImgPath =[tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"mThumb_%@",fileName]];
                     [imageData writeToFile:thumbImgPath atomically:YES];*/
                }
                
                [self crudStatement:self.DBPath :sqlString1];
                
            }
            
            //UIBarButtonItem *left = [[UIBarButtonItem alloc]initWithTitle:@"" style:UIBarButtonItemStylePlain target:self action:nil];
            //self.navigationItem.backBarButtonItem = left;
            self.navigationController.navigationBar.topItem.title = @"";
            
            ChatViewController *destination = [self.storyboard instantiateViewControllerWithIdentifier:@"ChatViewController"];
            
            RightSideViewController *rightViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"RightSideViewController"];
            CGRect screen = [[UIScreen mainScreen]bounds];
            CGFloat screenWidth = screen.size.width;
            CGFloat screenHeight = screen.size.height;
            
            rightViewController.view.frame = CGRectMake(rightViewController.view.frame.origin.x, rightViewController.view.frame.origin.y, screenWidth, screenHeight);
            
            destination.roomName = resultRoomNm;
            destination.roomNo = nRoomNo;
            destination.roomNoti = @"1";
            rightViewController.roomNo = nRoomNo;
            rightViewController.roomNoti = @"1";
            
            LGSideMenuController *container = [LGSideMenuController sideMenuControllerWithRootViewController:destination leftViewController:nil rightViewController:rightViewController];
            [container setNavigationItemTitle:[NSString urlDecodeString:destination.roomName]];
            
            NSString *sqlString = [NSString stringWithFormat:@"UPDATE CHAT_ROOMS SET NEW_CHAT = 0 WHERE ROOM_NO=%@;", nRoomNo];
            [self crudStatement:self.DBPath :sqlString];
            
            [self.tabBarController.tabBar setHidden:YES];
            [self.navigationController pushViewController:container animated:YES];
        }
        
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

- (void)noti_ModifyBoard:(NSNotification *)notification{
    self.snsInfoDic = notification.userInfo;
    [self refreshCallGetList];
    //[[NSNotificationCenter defaultCenter] removeObserver:self name:@"noti_ModifyBoard" object:nil];
}

- (void)noti_RefreshTeamSelect:(NSNotification *)notification{
    self.snsInfoDic = notification.userInfo;
    
    //커버이미지
    NSLog(@"self.snsInfoDic : %@", self.snsInfoDic);
    NSString *coverImg = [NSString urlDecodeString:[self.snsInfoDic objectForKey:@"COVER_IMG"]];
    //NSLog(@"coverImg : %@", coverImg);
    if(![coverImg isEqualToString:@""]&&![coverImg isEqualToString:@"null"]&&coverImg!=nil){
        MFDBHelper *dbHelper = [[MFDBHelper alloc]init];
        UIImage *image = [dbHelper saveThumbImage:@"cover" :coverImg];
        if(image!=nil){
            UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(self.imageView.frame.size.width, self.imageView.frame.size.height) :[dbHelper saveThumbImage:@"cover" :coverImg]];
            self.imageView.image = postCover;
        } else {
            UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(self.imageView.frame.size.width, self.imageView.frame.size.height) :[UIImage imageNamed:@"cover2-2.png"]];
            self.imageView.image = postCover;
        }
    } else {
        UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(self.imageView.frame.size.width, self.imageView.frame.size.height) :[UIImage imageNamed:@"cover2-2.png"]];
        self.imageView.image = postCover;
    }
    
    NSLog(@"selectBoard : %d", self.selectBoardKind);
    [self refreshCallGetList];
}

- (void)noti_CloseSNS:(NSNotification *)notification{
    [self dismissViewControllerAnimated:YES completion:nil];
}

-(void) crudStatement:(NSString *)dbPath :(NSString *)crudStmt{
    NSLog(@"%s", __func__);
    sqlite3 *database;
    NSLog(@"CollectionViewController crudStmt : %@", crudStmt);
    if (sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
        const char *sqlStatement = [crudStmt UTF8String];
        
        sqlite3_stmt *compiledStatement;
        if (sqlite3_prepare_v2(database, sqlStatement, -1, &compiledStatement, NULL) == SQLITE_OK) {
            
            if(sqlite3_step(compiledStatement) != SQLITE_DONE){
                NSLog(@"Error updating table: %s", sqlite3_errmsg(database));
                
            }else{
                NSLog(@"CollectionViewController ok");
            }
            
            if(sqlite3_finalize(compiledStatement) != SQLITE_OK){
                NSLog(@"SQL Error : %s",sqlite3_errmsg(database));
            }
        }else {
            NSLog(@"not SQLITE_OK");
            printf("could not prepare statement: %s\n", sqlite3_errmsg(database));
        }
    }else{
        
    }
    sqlite3_close(database);
}

- (void)noti_NewPostPush:(NSNotification *)notification {
    @try{
        [self changeNavBarAnimateWithIsClear:NO];
        
        if(notification.userInfo!=nil){
            NSString *message = [notification.userInfo objectForKey:@"MESSAGE"];
            NSDictionary *dict = [NSDictionary dictionary];
            if(message!=nil){
                NSData *jsonData = [message dataUsingEncoding:NSUTF8StringEncoding];
                NSError *error;
                dict = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
            } else {
                dict = notification.userInfo;
            }
            
            UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
            PostDetailViewController *vc = (PostDetailViewController *)[storyboard instantiateViewControllerWithIdentifier:@"PostDetailViewController"];
            UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:vc];
            
            //NSLog(@"[UIViewController currentViewController] : %@", NSStringFromClass([[UIViewController currentViewController] class]));
            //NSLog(@"PostDetailViewController : %@", NSStringFromClass([vc class]));
            NSString *currentClass = NSStringFromClass([[UIViewController currentViewController] class]);
            NSString *postDetailClass = NSStringFromClass([vc class]);
            
            vc.fromSegue = @"NOTI_POST_DETAIL";
            vc.notiPostDic = dict;
            
            if([currentClass isEqualToString:postDetailClass]){
                //send notification to postdetail and if noti postno equal current postno, not open modal
                [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_PostDetailView" object:nil userInfo:dict];
            } else {
                [self presentViewController:nav animated:YES completion:nil];
            }
        }
        
    } @catch (NSException *exception) {
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}
- (void)noti_NewChatPush:(NSNotification *)notification {
    @try{
        [self changeNavBarAnimateWithIsClear:NO];
        
        NSArray *documentPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
        NSString *documentsDir = [documentPaths objectAtIndex:0];
        NSString *DBName = [AppDelegate getDBName];
        NSString *DBPath = [documentsDir stringByAppendingPathComponent:DBName];
        
        if(notification.userInfo!=nil){
            NSString *message = [notification.userInfo objectForKey:@"MESSAGE"];
            NSString *noti = [notification.userInfo objectForKey:@"NOTI"];
            NSDictionary *dict = [NSDictionary dictionary];
            if(noti==nil){
                NSData *jsonData = [message dataUsingEncoding:NSUTF8StringEncoding];
                NSError *error;
                dict = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
            } else {
                dict = notification.userInfo;
            }
            
            NSArray *dataSet = [dict objectForKey:@"DATASET"];
            NSString *roomNo = [[dataSet objectAtIndex:0] objectForKey:@"ROOM_NO"];
            
            NSMutableArray *roomChatArr = [NSMutableArray array];
            NSString *sqlString = [NSString stringWithFormat:@"SELECT ROOM_NM, ROOM_NOTI FROM CHAT_ROOMS WHERE ROOM_NO = %@", roomNo];
            sqlite3 *database;
            if (sqlite3_open([DBPath UTF8String], &database) == SQLITE_OK) {
                NSString *sql = sqlString;
                const char *sqlStatement = [sql UTF8String];
                sqlite3_stmt *compiledStatement;
                
                if (sqlite3_prepare_v2(database, sqlStatement, -1, &compiledStatement, NULL) == SQLITE_OK) {
                    int rowCount = 0;
                    
                    while(sqlite3_step(compiledStatement) == SQLITE_ROW) {
                        rowCount = sqlite3_column_int(compiledStatement, 0);
                        
                        NSMutableDictionary *dic = [[NSMutableDictionary alloc]init];
                        
                        for(int j=0; j<sqlite3_column_count(compiledStatement);j++){
                            NSString *keyString = [NSString stringWithUTF8String:(sqlite3_column_name(compiledStatement, j))];
                            NSString *valueString = nil;
                            if (sqlite3_column_text(compiledStatement, j)==NULL) {
                                valueString = @"null";
                            }else{
                                valueString = [NSString stringWithUTF8String:(char *)sqlite3_column_text(compiledStatement, j)];
                            }
                            [dic setObject:valueString forKey:keyString];
                        }
                        [roomChatArr addObject:dic];
                    }
                }else {
                    NSLog(@"not SQLITE_OK");
                    printf("could not prepare statement: %s\n", sqlite3_errmsg(database));
                }
                sqlite3_finalize(compiledStatement);
                
            }else{
                NSLog(@"db not open");
            }
            sqlite3_close(database);
            
            //NSLog(@"roomChatArr : %@", roomChatArr);
            UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
            ChatViewController *vc = (ChatViewController *)[storyboard instantiateViewControllerWithIdentifier:@"ChatViewController"];
            
            RightSideViewController *rightViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"RightSideViewController"];
            CGRect screen = [[UIScreen mainScreen]bounds];
            CGFloat screenWidth = screen.size.width;
            CGFloat screenHeight = screen.size.height;
            rightViewController.view.frame = CGRectMake(rightViewController.view.frame.origin.x, rightViewController.view.frame.origin.y, screenWidth, screenHeight);
            
            if(roomChatArr.count>0){
                NSString *roomNoti = [[roomChatArr objectAtIndex:0]objectForKey:@"ROOM_NOTI"];
                NSString *roomName = [NSString urlDecodeString:[[roomChatArr objectAtIndex:0]objectForKey:@"ROOM_NM"]];
                vc.roomNo = roomNo;
                vc.roomNoti = roomNoti;
                vc.roomName = roomName;
                rightViewController.roomNo = roomNo;
                rightViewController.roomNoti = roomNoti;
            }
            
            LGSideMenuController *container = [LGSideMenuController sideMenuControllerWithRootViewController:vc leftViewController:nil rightViewController:rightViewController];
            [container setNavigationItemTitle:[NSString urlDecodeString:vc.roomName]];
            
            //UIBarButtonItem *left = [[UIBarButtonItem alloc]initWithTitle:@"" style:UIBarButtonItemStylePlain target:self action:nil];
            //self.navigationItem.backBarButtonItem = left;
            self.navigationController.navigationBar.topItem.title = @"";
            
            NSString *sqlString2 = [NSString stringWithFormat:@"UPDATE CHAT_ROOMS SET NEW_CHAT = 0 WHERE ROOM_NO=%@;", roomNo];
            [self crudStatement:self.DBPath :sqlString2];
            
            NSString *currentClass = NSStringFromClass([[UIViewController currentViewController] class]);
            NSString *chatDetailClass = NSStringFromClass([vc class]);
            
            vc.fromSegue = @"NOTI_CHAT_DETAIL";
            vc.notiChatDic = dict;
            NSLog(@"TeamSelectViewController currentClass : %@, chatDetailClass : %@", currentClass, chatDetailClass);
            
            if([currentClass isEqualToString:chatDetailClass]){
                //send notification to postdetail and if noti postno equal current postno, not open modal
                [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_ChatDetailView" object:nil userInfo:dict];
            } else {
                NSString *strClass = NSStringFromClass([self class]);
                if([currentClass isEqualToString:strClass]){
                    CATransition* transition = [CATransition animation];
                    transition.duration = 0.3f;
                    transition.type = kCATransitionMoveIn;
                    transition.subtype = kCATransitionFromTop;
                    [self.navigationController.view.layer addAnimation:transition forKey:kCATransition];
                    [self.navigationController pushViewController:container animated:NO];
                }
            }
        }
        
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

#pragma mark - UIScrollView Delegate
- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate{
    //NSLog(@"%s", __func__);
    //[self.imageView setFrame:CGRectMake(0, -[self navBarBottom], self.view.frame.size.width, self.imageView.frame.size.height)];
    
    CGRect screen = [[UIScreen mainScreen]bounds];
    CGFloat screenWidth = screen.size.width;
    CGFloat screenHeight = screen.size.height;
    if ([MFUtil retinaDisplayCapable]) {
        screenHeight = screenHeight*2;
        screenWidth = screenWidth*2;
    }
    int height = 270;
    
    NSArray *tmp = [MODEL_NAME componentsSeparatedByString:@" "];
    if ([tmp[1] hasPrefix:@"5"]) {
        height = 370;
    }else if ([tmp[1] hasPrefix:@"6"] || [tmp[1] hasPrefix:@"7"] || [tmp[1] hasPrefix:@"8"] || [tmp[1] hasPrefix:@"X"]) {
        if (tmp.count==2) {
            height = 570;
        }else{
            height = 470;
        }
    }
    
    if (scrollView.contentSize.height-scrollView.contentOffset.y<self.view.frame.size.height) {
        CGPoint offset = scrollView.contentOffset;
        CGRect bounds = scrollView.bounds;
        CGSize size = scrollView.contentSize;
        UIEdgeInsets inset = scrollView.contentInset;
        float y = offset.y + bounds.size.height - inset.bottom;
        float h = size.height;
        
        float reload_distance = 10;
        
        //NSLog(@"y : %f, h : %f", y, h);
        //NSLog(@"scrollView.contentOffset.y : %f", scrollView.contentOffset.y);
        
        if(y > h + reload_distance) {
            //데이터로드
            /*if(self.selectBoardKind==1)*/ if(snsKind==1) [self callWebService:@"getPostLists"];
            else if(snsKind==2)/*if(self.selectBoardKind==2)*/ [self callWebService:@"getTaskLists"];
        }
    }
    [self scrollViewDidEndDragging2:scrollView willDecelerate:NO];
}
- (void)scrollViewDidEndDragging2:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate {
    //    if(isRefresh) {
    //        return;
    //    }
    
    isDragging = NO;
    
    float topSize = self.navigationController.navigationBar.frame.size.height + [UIApplication sharedApplication].statusBarFrame.size.height;
    if(scrollView.contentOffset.y <= -(topSize+100)) { //+100안해주면 top에서 아래서 스크롤 할때마다 호출됨
        [self startLoading];
    }
}
- (void)startLoading {
    //데이터새로고침
    [self refreshCallGetList];
}


- (void)scrollViewDidScroll:(UIScrollView *)scrollView{
    CGFloat offsetY = scrollView.contentOffset.y;
    
    if(offsetY < LIMIT_OFFSET_Y) {
        [scrollView setContentOffset:CGPointMake(0, LIMIT_OFFSET_Y)];
    }
    
    CGFloat newOffsetY = scrollView.contentOffset.y;
    if (newOffsetY <= -IMAGE_HEIGHT) {
        self.imageView.frame = CGRectMake(0, newOffsetY, kScreenWidth, -newOffsetY);
    }
    
    if ((int)offsetY>[self naviChangePoint]) {
        [self changeNavBarAnimateWithIsClear:NO];
    } else {
        [self changeNavBarAnimateWithIsClear:YES];
    }
    
    if (self.lastContentOffset < scrollView.contentOffset.y) {
        [UIView animateWithDuration:0.1 animations:^{
            [self.toolBar setHidden:YES];
            [self.addButton setHidden:YES];
        }];
    } else if (self.lastContentOffset > scrollView.contentOffset.y) {
        [self.toolBar setHidden:NO];
        [self.addButton setHidden:NO];
    } else {
        NSLog(@"didn't moved");
    }
}

- (void)changeNavBarAnimateWithIsClear:(BOOL)isClear {
    [UIView animateWithDuration:0.3 animations:^{
         if (isClear == YES) {
             //self.navigationController.navigationBar.translucent = YES;
             
             UIView *statusBar = [[[UIApplication sharedApplication] valueForKey:@"statusBarWindow"] valueForKey:@"statusBar"];
             statusBar.backgroundColor = [UIColor clearColor];
             [self.navigationController.navigationBar setBackgroundImage:[UIImage new] forBarMetrics:UIBarMetricsDefault];
             self.navigationController.navigationBar.shadowImage = [UIImage new];
             self.navigationController.navigationBar.backgroundColor = [UIColor clearColor];
             //self.navigationController.navigationBar.barTintColor = [UIColor clearColor];
             
             self.navigationItem.titleView = nil;
             
             naviClear = YES;

         } else {
             //self.navigationController.navigationBar.translucent = NO;
             
             UIView *statusBar = [[[UIApplication sharedApplication] valueForKey:@"statusBarWindow"] valueForKey:@"statusBar"];
             statusBar.backgroundColor = [MFUtil myRGBfromHex:@"1D4696"];
             self.navigationController.navigationBar.backgroundColor = [MFUtil myRGBfromHex:@"1D4696"];
             //self.navigationController.navigationBar.barTintColor = [MFUtil myRGBfromHex:@"1D4696"];
             
             self.navigationItem.titleView = [MFStyle navigationTitleStyle1:self.snsName];
             
             naviClear = NO;
         }
     }];
}

- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView {
    self.lastContentOffset = scrollView.contentOffset.y;
}

- (UIImage *)getScaledImage:(UIImage *)image scaledToMaxWidth:(CGFloat)width {
    CGFloat oldWidth = image.size.width;
    CGFloat oldHeight = image.size.height;
    
    CGFloat scaleFactor=1;
    
    //if (oldWidth > width) {
    scaleFactor = width / oldWidth;
    //} else  //oldWidth<width and height==0이면, scale하지 않음.
    //    return image;
    
    CGFloat newHeight = oldHeight * scaleFactor;
    CGFloat newWidth = oldWidth * scaleFactor;
    CGSize newSize = CGSizeMake(newWidth, newHeight);
    
    //NSLog(@"oldWidth : %f, oldHeight : %f", oldWidth, oldHeight);
    //NSLog(@"newWidth : %f, newHeight : %f", newWidth, newHeight);
    
    //UIGraphicsBeginImageContext(newSize);
    UIGraphicsBeginImageContextWithOptions(newSize, NO, [UIScreen mainScreen].scale);
    [image drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)];
    UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return newImage;
}

- (UIImage*)imageByScalingAndCroppingForSize:(CGSize)targetSize :(UIImage *)image {
    UIImage *sourceImage = image;
    UIImage *newImage = nil;
    CGSize imageSize = sourceImage.size;
    CGFloat width = imageSize.width;
    CGFloat height = imageSize.height;
    CGFloat targetWidth = targetSize.width;
    CGFloat targetHeight = targetSize.height;
    CGFloat scaleFactor = 0.0;
    CGFloat scaledWidth = targetWidth;
    CGFloat scaledHeight = targetHeight;
    CGPoint thumbnailPoint = CGPointMake(0.0,0.0);
    
    if (CGSizeEqualToSize(imageSize, targetSize) == NO) {
        CGFloat widthFactor = targetWidth / width;
        CGFloat heightFactor = targetHeight / height;
        
        if (widthFactor > heightFactor)
            scaleFactor = widthFactor; // scale to fit height
        else
            scaleFactor = heightFactor; // scale to fit width
        scaledWidth  = width * scaleFactor;
        scaledHeight = height * scaleFactor;
        
        // center the image
        if (widthFactor > heightFactor)
        {
            thumbnailPoint.y = (targetHeight - scaledHeight) * 0.5;
        }
        else
            if (widthFactor < heightFactor)
            {
                thumbnailPoint.x = (targetWidth - scaledWidth) * 0.5;
            }
    }
    
    //UIGraphicsBeginImageContext(targetSize); // this will crop
    UIGraphicsBeginImageContextWithOptions(targetSize, NO, [UIScreen mainScreen].scale);
    
    CGRect thumbnailRect = CGRectZero;
    thumbnailRect.origin = thumbnailPoint;
    thumbnailRect.size.width  = scaledWidth;
    thumbnailRect.size.height = scaledHeight;
    
    [sourceImage drawInRect:thumbnailRect];
    
    newImage = UIGraphicsGetImageFromCurrentImageContext();
    if(newImage == nil)
        NSLog(@"could not scale image");
    
    //pop the context to get back to the default
    UIGraphicsEndImageContext();
    return newImage;
}

-(void)sendToHilee:(NSString *)func :(NSException *)exception{
    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:NSLocalizedString(@"exception_msg_exception", @"exception_msg_exception") preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction* sendButton = [UIAlertAction actionWithTitle:@"관리자에게 전송" style:UIAlertActionStyleDefault
                                                       handler:^(UIAlertAction * action) {
                                                           [alert dismissViewControllerAnimated:YES completion:nil];
                                                           
                                                           UIDevice *device = [UIDevice currentDevice];
                                                           NSString *myUserNo = [[NSUserDefaults standardUserDefaults] objectForKey:@"CUSER_NO"];
                                                           NSString *dvcKind = [device modelName];
                                                           NSString *dvcVer = device.systemVersion;
                                                           
                                                           MFMessageComposeViewController *controller = [[MFMessageComposeViewController alloc] init];
                                                           if([MFMessageComposeViewController canSendText])
                                                           {
                                                               controller.body = [NSString stringWithFormat:@"%@ / %@ / %@ \n%@ \n\n%@", dvcKind, dvcVer, myUserNo, func, exception];
                                                               controller.recipients = [NSArray arrayWithObject:@"01093917822"];
                                                               controller.messageComposeDelegate = self;
                                                               [self presentViewController:controller animated:YES completion:nil];
                                                           }
                                                       }];
    
    UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                     handler:^(UIAlertAction * action) {
                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                     }];
    
    [alert addAction:sendButton];
    [alert addAction:okButton];
    [self presentViewController:alert animated:YES completion:nil];
}

- (void)messageComposeViewController:(nonnull MFMessageComposeViewController *)controller didFinishWithResult:(MessageComposeResult)result {
    NSString *resultString;
    switch (result) {
        case MessageComposeResultCancelled:
            resultString = NSLocalizedString(@"cancel", @"");
            break;
            
        case MessageComposeResultFailed:
        {
            resultString = NSLocalizedString(@"fail", @"");
            break;
        }
            
        case MessageComposeResultSent:
            resultString = NSLocalizedString(@"success", @"");
            break;
            
        default:
            break;
    }
    [self dismissViewControllerAnimated:YES completion:^{
        NSLog(@"%s resultString : %@",__FUNCTION__,resultString);
    }];
}


@end
