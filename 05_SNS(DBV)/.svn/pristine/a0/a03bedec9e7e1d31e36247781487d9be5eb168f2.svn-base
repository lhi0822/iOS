//
//  MyViewController.m
//  mfinity_sns
//
//  Created by hilee on 2017. 3. 8..
//  Copyright © 2017년 com.dbvalley. All rights reserved.
//

#import "MyViewController.h"
#import "MyTableViewCell.h"
#import "PHLibListViewController.h"
#import "PHLibGridViewController.h"
#import "MyMessageViewController.h"
#import "PostDetailViewController.h"
#import "TaskDetailViewController.h"
#import "MFStyle.h"
#import "MFDBHelper.h"

#define HEADER_HEIGHT 45
#define PROFILE_IMG_SIZE 30

#define DEGREES_TO_RADIANS(angle) ((angle) / 180.0 * M_PI)

#define REFRESH_TABLEVIEW_DEFAULT_ROW               64.f
#define REFRESH_HEADER_DEFAULT_HEIGHT               64.f
#define kSupplementaryViewID @"SUP_VIEW_ID"
#define MODEL_NAME [[UIDevice currentDevice] modelName]

@interface MyViewController () {
    UIImage *userImg;
    NSString *profileThumbImg;
    NSString *profileThumbImg2;
    
    UIImage *bgImg;
    NSString *profileBgImg;
    NSString *profileBgImg2;
    BOOL isProfile;
    
    NSString *userId;
    AppDelegate *appDelegate;
}

@end

@implementation MyViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    NSLog(@"MyViewController fromSegue : %@", self.fromSegue);
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_NewPostPush:) name:@"noti_NewPostPush" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_NewTaskPush:) name:@"noti_NewTaskPush" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_NewChatPush:) name:@"noti_NewChatPush" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_ChangeProfilePush:) name:@"noti_ChangeProfilePush" object:nil];
    
    self.navigationController.navigationBar.translucent = NO;
    self.navigationController.navigationBar.barTintColor = [MFUtil myRGBfromHex:@"1D4696"];
    self.navigationController.navigationBar.tintColor = [UIColor whiteColor];
    self.navigationItem.titleView = [MFStyle navigationTitleStyle1:NSLocalizedString(@"마이페이지", @"마이페이지")];
    
    appDelegate = (AppDelegate *)[UIApplication sharedApplication].delegate;
    
    if([self.fromSegue isEqualToString:@"PROFILE_TO_MY_MODAL"]){
        self.tableBottomConstraint.constant = 0;
        
        UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
        [button setImage:[self getScaledImage:[UIImage imageNamed:@"btn_close.png"] scaledToMaxWidth:20.0f] forState:UIControlStateNormal];
        button.adjustsImageWhenDisabled = NO;
        button.frame = CGRectMake(0, 0, 20, 20);
        [button addTarget:self action:@selector(closeModal:) forControlEvents:UIControlEventTouchUpInside];
        
        UIBarButtonItem *customBarItem = [[UIBarButtonItem alloc] initWithCustomView:button];
        self.navigationItem.leftBarButtonItem = customBarItem;
        self.navigationItem.hidesBackButton = YES;
        
    } else {
        self.tableBottomConstraint.constant = -44;
        self.navigationItem.hidesBackButton = YES;
    }
    
    UIView *lineView = [[UIView alloc] initWithFrame:CGRectMake(0, self.imgView.frame.size.height, self.view.frame.size.width, 0.5)];
    lineView.backgroundColor = [UIColor grayColor];
    [self.imgView addSubview:lineView];
    
    self.profileImgView.layer.cornerRadius = self.profileImgView.frame.size.width/2;
    self.profileImgView.clipsToBounds = YES;
    self.profileImgView.contentMode = UIViewContentModeScaleAspectFill;
    self.profileImgView.backgroundColor = [UIColor whiteColor];
    self.profileImgView.userInteractionEnabled = YES;
    self.profileImgView.layer.borderColor = [[UIColor lightGrayColor] CGColor];
    self.profileImgView.layer.borderWidth = 0.3;
    
    self.editImgButton.layer.cornerRadius = self.editImgButton.frame.size.width/2;
    self.editImgButton.clipsToBounds = YES;
    self.editImgButton.contentMode = UIViewContentModeScaleAspectFill;
    self.editImgButton.layer.borderColor = [[UIColor lightGrayColor] CGColor];
    self.editImgButton.layer.borderWidth = 0.3;
    [self.editImgButton addTarget:self action:@selector(imageEditClick) forControlEvents:UIControlEventTouchUpInside];
    
    self.profileBgImgView.clipsToBounds = YES;
    self.profileBgImgView.contentMode = UIViewContentModeScaleAspectFill;
    self.profileBgImgView.backgroundColor = [UIColor whiteColor];
    self.profileBgImgView.userInteractionEnabled = YES;
    
    self.editBgButton.layer.cornerRadius = self.editBgButton.frame.size.width/2;
    self.editBgButton.clipsToBounds = YES;
    self.editBgButton.contentMode = UIViewContentModeScaleAspectFill;
    [self.editBgButton addTarget:self action:@selector(bgImageEditClick) forControlEvents:UIControlEventTouchUpInside];
    
    self.profileKeyArr = [NSMutableArray array];
    [self.profileKeyArr addObject:@"이름"];
    [self.profileKeyArr addObject:@"상태메시지"];
    
    self.accountKeyArr = [NSMutableArray array];
    [self.accountKeyArr addObject:@"전화번호"];
    [self.accountKeyArr addObject:@"회사"];
    [self.accountKeyArr addObject:@"부서"];
    [self.accountKeyArr addObject:@"계정"];
    
    self.settingKeyArr = [NSMutableArray array];
    [self.settingKeyArr addObject:@"탭 순서 변경"];
    //[self.settingKeyArr addObject:@"게시판 형태 변경"];
    
    self.appInfoKeyArr = [NSMutableArray array];
    [self.appInfoKeyArr addObject:@"앱 버전 확인"];
    
    [self callGetProfile];
    
}

- (void)viewWillAppear:(BOOL)animated{
    NSLog(@"%s", __func__);
    [super viewWillAppear:animated];
    [self.tabBarController.tabBar setHidden:NO];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {
    [self.view endEditing:YES];
}

- (void)callGetProfile {
    NSString *urlString = appDelegate.main_url;
    NSString *userNo = [[NSUserDefaults standardUserDefaults] objectForKey:@"CUSER_NO"];
    NSString *paramString = [NSString stringWithFormat:@"usrNo=%@", userNo];
    NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"getProfile"]];
    MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
    session.delegate = self;
    if ([session start]) {
        [SVProgressHUD show];
    }
}

- (void)settingMyInfo :(NSArray *)dataSet{
    @try {
        NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
        //NSLog(@"dataSet : %@", dataSet);
        //NSString *userId = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"CUSER_ID"]];
        userId = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"CUSER_ID"]];
        NSString *userName = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"USER_NM"]];
        NSString *phoneNo = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"PHONE_NO"]];
        profileThumbImg = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"PROFILE_IMG"]];
        NSString *profileMsg = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"PROFILE_MSG"]];
        NSString *compName = [NSString urlDecodeString:[prefs objectForKey:@"COMP_NM"]];
        NSString *deptName = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"DEPT_NM"]];
        profileBgImg = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"PROFILE_BG_IMG"]];
        
        self.profileValArr = [NSMutableArray array];
        [self.profileValArr addObject:userName];
        [self.profileValArr addObject:profileMsg];
        
        self.accountValArr = [NSMutableArray array];
        [self.accountValArr addObject:phoneNo];
        [self.accountValArr addObject:compName];
        [self.accountValArr addObject:deptName];
        [self.accountValArr addObject:userId];
        
        //        NSUserDefaults *chatPrefs = [NSUserDefaults standardUserDefaults];
        //        //[chatPrefs setObject:nil forKey:@"ROOM_NO"];
        //        [chatPrefs removeObjectForKey:@"ROOM_NO"];
        //        [chatPrefs synchronize];
        
        appDelegate.currChatRoomNo = nil;
        
        userImg = nil;
        bgImg = nil;
        
        MFDBHelper *dbHelper = [[MFDBHelper alloc]init];
        
        if(![profileThumbImg isEqualToString:@""]){
            userImg = [self imageByScalingAndCroppingForSize:CGSizeMake(120, 120) :[dbHelper saveThumbImage:@"profile" :profileThumbImg]];
        } else {
            userImg = [self imageByScalingAndCroppingForSize:CGSizeMake(120, 120) :[UIImage imageNamed:@"profile_default.png"]];
        }
        self.profileImgView.image = userImg;
        
        if(![profileBgImg isEqualToString:@""]){
            bgImg = [self imageByScalingAndCroppingForSize:CGSizeMake(self.profileBgImgView.frame.size.width, self.profileBgImgView.frame.size.height) :[dbHelper saveThumbImage:@"profileBg" :profileBgImg]];
        } else {
            bgImg = [self imageByScalingAndCroppingForSize:CGSizeMake(self.profileBgImgView.frame.size.width, self.profileBgImgView.frame.size.height) :[UIImage imageNamed:@"profile_bg_default.png"]];
        }
        self.profileBgImgView.image = bgImg;
        
        self.tableView.tableFooterView = [[UIView alloc]initWithFrame:CGRectZero];
        
        UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapOnProfileImg:)];
        [self.profileImgView addGestureRecognizer:tap];
        
        UITapGestureRecognizer *tap2 = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapOnProfileBgImg:)];
        [self.profileBgImgView addGestureRecognizer:tap2];
        
        [self.tableView reloadData];
        
    } @catch (NSException *exception) {
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

- (void)noti_NewPostPush:(NSNotification *)notification {
    @try{
        if(notification.userInfo!=nil){
            NSString *message = [notification.userInfo objectForKey:@"MESSAGE"];
            NSDictionary *dict = [NSDictionary dictionary];
            if(message!=nil){
                NSData *jsonData = [message dataUsingEncoding:NSUTF8StringEncoding];
                NSError *error;
                dict = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
            } else {
                dict = notification.userInfo;
            }
            
            UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
            PostDetailViewController *vc = (PostDetailViewController *)[storyboard instantiateViewControllerWithIdentifier:@"PostDetailViewController"];
            UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:vc];
            
            vc.fromSegue = @"NOTI_POST_DETAIL";
            vc.notiPostDic = dict;
            [self presentViewController:nav animated:YES completion:nil];
        }
        
    } @catch (NSException *exception) {
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

- (void)noti_NewTaskPush:(NSNotification *)notification {
    @try{
        if(notification.userInfo!=nil){
            NSString *message = [notification.userInfo objectForKey:@"MESSAGE"];
            NSDictionary *dict = [NSDictionary dictionary];
            if(message!=nil){
                NSData *jsonData = [message dataUsingEncoding:NSUTF8StringEncoding];
                NSError *error;
                dict = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
            } else {
                dict = notification.userInfo;
            }
            
            UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
            TaskDetailViewController *vc = (TaskDetailViewController *)[storyboard instantiateViewControllerWithIdentifier:@"TaskDetailViewController"];
            UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:vc];
            
            vc.fromSegue = @"NOTI_TASK_DETAIL";
            vc.notiTaskDic = dict;
            [self presentViewController:nav animated:YES completion:nil];
        }
        
    } @catch (NSException *exception) {
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}


- (void)noti_NewChatPush:(NSNotification *)notification {
    @try{
        NSArray *documentPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
        NSString *documentsDir = [documentPaths objectAtIndex:0];
        NSString *DBName = [AppDelegate getDBName];
        NSString *DBPath = [documentsDir stringByAppendingPathComponent:DBName];
        
        if(notification.userInfo!=nil){
            NSString *message = [notification.userInfo objectForKey:@"MESSAGE"];
            NSString *noti = [notification.userInfo objectForKey:@"NOTI"];
            NSDictionary *dict = [NSDictionary dictionary];
            if(noti==nil){
                NSData *jsonData = [message dataUsingEncoding:NSUTF8StringEncoding];
                NSError *error;
                dict = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
            } else {
                dict = notification.userInfo;
            }
            
            NSArray *dataSet = [dict objectForKey:@"DATASET"];
            NSString *roomNo = [[dataSet objectAtIndex:0] objectForKey:@"ROOM_NO"];
            
            NSMutableArray *roomChatArr = [NSMutableArray array];
            NSString *sqlString = [NSString stringWithFormat:@"SELECT ROOM_NM, ROOM_NOTI FROM CHAT_ROOMS WHERE ROOM_NO = %@", roomNo];
            sqlite3 *database;
            if (sqlite3_open([DBPath UTF8String], &database) == SQLITE_OK) {
                NSString *sql = sqlString;
                const char *sqlStatement = [sql UTF8String];
                sqlite3_stmt *compiledStatement;
                
                if (sqlite3_prepare_v2(database, sqlStatement, -1, &compiledStatement, NULL) == SQLITE_OK) {
                    int rowCount = 0;
                    
                    while(sqlite3_step(compiledStatement) == SQLITE_ROW) {
                        rowCount = sqlite3_column_int(compiledStatement, 0);
                        
                        NSMutableDictionary *dic = [[NSMutableDictionary alloc]init];
                        
                        for(int j=0; j<sqlite3_column_count(compiledStatement);j++){
                            NSString *keyString = [NSString stringWithUTF8String:(sqlite3_column_name(compiledStatement, j))];
                            NSString *valueString = nil;
                            if (sqlite3_column_text(compiledStatement, j)==NULL) {
                                valueString = @"null";
                            }else{
                                valueString = [NSString stringWithUTF8String:(char *)sqlite3_column_text(compiledStatement, j)];
                            }
                            [dic setObject:valueString forKey:keyString];
                        }
                        [roomChatArr addObject:dic];
                    }
                }else {
                    NSLog(@"not SQLITE_OK");
                    printf("could not prepare statement: %s\n", sqlite3_errmsg(database));
                }
                sqlite3_finalize(compiledStatement);
                
            }else{
                NSLog(@"db not open");
            }
            sqlite3_close(database);
            
            //NSLog(@"roomChatArr : %@", roomChatArr);
            UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
            ChatViewController *vc = (ChatViewController *)[storyboard instantiateViewControllerWithIdentifier:@"ChatViewController"];
            
            RightSideViewController *rightViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"RightSideViewController"];
            CGRect screen = [[UIScreen mainScreen]bounds];
            CGFloat screenWidth = screen.size.width;
            CGFloat screenHeight = screen.size.height;
            rightViewController.view.frame = CGRectMake(rightViewController.view.frame.origin.x, rightViewController.view.frame.origin.y, screenWidth, screenHeight);
            
            if(roomChatArr.count>0){
                NSString *roomNoti = [[roomChatArr objectAtIndex:0]objectForKey:@"ROOM_NOTI"];
                NSString *roomName = [NSString urlDecodeString:[[roomChatArr objectAtIndex:0]objectForKey:@"ROOM_NM"]];
                vc.roomNo = roomNo;
                vc.roomNoti = roomNoti;
                vc.roomName = roomName;
                rightViewController.roomNo = roomNo;
                rightViewController.roomNoti = roomNoti;
            }
            
            LGSideMenuController *container = [LGSideMenuController sideMenuControllerWithRootViewController:vc leftViewController:nil rightViewController:rightViewController];
            [container setNavigationItemTitle:[NSString urlDecodeString:vc.roomName]];
            
            //UIBarButtonItem *left = [[UIBarButtonItem alloc]initWithTitle:@"" style:UIBarButtonItemStylePlain target:self action:nil];
            //self.navigationItem.backBarButtonItem = left;
            self.navigationController.navigationBar.topItem.title = @"";
            
            NSString *sqlString2 = [NSString stringWithFormat:@"UPDATE CHAT_ROOMS SET NEW_CHAT = 0 WHERE ROOM_NO=%@;", roomNo];
            [self crudStatement:DBPath :sqlString2];
            
            NSString *currentClass = NSStringFromClass([[UIViewController currentViewController] class]);
            NSString *chatDetailClass = NSStringFromClass([vc class]);
            
            vc.fromSegue = @"NOTI_CHAT_DETAIL";
            vc.notiChatDic = dict;
            
            if([currentClass isEqualToString:chatDetailClass]){
                //send notification to postdetail and if noti postno equal current postno, not open modal
                [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_ChatDetailView" object:nil userInfo:dict];
            } else {
                NSString *strClass = NSStringFromClass([self class]);
                if([currentClass isEqualToString:strClass]){
                    CATransition* transition = [CATransition animation];
                    transition.duration = 0.3f;
                    transition.type = kCATransitionMoveIn;
                    transition.subtype = kCATransitionFromTop;
                    [self.navigationController.view.layer addAnimation:transition forKey:kCATransition];
                    [self.navigationController pushViewController:container animated:NO];
                }
            }
        }
        
    } @catch (NSException *exception) {
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

- (void)noti_ChangeProfilePush:(NSNotification *)notification {
    NSLog(@"%s", __func__);
    @try{
        NSLog(@"notification : %@", notification.userInfo);
        //사진을 썸네일로 해서 많이 깨짐 profileBgImg2 사용하자
        
        NSString *myUserNo = [[NSUserDefaults standardUserDefaults] objectForKey:@"CUSER_NO"];
        NSArray *dataSet = [notification.userInfo objectForKey:@"DATASET"];
        NSString *profileMsg = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"PROFILE_MSG"]];
        //NSString *profileImg2 = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"PROFILE_IMG"]];
        profileThumbImg2 = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"PROFILE_IMG_THUMB"]];
        NSString *userNo = [[dataSet objectAtIndex:0] objectForKey:@"CUSER_NO"];
        profileBgImg2 = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"PROFILE_BG_IMG"]];
        //NSString *profileBgThumbImg2 = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"PROFILE_BACKGROUND_IMG_THUMB"]];
        
        //NSLog(@"userNo : %@, myUserNo : %@", userNo, myUserNo);
        
        if([[NSString stringWithFormat:@"%@", userNo] isEqualToString:[NSString stringWithFormat:@"%@", myUserNo]]){
            MFDBHelper *dbHelper = [[MFDBHelper alloc]init];
            
            if(![profileThumbImg2 isEqualToString:@""]){
                userImg = [self imageByScalingAndCroppingForSize:CGSizeMake(120, 120) :[dbHelper saveThumbImage:@"profile" :profileThumbImg2]];
            } else {
                userImg = [self imageByScalingAndCroppingForSize:CGSizeMake(120, 120) :[UIImage imageNamed:@"profile_default.png"]];
            }
            
            if(![profileBgImg2 isEqualToString:@""]){
                bgImg = [self imageByScalingAndCroppingForSize:CGSizeMake(self.profileBgImgView.frame.size.width, self.profileBgImgView.frame.size.height) :[dbHelper saveThumbImage:@"profileBg" :profileBgImg2]];
            } else {
                bgImg = [self imageByScalingAndCroppingForSize:CGSizeMake(self.profileBgImgView.frame.size.width, self.profileBgImgView.frame.size.height) :[UIImage imageNamed:@"profile_bg_default.png"]];
            }
            
            self.profileImgView.image = userImg;
            self.profileBgImgView.image = bgImg;
            
            [self.profileValArr replaceObjectAtIndex:1 withObject:profileMsg];
            [self.tableView reloadData];
        }
    } @catch (NSException *exception) {
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}


-(void) crudStatement:(NSString *)dbPath :(NSString *)crudStmt{
    NSLog(@"%s", __func__);
    sqlite3 *database;
    NSLog(@"MyViewController crudStmt : %@", crudStmt);
    if (sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
        const char *sqlStatement = [crudStmt UTF8String];
        
        sqlite3_stmt *compiledStatement;
        if (sqlite3_prepare_v2(database, sqlStatement, -1, &compiledStatement, NULL) == SQLITE_OK) {
            
            if(sqlite3_step(compiledStatement) != SQLITE_DONE){
                NSLog(@"Error updating table: %s", sqlite3_errmsg(database));
                
            }else{
                NSLog(@"MyViewController ok");
            }
            
            if(sqlite3_finalize(compiledStatement) != SQLITE_OK){
                NSLog(@"SQL Error : %s",sqlite3_errmsg(database));
            }
        }else {
            NSLog(@"not SQLITE_OK");
            printf("could not prepare statement: %s\n", sqlite3_errmsg(database));
        }
    }else{
        
    }
    sqlite3_close(database);
}

-(void)closeModal:(id)sender {
    NSLog(@"%s", __func__);
    [self dismissViewControllerAnimated:YES completion:nil];
}

- (void)tapOnProfileImg:(UITapGestureRecognizer*)tap{
    isProfile=true;
    [self imageEditClick];
}

- (void)tapOnProfileBgImg:(UITapGestureRecognizer*)tap{
    isProfile=false;
    [self bgImageEditClick];
}

- (void)imageEditClick {
    //NSLog(@"profileImg : %@", profileImg);
    //NSLog(@"profileImg2 : %@", profileImg2);
    UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:nil message:nil preferredStyle:UIAlertControllerStyleActionSheet];
    UIAlertAction *takePictureAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"사진촬영", @"사진촬영")
                                                                style:UIAlertActionStyleDefault
                                                              handler:^(UIAlertAction * action){
                                                                  if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera]) {
                                                                      [self cameraAccessCheck];
                                                                  }else{
                                                                      [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                                  }
                                                                  
                                                              }];
    
    UIAlertAction *selectPhotoAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"사진선택", @"사진선택")
                                                                style:UIAlertActionStyleDefault
                                                              handler:^(UIAlertAction * action){
                                                                  [self photoAccessCheck:@"PHOTO"];
                                                                  [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                              }];
    
    
    if(![profileThumbImg isEqualToString:@""] && ![profileThumbImg2 isEqualToString:@""]){
        UIAlertAction *defaultImageAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"기본이미지로 변경", @"기본이미지로 변경")
                                                                     style:UIAlertActionStyleDefault
                                                                   handler:^(UIAlertAction * action){
                                                                       UIAlertView *alert = [[UIAlertView alloc]initWithTitle:nil message:@"기본이미지로 변경하시겠습니까?" delegate:self cancelButtonTitle:@"취소" otherButtonTitles:@"확인", nil];
                                                                       alert.tag = 2;
                                                                       [alert show];
                                                                       
                                                                       [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                                   }];
        
        [actionSheet addAction:defaultImageAction];
    }
    
    [actionSheet addAction:takePictureAction];
    [actionSheet addAction:selectPhotoAction];

    if([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad){
        UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"취소", @"취소")
                                                               style:UIAlertActionStyleDefault
                                                             handler:^(UIAlertAction * action){
                                                                 [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                             }];
        [actionSheet addAction:cancelAction];
        
        [actionSheet.popoverPresentationController setPermittedArrowDirections:0];
        CGRect rect = self.view.frame;
        rect.origin.x = (self.view.frame.size.width/2)-(actionSheet.view.frame.size.width/2);
        rect.origin.y = (self.view.frame.size.height/2)-(actionSheet.view.frame.size.height/2);
        actionSheet.popoverPresentationController.sourceView = self.view;
        actionSheet.popoverPresentationController.sourceRect = rect;
    } else {
        UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"취소", @"취소")
                                                               style:UIAlertActionStyleCancel
                                                             handler:^(UIAlertAction * action){
                                                                 [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                             }];
        [actionSheet addAction:cancelAction];
    }
    
    [self presentViewController:actionSheet animated:YES completion:nil];
}

- (void)bgImageEditClick {
    UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:nil message:nil preferredStyle:UIAlertControllerStyleActionSheet];
    UIAlertAction *takePictureAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"사진촬영", @"사진촬영")
                                                                style:UIAlertActionStyleDefault
                                                              handler:^(UIAlertAction * action){
                                                                  if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera]) {
                                                                      [self cameraAccessCheck];
                                                                  }else{
                                                                      [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                                  }
                                                                  
                                                              }];
    
    UIAlertAction *selectPhotoAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"사진선택", @"사진선택")
                                                                style:UIAlertActionStyleDefault
                                                              handler:^(UIAlertAction * action){
                                                                  [self photoAccessCheck:@"PHOTO"];
                                                                  [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                              }];
    
    
    if(![profileBgImg isEqualToString:@""] && ![profileBgImg2 isEqualToString:@""]){
        UIAlertAction *defaultImageAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"기본이미지로 변경", @"기본이미지로 변경")
                                                                     style:UIAlertActionStyleDefault
                                                                   handler:^(UIAlertAction * action){
                                                                       UIAlertView *alert = [[UIAlertView alloc]initWithTitle:nil message:@"기본이미지로 변경하시겠습니까?" delegate:self cancelButtonTitle:@"취소" otherButtonTitles:@"확인", nil];
                                                                       alert.tag = 2;
                                                                       [alert show];
                                                                       
                                                                       [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                                   }];
        
        [actionSheet addAction:defaultImageAction];
    }
    
    [actionSheet addAction:takePictureAction];
    [actionSheet addAction:selectPhotoAction];
    
    if([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad){
        UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"취소", @"취소")
                                                               style:UIAlertActionStyleDefault
                                                             handler:^(UIAlertAction * action){
                                                                 [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                             }];
        [actionSheet addAction:cancelAction];
        
        [actionSheet.popoverPresentationController setPermittedArrowDirections:0];
        CGRect rect = self.view.frame;
        rect.origin.x = (self.view.frame.size.width/2)-(actionSheet.view.frame.size.width/2);
        rect.origin.y = (self.view.frame.size.height/2)-(actionSheet.view.frame.size.height/2);
        actionSheet.popoverPresentationController.sourceView = self.view;
        actionSheet.popoverPresentationController.sourceRect = rect;
    } else {
        UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"취소", @"취소")
                                                               style:UIAlertActionStyleCancel
                                                             handler:^(UIAlertAction * action){
                                                                 [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                             }];
        [actionSheet addAction:cancelAction];
    }
    
    [self presentViewController:actionSheet animated:YES completion:nil];
}

- (void)cameraAccessCheck {
    //NSLog(@"%s", __func__);
    @try{
        int osVer = [[UIDevice currentDevice].systemVersion floatValue];
        //NSLog(@"OS VER : %d", osVer);
        [self photoAccessCheck:@"CAMERA"];
        
        AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];
        if(status == AVAuthorizationStatusAuthorized) {
            //NSLog(@"AVAuthorizationStatusAuthorized status : %ld", (long)status);
            NSLog(@"카메라 접근 허용일 경우");
            dispatch_async(dispatch_get_main_queue(), ^{
                self.picker = [[UIImagePickerController alloc] init];
                self.picker.delegate = self;
                self.picker.sourceType = UIImagePickerControllerSourceTypeCamera;
                [self presentViewController:self.picker animated:YES completion:nil];
            });
            
        } else if(status == AVAuthorizationStatusDenied) {
            //NSLog(@"AVAuthorizationStatusDenied status : %ld", (long)status);
            NSLog(@"카메라 접근 허용되지않았을 경우");
            if(osVer >= 8){
                UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 카메라]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction * action) {
                                                                     NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                     [[UIApplication sharedApplication] openURL:url];
                                                                     
                                                                     [alert dismissViewControllerAnimated:YES completion:nil];
                                                                 }];
                
                UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * action) {
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                     }];
                [alert addAction:okButton];
                [alert addAction:cancelButton];
                [self presentViewController:alert animated:YES completion:nil];
                
            } else {
                UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 카메라]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction * action) {
                                                                     NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                     [[UIApplication sharedApplication] openURL:url];
                                                                     
                                                                     [alert dismissViewControllerAnimated:YES completion:nil];
                                                                 }];
                
                UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * action) {
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                     }];
                [alert addAction:okButton];
                [alert addAction:cancelButton];
                [self presentViewController:alert animated:YES completion:nil];
            }
            
        } else if(status == AVAuthorizationStatusNotDetermined){ // not determined
            //NSLog(@"AVAuthorizationStatusNotDetermined status : %ld", (long)status);
            [AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted) {
                if(granted){ // Access has been granted ..do something
                    dispatch_async(dispatch_get_main_queue(), ^{
                        self.picker = [[UIImagePickerController alloc] init];
                        self.picker.delegate = self;
                        self.picker.sourceType = UIImagePickerControllerSourceTypeCamera;
                        [self presentViewController:self.picker animated:YES completion:nil];
                    });
                    
                } else { // Access denied ..do something
                    if(osVer >= 8){
                        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 카메라]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
                        UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                         handler:^(UIAlertAction * action) {
                                                                             NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                             [[UIApplication sharedApplication] openURL:url];
                                                                             
                                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                                         }];
                        
                        UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                             handler:^(UIAlertAction * action) {
                                                                                 [alert dismissViewControllerAnimated:YES completion:nil];
                                                                             }];
                        [alert addAction:okButton];
                        [alert addAction:cancelButton];
                        [self presentViewController:alert animated:YES completion:nil];
                        
                    } else {
                        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 카메라]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
                        UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                         handler:^(UIAlertAction * action) {
                                                                             NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                             [[UIApplication sharedApplication] openURL:url];
                                                                             
                                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                                         }];
                        
                        UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                             handler:^(UIAlertAction * action) {
                                                                                 [alert dismissViewControllerAnimated:YES completion:nil];
                                                                             }];
                        [alert addAction:okButton];
                        [alert addAction:cancelButton];
                        [self presentViewController:alert animated:YES completion:nil];
                    }
                    
                }
            }];
        } else {
            NSLog(@"status : %ld", (long)status);
        }
    } @catch (NSException *exception) {
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

- (void)photoAccessCheck :(NSString *)mediaType{
    //NSLog(@"%s", __func__);
    @try{
        int osVer = [[UIDevice currentDevice].systemVersion floatValue];
        PHAuthorizationStatus photoStatus = [PHPhotoLibrary authorizationStatus];
        
        if (photoStatus == PHAuthorizationStatusAuthorized) {
            //NSLog(@"Access has been granted.");
            if([mediaType isEqualToString:@"PHOTO"]){
                [self performSegueWithIdentifier:@"MY_PHLIB_MODAL" sender:@"PHOTO"];
            }
            
        } else if (photoStatus == PHAuthorizationStatusDenied) {
            //NSLog(@"Access has been denied.");
            if(osVer >= 8){
                UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 사진]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction * action) {
                                                                     NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                     [[UIApplication sharedApplication] openURL:url];
                                                                     
                                                                     [alert dismissViewControllerAnimated:YES completion:nil];
                                                                 }];
                
                UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * action) {
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                     }];
                [alert addAction:okButton];
                [alert addAction:cancelButton];
                [self presentViewController:alert animated:YES completion:nil];
                
            } else {
                UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 사진]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction * action) {
                                                                     NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                     [[UIApplication sharedApplication] openURL:url];
                                                                     
                                                                     [alert dismissViewControllerAnimated:YES completion:nil];
                                                                 }];
                
                UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * action) {
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                     }];
                [alert addAction:okButton];
                [alert addAction:cancelButton];
                [self presentViewController:alert animated:YES completion:nil];
            }
            
        } else if (photoStatus == PHAuthorizationStatusNotDetermined) {
            [PHPhotoLibrary requestAuthorization:^(PHAuthorizationStatus status) {
                if (status == PHAuthorizationStatusAuthorized) {
                    NSLog(@"1 StatusNotDetermined Access has been granted.");
                    if([mediaType isEqualToString:@"PHOTO"]){
                        dispatch_async(dispatch_get_main_queue(), ^{
                            [self performSegueWithIdentifier:@"MY_PHLIB_MODAL" sender:@"PHOTO"];
                        });
                    }
                    
                } else {
                    NSLog(@"2 StatusNotDetermined Access has been granted.");
                }
            }];
        } else if (photoStatus == PHAuthorizationStatusRestricted) {
            NSLog(@"Restricted access - normally won't happen.");
        }
        
        return;
    } @catch (NSException *exception) {
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

#pragma mark - UITableView Delegate & Datasrouce
-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return 6;
}

-(UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section {
    if(section == 5) {
        UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 45)];
        label.textAlignment = NSTextAlignmentCenter;
        label.font = [UIFont systemFontOfSize:15];
        label.backgroundColor = [UIColor whiteColor];
        label.text = @"로그아웃";
        label.textColor = [UIColor redColor];
        
        UITapGestureRecognizer *logoutTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapLogout:)];
        [label setUserInteractionEnabled:YES];
        [label addGestureRecognizer:logoutTap];
        
        return label;
    }
    
    return nil;
}
//- (void)tableView:(UITableView *)tableView willDisplayHeaderView:(UIView *)view forSection:(NSInteger)section {
//    UITableViewHeaderFooterView *header = (UITableViewHeaderFooterView *)view;
//    //header.tintColor = [UIColor whiteColor];
//    header.contentView.backgroundColor = [UIColor whiteColor];
//
//    if(section == 2) {
////        header.textLabel.textColor = [UIColor redColor];
////        header.textLabel.font = [UIFont systemFontOfSize:15];
////        header.textLabel.textAlignment = NSTextAlignmentCenter;
//
//    } else {
//        header.textLabel.textColor = [UIColor blackColor];
//        header.textLabel.font = [UIFont boldSystemFontOfSize:18];
//    }
//
//    CGRect headerFrame = header.frame;
//    header.textLabel.frame = headerFrame;
//}

- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section
{
    if(section == 0) {
        return @"프로필";
    } else if(section == 1) {
        return @"계정 정보";
    } else if(section == 2){
        //return @"탭 설정";
        return @"화면 설정";
    } else if(section == 3){
        return @"고객 지원";
    } else{
        return nil;
    }
}

- (CGFloat) tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {
    return HEADER_HEIGHT;
    
}

- (CGFloat) tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section {
    return 6;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    if(section == 0){
        return self.profileKeyArr.count;
        
    } else if (section == 1){
        return self.accountKeyArr.count;
        
    } else if (section == 2){
        return self.settingKeyArr.count;
        
    } else if (section == 3){
        return self.appInfoKeyArr.count;
    } else {
        return 0;
    }
}

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    return 45;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    //NSLog(@"%s",__func__);
    MyTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"MyTableViewCell"];
    
    if(cell == nil){
        cell = [[MyTableViewCell alloc] initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:@"MyTableViewCell"];
    }
    
    @try{
        if(indexPath.section == 0){
            if(indexPath.row==1){
                cell.editWidthConstraint.constant = 20;
                cell.editSpaceConstraint.constant = 30;
                [cell.editIcon setImage:[self imageByScalingAndCroppingForSize:CGSizeMake(20, 20) :[UIImage imageNamed:@"btn_edit.png"]] forState:UIControlStateNormal];
                
            } else {
                cell.editWidthConstraint.constant = 0;
                cell.editSpaceConstraint.constant = 0;
            }
            cell.keyLabel.text = [self.profileKeyArr objectAtIndex:indexPath.row];
            cell.valueLabel.text = [self.profileValArr objectAtIndex:indexPath.row];
            cell.valueLabel.numberOfLines = 1;
            
        } else if (indexPath.section == 1) {
            cell.keyLabel.text = [self.accountKeyArr objectAtIndex:indexPath.row];
            cell.valueLabel.text = [self.accountValArr objectAtIndex:indexPath.row];
            cell.selectionStyle = UITableViewCellSelectionStyleNone;
            
            cell.editWidthConstraint.constant = 0;
            cell.editSpaceConstraint.constant = 0;
            
        } else if (indexPath.section == 2) {
            cell.keyLabel.text = [self.settingKeyArr objectAtIndex:indexPath.row];
            cell.valueLabel.text = @"";
            cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
            
            cell.editWidthConstraint.constant = 0;
            cell.editSpaceConstraint.constant = 0;
            
        } else if (indexPath.section == 3) {
            cell.keyLabel.text = @"버전 정보";
            cell.valueLabel.text = @"";
            cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
            
            cell.editWidthConstraint.constant = 0;
            cell.editSpaceConstraint.constant = 0;
            
        } else {
            cell.keyLabel.text = @"로그아웃";
            cell.valueLabel.text = nil;
        }
        
        cell.backgroundColor = [UIColor whiteColor];
        [cell.keyLabel sizeToFit];
        //[cell.valueLabel sizeToFit];
        
        return cell;
        
    } @catch (NSException *exception) {
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    if(indexPath.section == 0 && indexPath.row == 1){
        [self performSegueWithIdentifier:@"MY_MSG_CHANGE_PUSH" sender:nil];
    } /*else if(indexPath.section == 2 && indexPath.row == 0){
       //NSLog(@"로그아웃");
       UIAlertView *alert = [[UIAlertView alloc]initWithTitle:nil message:@"로그아웃하시면 앱이 종료됩니다." delegate:self cancelButtonTitle:@"취소" otherButtonTitles:@"확인", nil];
       alert.tag = 1;
       [alert show];
       }*/
    
    else if(indexPath.section == 2){
        if(indexPath.row == 0) {
            [self performSegueWithIdentifier:@"MY_TAB_CHANGE_PUSH" sender:nil];
        } else {
            UIAlertController * alert = [UIAlertController alertControllerWithTitle:@"" message:@"개발중인 기능입니다." preferredStyle:UIAlertControllerStyleAlert];
            [self presentViewController:alert animated:YES completion:nil];
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                [alert dismissViewControllerAnimated:YES completion:nil];
            });
        }
        
    } else if(indexPath.section == 3){
        [self performSegueWithIdentifier:@"MY_APP_VER_PUSH" sender:nil];
    }
    
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
}

- (void)tapLogout:(id)sender{
    UIAlertController *alert = [UIAlertController alertControllerWithTitle:nil message:@"로그아웃 시 저장된 정보가 지워집니다.\n로그아웃 하시겠습니까?" preferredStyle:UIAlertControllerStyleAlert];
    
    UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                     handler:^(UIAlertAction * action) {
                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                         //exit(0);
                                                         NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
                                                         //                                                         [prefs setObject:nil forKey:@"USER_ID"];
                                                         //                                                         [prefs setObject:nil forKey:@"DEVICE_ID"];
                                                         //                                                         [prefs setObject:nil forKey:@"URL"];
                                                         //                                                         [prefs setObject:nil forKey:@"CPN_CODE"];
                                                         [prefs removeObjectForKey:@"USER_ID"];
                                                         [prefs removeObjectForKey:@"DEVICE_ID"];
                                                         [prefs removeObjectForKey:@"URL"];
                                                         [prefs removeObjectForKey:@"CPN_CODE"];
                                                         [prefs synchronize];
                                                         
                                                         UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
                                                         IntroViewController *vc = (IntroViewController *)[storyboard instantiateViewControllerWithIdentifier:@"IntroViewController"];
                                                         UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:vc];
                                                         [self presentViewController:nav animated:YES completion:nil];
                                                         
                                                     }];
    
    UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                         handler:^(UIAlertAction * action) {
                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                         }];
    [alert addAction:okButton];
    [alert addAction:cancelButton];
    
    NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];
    [paragraphStyle setAlignment:NSTextAlignmentCenter];
    
    NSMutableAttributedString *messageText;
    messageText = [[NSMutableAttributedString alloc]
                   initWithString:alert.message
                   attributes:@{
                                NSParagraphStyleAttributeName: paragraphStyle,
                                NSFontAttributeName : [UIFont systemFontOfSize:15],
                                NSForegroundColorAttributeName : [UIColor blackColor]
                                }
                   ];
    [alert setValue:messageText forKey:@"attributedMessage"];
    
    [self presentViewController:alert animated:YES completion:nil];
}

- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {
    if(alertView.tag == 1 && buttonIndex == 1){
        //userid, devid삭제 후 앱종료
        NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
        //        [prefs setObject:nil forKey:@"USER_ID"];
        //        [prefs setObject:nil forKey:@"DEVICE_ID"];
        //        [prefs setObject:nil forKey:@"URL"];
        //        [prefs setObject:nil forKey:@"CPN_CODE"];
        [prefs removeObjectForKey:@"USER_ID"];
        [prefs removeObjectForKey:@"DEVICE_ID"];
        [prefs removeObjectForKey:@"URL"];
        [prefs removeObjectForKey:@"CPN_CODE"];
        [prefs synchronize];
        
        exit(0);
        
    } else if(alertView.tag == 2 && buttonIndex == 1){
        [self callWebService];
    }
}

- (void)image:(UIImage *)image didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo{
    //NSLog(@"%s : %f %f",__FUNCTION__,image.size.width,image.size.height);
    if (error) {
        NSLog(@"error: %@", [error localizedDescription]);
    } else {
        NSLog(@"saved photo image : %@", image);
        //[self imageViewInTextView:YES :image];
        
        UIImage *rotateImg = nil;
        if(image.size.width>image.size.height){
            rotateImg = [self rotateImage:image byOrientationFlag:image.imageOrientation];
        } else {
            rotateImg = [self rotateImage90:image];
        }
        
        NSString *getFileName = [self createFileName];
        NSData *imageData = UIImageJPEGRepresentation(rotateImg, 0.1);
        
        NSString *tmpPath = NSTemporaryDirectory();
        NSString *imagePath = [tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"/%@",getFileName]];
        //NSLog(@"imagePath : %@", imagePath);
        [imageData writeToFile:imagePath atomically:YES];
        NSLog(@"사진촬영 원본이미지 : %@", imagePath);
        
        //썸네일이미지 로컬 tmp경로에 저장
        NSData *imageThumbData = UIImagePNGRepresentation([self imageByScalingAndCroppingForSize:CGSizeMake(225, 300) :rotateImg]);
        NSString *imageThumbPath =[tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"mThumb_%@",getFileName]];
        [imageThumbData writeToFile:imageThumbPath atomically:YES];
        NSLog(@"사진촬영 썸네일이미지 : %@", imageThumbPath);
        
        NSMutableDictionary *imageInfoDic = [NSMutableDictionary dictionary];
        [imageInfoDic setObject:imagePath forKey:@"ADIT_INFO"];
        [imageInfoDic setObject:getFileName forKey:@"FILE_NM"];
        
        [self saveAttachedFile:imageInfoDic];
    }
}


- (void)callWebService{
    NSString *urlString = appDelegate.main_url;
    NSString *userNo = [[NSUserDefaults standardUserDefaults] objectForKey:@"CUSER_NO"];
    NSString *compNo = [[NSUserDefaults standardUserDefaults] objectForKey:@"COMP_NO"];
    
    //KEY : refTy VALUE : "2"(프로필이미지) or "3"(프로필배경이미지)
    NSString *refTy;
    if(isProfile){
        refTy=@"2";
    } else {
        refTy=@"3";
    }
    
    NSString *paramString = [NSString stringWithFormat:@"usrNo=%@&refTy=%@&compNo=%@", userNo, refTy, compNo];
    NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"deleteProfileImage"]];
    MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
    session.delegate = self;
    if ([session start]) {
        [SVProgressHUD show];
    }
}

- (void)returnDataWithObject:(MFURLSession *)session error:(NSString *)error{
    [SVProgressHUD dismiss];
    
    NSString *wsName = [[session.url absoluteString] lastPathComponent];
    //NSLog(@"wsName : %@",wsName);
    
    
    if (error!=nil || ![error isEqualToString:@"(null)"]) {
        NSDictionary *dic = session.returnDictionary;
        //NSLog(@"chatdict: %@", dic);
        
        if ([[dic objectForKey:@"RESULT"]isEqualToString:@"SUCCESS"]) {
            if ([wsName isEqualToString:@"getProfile"]) {
                NSArray *dataSet = [dic objectForKey:@"DATASET"];
                NSLog(@"dataSet : %@", dataSet);
                [self settingMyInfo :dataSet];
            }
        }
    }
}

- (void)saveAttachedFile:(NSDictionary *)userInfo{
    //NSLog(@"userInfo : %@", userInfo);
    //NSLog(@"[saveAttachedFile] self.imageArray : %@", self.imageArray);
    //NSLog(@"saveAttachedFile userInfo : %@", [userInfo objectForKey:@"ADIT_INFO"]);
    
    @try{
        self.assetArray = [userInfo objectForKey:@"ASSET_LIST"];
        
        //사진앨범에서 선택
        if(self.assetArray.count > 0){
            for (int i=0; i<self.imageArray.count; i++) {
                self.asset = [[userInfo objectForKey:@"ASSET_LIST"] objectAtIndex:i];
                
                NSString *fileName = [self createFileName];
                
                UIImage *image =[self.imageArray objectAtIndex:i];
                NSData * data = UIImageJPEGRepresentation(image, 0.3);
                
                [self saveAttachedFile:data AndFileName:fileName];
            }
        } else {
            //사진촬영
            NSString *aditInfo = [userInfo objectForKey:@"ADIT_INFO"];
            NSString *fileName =  [userInfo objectForKey:@"FILE_NM"];
            
            NSData* imgData = [[NSFileManager defaultManager] contentsAtPath:aditInfo];
            UIImage *image = [UIImage imageWithData:imgData];
            NSData * data = UIImageJPEGRepresentation(image, 0.3);
            
            [self saveAttachedFile:data AndFileName:fileName];
        }
        
    } @catch (NSException *exception) {
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

- (void)saveAttachedFile:(NSData *)data AndFileName:(NSString *)fileName{
    NSLog(@"fileName : %@", fileName);
    
    @try{
        //프로필변경 웹서비스
        //ADIT_INFO : {"TMP_NO":Long,"LOCAL_CONTENT":String}
        NSString *dvcID = [[NSUserDefaults standardUserDefaults] objectForKey:@"DVC_ID"];//[MFUtil getUUID];
        NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
        NSString *userNo = [prefs objectForKey:@"CUSER_NO"];
        
        NSMutableDictionary *aditDic = [NSMutableDictionary dictionary];
        [aditDic setObject:@1 forKey:@"TMP_NO"];
        //[aditDic setObject:[self.firstAddMsg objectForKey:@"ADIT_INFO"] forKey:@"LOCAL_CONTENT"];
        [aditDic setObject:dvcID forKey:@"DEVICE_ID"];
        //NSLog(@"aditDic : %@", aditDic);
        
        NSData* aditData = [NSJSONSerialization dataWithJSONObject:aditDic options:0 error:nil];
        NSString* aditJsonData = [[NSString alloc] initWithData:aditData encoding:NSUTF8StringEncoding];
        
        NSMutableDictionary *sendFileParam = [NSMutableDictionary dictionary];
        //[sendFileParam setObject:self.roomNo forKey:@"roomNo"];
        [sendFileParam setObject:[[NSUserDefaults standardUserDefaults] objectForKey:@"USER_ID"] forKey:@"usrId"];
        [sendFileParam setObject:userNo forKey:@"usrNo"];
        //[sendFileParam setObject:@"4" forKey:@"refTy"];
        [sendFileParam setObject:userNo forKey:@"refNo"];
        [sendFileParam setObject:aditJsonData forKey:@"aditInfo"];
        
        //프로필이미지의 경우에는 REF_TY을 "4"로 보내는데 프로필배경이미지의 경우 REF_TY를 "5"로 보내야함
        if(isProfile){
            [sendFileParam setObject:@"4" forKey:@"refTy"];
        } else {
            [sendFileParam setObject:@"5" forKey:@"refTy"];
        }
        
        NSString *urlString = appDelegate.main_url;
        urlString = [urlString stringByAppendingPathComponent:@"saveAttachedFile"];
        
        //NSLog(@"AndFileName : %@", fileName);
        MFURLSessionUpload *sessionUpload = [[MFURLSessionUpload alloc]initWithURL:[NSURL URLWithString:urlString] option:sendFileParam WithData:data AndFileName:fileName];
        sessionUpload.delegate = self;
        
        if ([sessionUpload start]) {
            [SVProgressHUD show];
        }
        
    } @catch (NSException *exception) {
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

- (NSString *)createFileName{
    @try{
        NSString *fileName = nil;
        NSDate *today = [NSDate date];
        NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
        [dateFormatter setDateFormat:@"yyMMdd-HHmmss"];
        NSString *currentTime = [dateFormatter stringFromDate:today];
        NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"USER_ID"];
        fileName = [NSString stringWithFormat:@"%@(%@).png",userID,currentTime];
        return fileName;
        
    } @catch (NSException *exception) {
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

#pragma mark - MFURLSessionUpload Delegate
-(void)returnDictionary:(NSDictionary *)dictionary WithError:(NSString *)error{
    if (error != nil) {
        
    }else{
        NSLog(@"dictionary : %@", dictionary);
        if(dictionary != nil){
            //NSLog(@"dictionary : %@", dictionary);
            [self.imageFileNameArray addObject:[dictionary objectForKey:@"FILE_URL"]];
            
            //NSLog(@"self.imageFileNameArray.count : %lu",self.imageFileNameArray.count);
            //NSLog(@"[dictionary objectForKey:@\"FILE_URL\"] : %@",[dictionary objectForKey:@"FILE_URL"]);
            
            if ([dictionary objectForKey:@"FILE_URL"]==nil) {
                NSLog(@"error");
            } else{
                [SVProgressHUD dismiss];
            }
        } else {
            //데이터,와이파이 둘 다 꺼져있을경우
            NSLog(@"인터넷 연결이 오프라인으로 나타납니다.");
        }
        
    }
}

- (void)returnResponse:(NSURLResponse *)response WithError:(NSString *)error{
    NSLog(@"%s, %@", __func__, error);
}

- (void)getImageNotification:(NSNotification *)notification {
    NSLog(@"%s", __func__);
    self.imageArray = [notification.userInfo objectForKey:@"IMG_LIST"];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"getImageNotification" object:nil];
    [self saveAttachedFile:notification.userInfo];
}

#pragma mark - UIImagePickerController Delegate
- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker{
    [picker dismissViewControllerAnimated:YES completion:nil];
}

- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *,id> *)info{
    //NSLog(@"imagePickerController info : %@",info);
    //NSLog(@"UIImagePickerControllerMediaMetadata : %@",[info objectForKey:UIImagePickerControllerMediaMetadata]);
    if ([[info objectForKey:UIImagePickerControllerMediaType] isEqualToString:@"public.movie"]) {
        NSURL *mediaUrl = [info objectForKey:UIImagePickerControllerMediaURL];
        [picker dismissViewControllerAnimated:YES completion:nil];
        UISaveVideoAtPathToSavedPhotosAlbum([mediaUrl path], self,
                                            @selector(video:didFinishSavingWithError:contextInfo:), nil);
    }else{
        UIImage *image = [info objectForKey:UIImagePickerControllerOriginalImage];
        [picker dismissViewControllerAnimated:YES completion:nil];
        UIImageWriteToSavedPhotosAlbum(image, self, @selector(image:didFinishSavingWithError:contextInfo:), nil);
    }
}

- (void)video:(NSString *)videoPath didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo {
    if (error) {
        NSLog(@"error: %@", [error localizedDescription]);
    } else {
        NSLog(@"saved video videoPath");
    }
}


- (CGSize)targetSize {
    CGFloat scale = [UIScreen mainScreen].scale;
    CGSize targetSize = CGSizeMake(CGRectGetWidth(self.view.bounds) * scale, CGRectGetHeight(self.view.bounds) * scale);
    return targetSize;
}

- (UIImage*)imageByScalingAndCroppingForSize:(CGSize)targetSize :(UIImage *)image
{
    UIImage *sourceImage = image;
    UIImage *newImage = nil;
    CGSize imageSize = sourceImage.size;
    CGFloat width = imageSize.width;
    CGFloat height = imageSize.height;
    CGFloat targetWidth = targetSize.width;
    CGFloat targetHeight = targetSize.height;
    CGFloat scaleFactor = 0.0;
    CGFloat scaledWidth = targetWidth;
    CGFloat scaledHeight = targetHeight;
    CGPoint thumbnailPoint = CGPointMake(0.0,0.0);
    
    if (CGSizeEqualToSize(imageSize, targetSize) == NO)
    {
        CGFloat widthFactor = targetWidth / width;
        CGFloat heightFactor = targetHeight / height;
        
        if (widthFactor > heightFactor)
            scaleFactor = widthFactor; // scale to fit height
        else
            scaleFactor = heightFactor; // scale to fit width
        scaledWidth  = width * scaleFactor;
        scaledHeight = height * scaleFactor;
        
        // center the image
        if (widthFactor > heightFactor)
        {
            thumbnailPoint.y = (targetHeight - scaledHeight) * 0.5;
        }
        else
            if (widthFactor < heightFactor)
            {
                thumbnailPoint.x = (targetWidth - scaledWidth) * 0.5;
            }
    }
    
    //UIGraphicsBeginImageContext(targetSize); // this will crop
    UIGraphicsBeginImageContextWithOptions(targetSize, NO, [UIScreen mainScreen].scale);
    
    CGRect thumbnailRect = CGRectZero;
    thumbnailRect.origin = thumbnailPoint;
    thumbnailRect.size.width  = scaledWidth;
    thumbnailRect.size.height = scaledHeight;
    
    [sourceImage drawInRect:thumbnailRect];
    
    newImage = UIGraphicsGetImageFromCurrentImageContext();
    if(newImage == nil)
        NSLog(@"could not scale image");
    
    //pop the context to get back to the default
    UIGraphicsEndImageContext();
    return newImage;
}

- (UIImage *)getScaledImage:(UIImage *)image scaledToMaxWidth:(CGFloat)width {
    CGFloat oldWidth = image.size.width;
    CGFloat oldHeight = image.size.height;
    
    CGFloat scaleFactor=1;
    
    //if (oldWidth > width) {
    scaleFactor = width / oldWidth;
    //} else  //oldWidth<width and height==0이면, scale하지 않음.
    //    return image;
    
    CGFloat newHeight = oldHeight * scaleFactor;
    CGFloat newWidth = oldWidth * scaleFactor;
    CGSize newSize = CGSizeMake(newWidth, newHeight);
    
    //NSLog(@"oldWidth : %f, oldHeight : %f", oldWidth, oldHeight);
    //NSLog(@"newWidth : %f, newHeight : %f", newWidth, newHeight);
    
    //UIGraphicsBeginImageContext(newSize);
    UIGraphicsBeginImageContextWithOptions(newSize, NO, [UIScreen mainScreen].scale);
    [image drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)];
    UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return newImage;
}

- (UIImage *)rotateImage90:(UIImage *)img
{
    //NSLog(@"rotateImage90:");
    
    CGImageRef          imgRef = img.CGImage;
    CGFloat             width = CGImageGetWidth(imgRef);
    CGFloat             height = CGImageGetHeight(imgRef);
    CGRect              bounds = CGRectMake(0, 0, width, height);
    CGFloat             boundHeight;
    
    boundHeight = bounds.size.height;
    bounds.size.height = bounds.size.width;
    bounds.size.width = boundHeight;
    
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    NSUInteger bytesPerPixel = 4;
    NSUInteger bytesPerRow = bytesPerPixel * bounds.size.width;
    NSUInteger bitsPerComponent = 8;
    CGContextRef context = CGBitmapContextCreate(nil, bounds.size.width, bounds.size.height,
                                                 bitsPerComponent, bytesPerRow, colorSpace,
                                                 kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big);
    CGColorSpaceRelease(colorSpace);
    
    
    CGContextRotateCTM (context, DEGREES_TO_RADIANS(270));
    CGContextTranslateCTM (context, -width, 0);
    
    CGContextDrawImage(context, CGRectMake(0, 0, width, height), imgRef);
    CGImageRef newImage = CGBitmapContextCreateImage(context);
    CGContextRelease(context);
    UIImage *imageCopy = [UIImage imageWithCGImage:newImage];
    CFRelease(newImage);
    return imageCopy;
}

- (UIImage *)rotateImageReverse90:(UIImage *)img
{
    NSLog(@"rotateImageReverse90:");
    
    CGImageRef          imgRef = img.CGImage;
    CGFloat             width = CGImageGetWidth(imgRef);
    CGFloat             height = CGImageGetHeight(imgRef);
    CGRect              bounds = CGRectMake(0, 0, width, height);
    CGFloat             boundHeight;
    
    boundHeight = bounds.size.height;
    bounds.size.height = bounds.size.width;
    bounds.size.width = boundHeight;
    
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    NSUInteger bytesPerPixel = 4;
    NSUInteger bytesPerRow = bytesPerPixel * bounds.size.width;
    NSUInteger bitsPerComponent = 8;
    CGContextRef context = CGBitmapContextCreate(nil, bounds.size.width, bounds.size.height,
                                                 bitsPerComponent, bytesPerRow, colorSpace,
                                                 kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big);
    CGColorSpaceRelease(colorSpace);
    
    CGContextRotateCTM (context, DEGREES_TO_RADIANS(90));
    CGContextTranslateCTM (context, 0, -height);
    
    CGContextDrawImage(context, CGRectMake(0, 0, width, height), imgRef);
    CGImageRef newImage = CGBitmapContextCreateImage(context);
    CGContextRelease(context);
    UIImage *imageCopy = [UIImage imageWithCGImage:newImage];
    CFRelease(newImage);
    return imageCopy;
}

#define DEGREES_TO_RADIANS(angle) ((angle) / 180.0 * M_PI)
- (UIImage *)rotateImage:(UIImage *)img byOrientationFlag:(UIImageOrientation)orient
{
    NSLog(@"ImageProcessUtil rotateImage");
    
    CGImageRef          imgRef = img.CGImage;
    CGFloat             width = CGImageGetWidth(imgRef);
    CGFloat             height = CGImageGetHeight(imgRef);
    CGRect              bounds = CGRectMake(0, 0, width, height);
    CGFloat             boundHeight;
    NSLog(@"rotate image size width=%f, height=%f, orientation=%ld", width, height, (long)orient);
    
    switch(orient) {
            
        case UIImageOrientationUp:
            break;
            
        case UIImageOrientationDown:
            break;
            
        case UIImageOrientationLeft:
            boundHeight = bounds.size.height;
            bounds.size.height = bounds.size.width;
            bounds.size.width = boundHeight;
            break;
            
        case UIImageOrientationRight:
            boundHeight = bounds.size.height;
            bounds.size.height = bounds.size.width;
            bounds.size.width = boundHeight;
            break;
            
        default:
            break;
    }
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    NSUInteger bytesPerPixel = 4;
    NSUInteger bytesPerRow = bytesPerPixel * bounds.size.width;
    NSUInteger bitsPerComponent = 8;
    CGContextRef context = CGBitmapContextCreate(nil, bounds.size.width, bounds.size.height,
                                                 bitsPerComponent, bytesPerRow, colorSpace,
                                                 kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big);
    CGColorSpaceRelease(colorSpace);
    if (orient == UIImageOrientationRight) {
        CGContextRotateCTM (context, DEGREES_TO_RADIANS(270));
        CGContextTranslateCTM (context, -width, 0);
    }
    else if (orient == UIImageOrientationLeft) {
        CGContextRotateCTM (context, DEGREES_TO_RADIANS(90));
        CGContextTranslateCTM (context, 0, -height);
    }
    else if (orient == UIImageOrientationDown) {
        CGContextRotateCTM (context, DEGREES_TO_RADIANS(180));
        CGContextTranslateCTM (context, -width, -height);
    }
    else if (orient == UIImageOrientationUp) {
        // NOTHING
    }
    
    CGContextDrawImage(context, CGRectMake(0, 0, width, height), imgRef);
    CGImageRef newImage = CGBitmapContextCreateImage(context);
    CGContextRelease(context);
    UIImage *imageCopy = [UIImage imageWithCGImage:newImage];
    CFRelease(newImage);
    return imageCopy;
}


- (void)imageViewInTextView:(BOOL)isCamera :(UIImage *)image{
    //NSLog(@"image : %@", image);
}


#pragma mark - Navigation
// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(getImageNotification:) name:@"getImageNotification" object:nil];
    
    if ([[segue identifier] isEqualToString:@"MY_PHLIB_MODAL"]) {
        UINavigationController *destination = segue.destinationViewController;
        PHLibListViewController *vc = [[destination childViewControllers] objectAtIndex:0];
        vc.fromSegue = segue.identifier;
        
    } else if([[segue identifier] isEqualToString:@"MY_MSG_CHANGE_PUSH"]){
        //UIBarButtonItem *left = [[UIBarButtonItem alloc]initWithTitle:@"" style:UIBarButtonItemStylePlain target:self action:nil];
        //self.navigationItem.backBarButtonItem = left;
        self.navigationController.navigationBar.topItem.title = @"";
        
        MyMessageViewController *destination = segue.destinationViewController;
        //NSString *profileMsg = [NSString urlDecodeString:[self.infoDic objectForKey:@"PROFILE_MSG"]];
        destination.statusMsg = [self.profileValArr objectAtIndex:1];
        destination.fromSegue = segue.identifier;
        
    } else if([[segue identifier] isEqualToString:@"MY_TAB_CHANGE_PUSH"]){
        self.navigationController.navigationBar.topItem.title = @"";
        
    } else if([[segue identifier] isEqualToString:@"MY_APP_VER_PUSH"]){
        self.navigationController.navigationBar.topItem.title = @"";
    }
}

/*
 #pragma mark - UIScrollView Delegate
 - (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate{
 @try {
 CGRect screen = [[UIScreen mainScreen]bounds];
 CGFloat screenWidth = screen.size.width;
 CGFloat screenHeight = screen.size.height;
 if ([MFUtil retinaDisplayCapable]) {
 screenHeight = screenHeight*2;
 screenWidth = screenWidth*2;
 }
 int height = 270;
 
 NSArray *tmp = [MODEL_NAME componentsSeparatedByString:@" "];
 if ([tmp[1] hasPrefix:@"5"]) {
 height = 370;
 }else if ([tmp[1] hasPrefix:@"6"] || [tmp[1] hasPrefix:@"7"] || [tmp[1] hasPrefix:@"8"]) {
 if (tmp.count==2) {
 height = 570;
 }else{
 height = 470;
 }
 
 }
 
 if (scrollView.contentSize.height-scrollView.contentOffset.y<470) {
 CGPoint offset = scrollView.contentOffset;
 CGRect bounds = scrollView.bounds;
 CGSize size = scrollView.contentSize;
 UIEdgeInsets inset = scrollView.contentInset;
 float y = offset.y + bounds.size.height - inset.bottom;
 float h = size.height;
 
 float reload_distance = 10;
 
 if(y > h + reload_distance) {
 
 }
 }
 
 } @catch (NSException *exception) {
 NSLog(@"exception : %@", exception);
 }
 }
 
 - (void)scrollViewDidScroll:(UIScrollView *)scrollView{
 CGFloat scrollOffsetY = scrollView.contentOffset.y;
 //NSLog(@"scrollOffsetY : %f",scrollOffsetY);
 
 @try {
 //if([self.fromSegue isEqualToString:@"PROFILE_TO_MY_MODAL"]) self.tableView.frame = CGRectMake(self.tableView.frame.origin.x, self.tableView.frame.origin.y, self.tableView.frame.size.width, self.tableView.frame.size.height-44);
 
 
 } @catch (NSException *exception) {
 NSLog(@"exception : %@", exception);
 }
 
 }
 - (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView{
 NSLog(@"%s", __func__);
 }
 */

-(void)sendToHilee:(NSString *)func :(NSException *)exception{
    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:NSLocalizedString(@"exception_msg_exception", @"exception_msg_exception") preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction* sendButton = [UIAlertAction actionWithTitle:@"관리자에게 전송" style:UIAlertActionStyleDefault
                                                       handler:^(UIAlertAction * action) {
                                                           [alert dismissViewControllerAnimated:YES completion:nil];
                                                           
                                                           UIDevice *device = [UIDevice currentDevice];
                                                           NSString *myUserNo = [[NSUserDefaults standardUserDefaults] objectForKey:@"CUSER_NO"];
                                                           NSString *dvcKind = [device modelName];
                                                           NSString *dvcVer = device.systemVersion;
                                                           
                                                           MFMessageComposeViewController *controller = [[MFMessageComposeViewController alloc] init];
                                                           if([MFMessageComposeViewController canSendText])
                                                           {
                                                               controller.body = [NSString stringWithFormat:@"%@ / %@ / %@ \n%@ \n\n%@", dvcKind, dvcVer, myUserNo, func, exception];
                                                               controller.recipients = [NSArray arrayWithObject:@"01093917822"];
                                                               controller.messageComposeDelegate = self;
                                                               [self presentViewController:controller animated:YES completion:nil];
                                                           }
                                                       }];
    
    UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                     handler:^(UIAlertAction * action) {
                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                     }];
    
    [alert addAction:sendButton];
    [alert addAction:okButton];
    [self presentViewController:alert animated:YES completion:nil];
}

- (void)messageComposeViewController:(nonnull MFMessageComposeViewController *)controller didFinishWithResult:(MessageComposeResult)result {
    NSString *resultString;
    switch (result) {
        case MessageComposeResultCancelled:
            resultString = NSLocalizedString(@"cancel", @"");
            break;
            
        case MessageComposeResultFailed:
        {
            resultString = NSLocalizedString(@"fail", @"");
            break;
        }
            
        case MessageComposeResultSent:
            resultString = NSLocalizedString(@"success", @"");
            break;
            
        default:
            break;
    }
    [self dismissViewControllerAnimated:YES completion:^{
        NSLog(@"%s resultString : %@",__FUNCTION__,resultString);
    }];
}


- (void)showEmail{
    NSDate *today = [NSDate date];
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    [dateFormatter setDateFormat:@"yyMMdd-HHmmss"];
    NSString *currentTime = [dateFormatter stringFromDate:today];
    
    NSString *emailTitle = [NSString stringWithFormat:@"%@_%@", userId, currentTime];
    NSArray *toRecipents = [NSArray arrayWithObject:@"hilee@dbvalley.com"];
    
    MFMailComposeViewController *mailComposer = [[MFMailComposeViewController alloc] init];
    if([MFMailComposeViewController canSendMail]) {
        mailComposer.mailComposeDelegate = self;
        [mailComposer setSubject:emailTitle];
        //        [mailComposer setMessageBody:messageBody isHTML:NO];
        [mailComposer setToRecipients:toRecipents];
        
        NSString *documentFolder = [NSHomeDirectory() stringByAppendingPathComponent:@"Documents"];
        NSString *saveFolder = [documentFolder stringByAppendingFormat:@"/mFinitySNS_logs/"];
        
        saveFolder = [saveFolder stringByAppendingString:@"logs.txt"];
        
        [appDelegate.logStr writeToFile:saveFolder atomically:YES encoding:NSUTF8StringEncoding error:nil];
        
        BOOL fileExists = [[NSFileManager defaultManager] fileExistsAtPath:saveFolder];
        if(!fileExists){
            NSData *contents = [NSData dataWithContentsOfFile:saveFolder];
            [contents writeToFile:saveFolder atomically:YES];
        }
        
        NSData *data = [NSData dataWithContentsOfFile:saveFolder];
        
        [mailComposer addAttachmentData:data mimeType:@"application/txt" fileName:[NSString stringWithFormat:@"%@_logs", userId]];
        [self presentViewController:mailComposer animated:YES completion:nil];
    }
}

- (void) mailComposeController:(MFMailComposeViewController *)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError *)error {
    switch (result) {
        case MFMailComposeResultCancelled:
            NSLog(@"Mail cancelled");
            break;
        case MFMailComposeResultSaved:
            NSLog(@"Mail saved");
            break;
        case MFMailComposeResultSent:
            NSLog(@"Mail sent");
            break;
        case MFMailComposeResultFailed:
            NSLog(@"Mail sent failure: %@", [error localizedDescription]);
            break;
        default:
            break;
    }
    
    // Close the Mail Interface
    [self dismissViewControllerAnimated:YES completion:nil];
}

@end
