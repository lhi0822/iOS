//
//  ChatViewController.m
//  mfinity_sns
//
//  Created by hilee on 2017. 4. 21..
//  Copyright © 2017년 com.dbvalley. All rights reserved.
//

#import "ChatViewController.h"
#import "ChatSendViewCell.h"
#import "ChatReceiveViewCell.h"
#import "DateLabelViewCell.h"
#import "ChatReceiveFileCell.h"
#import "SystemLabelViewCell.h"
#import "ChatInviteSendCell.h"
#import "ChatInviteReceiveCell.h"
#import "LongChatSendViewCell.h"
#import "LongChatReceiveViewCell.h"
#import "LongChatViewController.h"

#import "AttachView.h"
#import "LoginViewController.h"
#import "AFNetworkReachabilityManager.h"
#import "RightSideViewController.h"
#import "PHLibListViewController.h"
#import "ImgDownloadViewController.h"
#import "HDNotificationView.h"
#import "WebViewController.h"
#import "MFStyle.h"
#import "MFDBHelper.h"

#import "CustomHeaderViewController.h"
#import "ChatToastView.h"

#define MODEL_NAME [[UIDevice currentDevice] modelName]
#define REFRESH_TABLEVIEW_DEFAULT_ROW               64.f
#define REFRESH_HEADER_DEFAULT_HEIGHT               64.f

#define DEGREES_TO_RADIANS(angle) ((angle) / 180.0 * M_PI)

#define USER_NAME_CONSTANT 20
#define BUBBLE_CONSTANT 33

#define LABEL_DEFAULT_HEIGHT            21.f
#define LABEL_DEFAUlT_WIDTH             185.f
#define LABEL_MAX_HEIGHT                100.f


@interface ChatViewController() {
   NSInteger msg_dIdx;
   NSInteger msg_rIdx;
   
   int missedCnt;
   int tmpMissedCnt;
   
   UIImage *imgMsg;
   UIImage *imgRecvMsg;
   UIImage *userImg;
   
   int tmpImgIdx;
   int tmpMsgIdx;
   
   int imgCnt;
   int uploadCnt;
   
   NSNumber *unReadCnt;
   int loadMsgCnt;
   
   BOOL isViewing;
   
   float tableBottom;
   
   NSMutableArray *testArr;
   NSMutableArray *testArr2;
   
   BOOL isToast;
   NSString *network;
   
   NSMutableDictionary *snsDict;
   
   SDImageCache *imgCache;
   BOOL scroll;
   
   AppDelegate *appDelegate;
   NSUInteger msgDataCnt;
}
@property (nonatomic,strong)NSTimer *timer;

@property (strong, nonatomic) AttachView *attachView;
@property (strong, nonatomic) ChatToastView *toastView;

@property (strong, nonatomic) ChatMessageData *msgData;
@property (weak, nonatomic) NSString *myUserNo;
@property (strong, nonatomic) NSMutableDictionary *sendDict;
@property (strong, nonatomic) NSMutableDictionary *recvDict;

@property (strong, nonatomic) NSMutableDictionary *firstAddMsg;
@property (strong, nonatomic) NSMutableDictionary *msgDeleteDict;
@property (strong, nonatomic) NSMutableDictionary *msgResendDict;

@property (strong, nonatomic) NSMutableArray *tmpIdxArr;
@property (strong, nonatomic) NSMutableArray *tmpMsgArr;

@property (strong, nonatomic) MFDBHelper *dbHelper;
@property (strong, nonatomic) NSMutableArray *tmpArr;

@end

@implementation ChatViewController

//-(instancetype)init
//{
//   self = [super init];
//   if (self) {
//      NSArray *documentPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
//      NSString *documentsDir = [documentPaths objectAtIndex:0];
//      self.DBName = [AppDelegate getDBName];
//      self.DBPath = [documentsDir stringByAppendingPathComponent:self.DBName];
//
//      [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_ChatReadPush:) name:@"noti_ChatReadPush" object:nil];
//   }
//   return self;
//}

- (void)viewDidLoad {
   [super viewDidLoad];
   
   NSLog(@"ChatViewController fromSegue : %@", self.fromSegue);
   NSLog(@"chatViewController roomno : %@", self.roomNo);
   
   appDelegate = (AppDelegate *)[UIApplication sharedApplication].delegate;
   
   @try{
      isHideKeyboard = YES;
      isViewing = YES;
      
      self.tableView.backgroundColor = [MFUtil myRGBfromHex:@"E9F3FA"];
      
      NSArray *documentPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
      NSString *documentsDir = [documentPaths objectAtIndex:0];
      self.DBName = [AppDelegate getDBName];
      self.DBPath = [documentsDir stringByAppendingPathComponent:self.DBName];
      
      [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_Chat:) name:@"noti_Chat" object:nil];
      [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_NewChatPush:) name:@"noti_NewChatPush" object:nil];
      [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_ChatReadPush:) name:@"noti_ChatReadPush" object:nil];
      
      [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_APNS_ChatReadPush:) name:@"noti_APNS_ChatReadPush" object:nil];
      
      [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(applicationDidBecomeActive:) name:@"applicationDidBecomeActive" object:nil];
      [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(applicationDidEnterBackground:) name:@"applicationDidEnterBackground" object:nil];
      
      tmpMsgIdx = 0;
      tmpImgIdx = 0;
      missedCnt = 0;
      tmpMissedCnt = 0;
      rowCnt = 0;
      imgCnt = 0;
      uploadCnt = 0;
      loadMsgCnt = 0;
      tableBottom = self.tableView.contentOffset.y;
      
      self.msgData = [[ChatMessageData alloc] initwithRoomNo:_roomNo];
      self.mImgArray = [NSMutableArray array];
      self.missedimg = [[UIImage alloc]init];
      self.imageThumbDictionary = [NSMutableDictionary dictionary];
      self.tmpIdxArr = [NSMutableArray array];
      self.postArr = [NSMutableArray array];
      self.fileNameArr = [NSMutableArray array];
      self.tmpArr = [self.msgData.chatArray mutableCopy];
      
      self.sendingMsgArr = [NSMutableArray array];
      self.tmpSendingArr = [NSMutableArray array];
      
      NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
      _myUserNo = [prefs objectForKey:@"CUSER_NO"];
      
      imgCache = [SDImageCache sharedImageCache];
      NSString *tmpPath = NSTemporaryDirectory();
      NSString *imgPath = [tmpPath stringByAppendingPathComponent:@"chat_cache"];
      [imgCache makeDiskCachePath:imgPath];
      
      [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillAnimate:) name:UIKeyboardWillShowNotification object:nil];
      [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillAnimate:) name:UIKeyboardWillHideNotification object:nil];
      
      UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapOnTable:)];
      [self.tableView addGestureRecognizer:tap];
      
      self.inputToolbar.delegate = self;
      //self.inputToolbar.contentView.textView.delegate = self;
      self.inputToolbar.contentView.textView.font = [UIFont preferredFontForTextStyle:UIFontTextStyleBody];
      [self.inputToolbar.contentView.textView setShowsVerticalScrollIndicator:NO];
      
      self.inputToolbar.contentView.textView.pasteDelegate = self;
      self.inputToolbar.contentView.textView.textContainer.maximumNumberOfLines = 0;
      self.inputToolbar.contentView.textView.layer.borderWidth = 0.5f;
      self.inputToolbar.contentView.textView.layer.borderColor = [UIColor lightGrayColor].CGColor;
      
      self.inputToolbar.contentView.textView.autocorrectionType = UITextAutocorrectionTypeNo; //자동완성끄기
      
      //int missedCnt = 0;
      msgDataCnt = self.msgData.chatArray.count;
      for(int i=0; i<msgDataCnt; i++){
         NSString *pushType = [[self.msgData.chatArray objectAtIndex:i]objectForKey:@"TYPE"];
         
         if([pushType isEqualToString:@"MISSED"]){
            missedCnt++;
         }
      }
      
      
      //테이블 마지막 셀로 스크롤 이동
      if(msgDataCnt > 0) {
         //UITableViewAutomaticDimension사용하니 아래 주석 실행안됨 임시적용코드, 수정필요
         dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            NSInteger row = [self.tableView numberOfRowsInSection:0];
            NSIndexPath *indexPath = [NSIndexPath indexPathForRow:row-1 inSection:0];
            [self.tableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionTop animated:NO];
            
            tableBottom = self.tableView.contentOffset.y;
            
            /*
             CGRect rectOfCellInTableView = [self.tableView rectForRowAtIndexPath: indexPath];
             CGRect rectOfCellInSuperview = [self.tableView convertRect: rectOfCellInTableView toView: self.tableView.superview];
             NSLog(@"rectOfCellInTableView : %f", rectOfCellInTableView.origin.y);
             NSLog(@"rectOfCellInSuperview : %f", rectOfCellInSuperview.origin.y);
             
             NSIndexPath *lastCell = [NSIndexPath indexPathForRow:([self.tableView numberOfRowsInSection:0]-1) inSection:0];
             CGRect lastRowRect= [self.tableView rectForRowAtIndexPath:indexPath];
             NSLog(@"lastRowRect ; %f, lastRowRect h : %f", lastRowRect.origin.y, lastRowRect.size.height);
             CGFloat contentHeight = lastRowRect.origin.y + lastRowRect.size.height;
             [self.tableView setContentOffset:CGPointMake(0,contentHeight)];
             NSLog(@"contentHeight:  %f", contentHeight);
             */
         });
         
      } else {
         [self scrollToBottomAnimated:YES];
      }
      
      
      [self callChatReadStatus];
      [self connectServer];
      
      
   } @catch(NSException *exception){
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (void)viewWillAppear:(BOOL)animated {
   NSLog(@"%s", __func__);
   [super viewWillAppear:animated];
   [self.tabBarController.tabBar setHidden:YES];
   
   appDelegate = (AppDelegate *)[UIApplication sharedApplication].delegate;
   appDelegate.isChatViewing = YES;
   
   self.tableView.rowHeight = UITableViewAutomaticDimension;
   self.tableView.estimatedRowHeight = 50;
   
   [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_ChatDetailView:) name:@"noti_ChatDetailView" object:nil];
}

-(void)viewDidAppear:(BOOL)animated {
   [super viewDidAppear:animated];
   
   @try{
      if([self.fromSegue isEqualToString:@"NOTI_CHAT_DETAIL"]){
         NSArray *dataSet = [self.notiChatDic objectForKey:@"DATASET"];
         NSString *snsName = [[dataSet objectAtIndex:0] objectForKey:@"SNS_NM"];
         NSString *decodeRoomName = [NSString urlDecodeString:snsName];
         self.navigationItem.titleView = [MFStyle navigationTitleStyle1:decodeRoomName];
         self.fromSegue = nil;
         
      } else if([self.fromSegue isEqualToString:@"BOARD_ADD_USER_MODAL"]){
         NSString *decodeRoomName = [NSString urlDecodeString:_roomName];
         self.navigationItem.titleView = [MFStyle navigationTitleStyle1:decodeRoomName];
         [self sendInviteMessage];
         
      }else {
         NSString *decodeRoomName = [NSString urlDecodeString:_roomName];
         self.navigationItem.titleView = [MFStyle navigationTitleStyle1:decodeRoomName];
      }
      
   } @catch(NSException *exception){
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

-(void)textView:(MFTextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text{
}
-(void)textViewDidChange:(MFTextView *)textView{
}

- (void)tapOnTable:(UITapGestureRecognizer*)tap{
   [self.inputToolbar.contentView.textView resignFirstResponder];
   
   for(UIView *subview in [self.view subviews]) {
      if([subview isKindOfClass:[self.toastView class]]) {
         [self.toastView setFrame:CGRectMake(0, self.inputToolbar.frame.origin.y-60, self.tableView.frame.size.width, 60)];
         break;
      }
   }
   
   if(_isFlag){ //미디어버튼
      UIImage *accessoryImage = [UIImage imageNamed:@"btn_add.png"];
      UIImage *normalImage = [accessoryImage jsq_imageMaskedWithColor:[UIColor lightGrayColor]];
      [_mediaButton setImage:normalImage forState:UIControlStateNormal];
      
      _mediaButton.contentMode = UIViewContentModeScaleAspectFit;
      _mediaButton.backgroundColor = [UIColor clearColor];
      
      self.inputToolbar.contentView.textView.inputView = nil;
      [self.inputToolbar.contentView.textView reloadInputViews];
      
      _isFlag = false;
   }
}

- (void)viewWillDisappear:(BOOL)animated {
   [super viewWillDisappear:animated];
   
   isViewing = NO;
   appDelegate.isChatViewing = NO;
   
   if (self.isMovingFromParentViewController || self.isBeingDismissed) {
      appDelegate.currChatRoomNo = nil;
   }
}

- (void)didReceiveMemoryWarning {
   [super didReceiveMemoryWarning];
}

-(BOOL)composerTextView:(MFTextView *)textView shouldPasteWithSender:(id)sender{
   return YES;
}

#pragma mark - Rabbit MQ
- (void)connectServer {
   NSLog(@"%s", __func__);
   NSString *compNo = [[NSUserDefaults standardUserDefaults] objectForKey:@"COMP_NO"];
   
   //바인드 된 큐 목록
   [appDelegate.bindQueueArr addObject:[NSString stringWithFormat:@"CHAT.%@.%@", compNo, self.roomNo]];
}

#pragma mark - Sqlite statement
-(void) crudStatement:(NSString *)dbPath :(NSString *)crudStmt{
   sqlite3 *database;
   if (sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
      const char *sqlStatement = [crudStmt UTF8String];
      
      sqlite3_stmt *compiledStatement;
      if (sqlite3_prepare_v2(database, sqlStatement, -1, &compiledStatement, NULL) == SQLITE_OK) {
         
         if(sqlite3_step(compiledStatement) != SQLITE_DONE){
            NSLog(@"Error updating table: %s", sqlite3_errmsg(database));
            
         }else{
            //NSLog(@"ChatViewController ok");
         }
         
         if(sqlite3_finalize(compiledStatement) != SQLITE_OK){
            NSLog(@"SQL Error : %s",sqlite3_errmsg(database));
         }
      }else {
         NSLog(@"not SQLITE_OK");
         printf("could not prepare statement: %s\n", sqlite3_errmsg(database));
      }
   } else{ }
   sqlite3_close(database);
}

#pragma mark - Message Send
- (void)messagesInputToolbar:(JSQMessagesInputToolbar *)toolbar didPressLeftBarButton:(UIButton *)sender {
   _mediaButton = sender;
   _mediaButton.contentMode = UIViewContentModeScaleAspectFit;
   _mediaButton.imageEdgeInsets = UIEdgeInsetsMake(13,13,13,13);
   
   if(!_isFlag){
      UIImage *accessoryImage = [UIImage imageNamed:@"btn_close.png"];
      UIImage *normalImage = [accessoryImage jsq_imageMaskedWithColor:[UIColor lightGrayColor]];
      [_mediaButton setImage:normalImage forState:UIControlStateNormal];
      
      if (!_attachView) {
         self.attachView = [[AttachView alloc] initWithFrame:self.attachView.bounds];
      }
      
      self.inputToolbar.contentView.textView.inputView = self.attachView;
      [self.inputToolbar.contentView.textView reloadInputViews];
      
      _isFlag = true;
      
   } else{
      UIImage *accessoryImage = [UIImage imageNamed:@"btn_add.png"];
      UIImage *normalImage = [accessoryImage jsq_imageMaskedWithColor:[UIColor lightGrayColor]];
      [_mediaButton setImage:normalImage forState:UIControlStateNormal];
      
      _mediaButton.backgroundColor = [UIColor clearColor];
      
      self.inputToolbar.contentView.textView.inputView = nil;
      [self.inputToolbar.contentView.textView reloadInputViews];
      
      _isFlag = false;
   }
   [self.inputToolbar.contentView.textView becomeFirstResponder];
   
   [self.attachView.cameraButton addTarget:self action:@selector(cameraButtonPressed:) forControlEvents:UIControlEventTouchUpInside];
   [self.attachView.photoButton addTarget:self action:@selector(photoButtonPressed:) forControlEvents:UIControlEventTouchUpInside];
   //[self.attachView.videoButton addTarget:self action:@selector(videoButtonPressed:) forControlEvents:UIControlEventTouchUpInside];
}

-(void)sendInviteMessage{
   //NSLog(@"CHAT snsInfoDic : %@", self.snsInfoDic);
   snsDict = [NSMutableDictionary dictionary];
   
   NSString *snsNo = @"";
   NSString *snsNm = @"";
   NSString *snsKind = @"";
   NSString *snsTy = @"";
   NSString *snsNeedAllow = @"";
   NSString *snsDesc = @"";
   NSString *snsCoverImg = @"";
   NSString *snsCreateDate = @"";
   NSString *snsCreateUserNo = @"";
   NSString *snsCreateUserNm = @"";
   NSString *snsMemberCount = @"";
   
   @try {
      snsNo = [self.snsInfoDic objectForKey:@"SNS_NO"];
      snsNm = [NSString urlDecodeString:[self.snsInfoDic objectForKey:@"SNS_NM"]];
      snsKind = [self.snsInfoDic objectForKey:@"SNS_KIND"];
      snsTy = [self.snsInfoDic objectForKey:@"SNS_TY"];
      snsNeedAllow = [self.snsInfoDic objectForKey:@"NEED_ALLOW"];
      snsDesc = [NSString urlDecodeString:[self.snsInfoDic objectForKey:@"SNS_DESC"]];
      snsCoverImg = [NSString urlDecodeString:[self.snsInfoDic objectForKey:@"COVER_IMG"]];
      if([snsCoverImg isEqualToString:@"(null)"]) snsCoverImg = @"";
      snsCreateDate = [NSString urlDecodeString:[self.snsInfoDic objectForKey:@"CREATE_DATE"]];
      snsCreateUserNo = [self.snsInfoDic objectForKey:@"CREATE_USER_NO"];
      snsCreateUserNm = [NSString urlDecodeString:[self.snsInfoDic objectForKey:@"CREATE_USER_NM"]];
      snsMemberCount = [self.snsInfoDic objectForKey:@"USER_COUNT"];
      
      [snsDict setObject:snsNo forKey:@"SNS_NO"];
      [snsDict setObject:snsNm forKey:@"SNS_NM"];
      [snsDict setObject:snsKind forKey:@"SNS_KIND"];
      [snsDict setObject:snsTy forKey:@"SNS_TY"];
      [snsDict setObject:snsNeedAllow forKey:@"SNS_NEED_ALLOW"];
      [snsDict setObject:snsDesc forKey:@"SNS_DESC"];
      [snsDict setObject:snsCoverImg forKey:@"SNS_COVER_IMG"];
      [snsDict setObject:snsCreateDate forKey:@"SNS_CREATE_DATE"];
      [snsDict setObject:snsCreateUserNo forKey:@"SNS_CREATE_USER_NO"];
      [snsDict setObject:snsCreateUserNm forKey:@"SNS_CREATE_USER_NM"];
      [snsDict setObject:snsMemberCount forKey:@"SNS_MEMBER_COUNT"];
      [snsDict setObject:@"INVITE_SNS" forKey:@"INVITE_TYPE"];
      
      NSError *error;
      NSData *snsJsonData = [NSJSONSerialization dataWithJSONObject:snsDict options:0 error:&error];
      NSString *snsJsonStr = [[NSString alloc] initWithData:snsJsonData encoding:NSUTF8StringEncoding];
      
      int count = missedCnt + tmpMissedCnt;
      
      tmpMsgIdx++;
      NSUInteger msgDataCnt = self.msgData.chatArray.count;
      
      NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
      [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSString *date = [dateFormatter stringFromDate:[NSDate date]];
      NSString *dvcID = [[NSUserDefaults standardUserDefaults] objectForKey:@"DVC_ID"];//[MFUtil getUUID];
      
      self.firstAddMsg = [[NSMutableDictionary alloc]init];
      [self.firstAddMsg setObject:self.myUserNo forKey:@"USER_NO"];
      [self.firstAddMsg setObject:self.roomNo forKey:@"ROOM_NO"];
      [self.firstAddMsg setObject:snsJsonStr forKey:@"CONTENT"];
      [self.firstAddMsg setObject:date forKey:@"DATE"];
      
      [self.firstAddMsg setObject:@"INVITE" forKey:@"CONTENT_TY"];
      [self.firstAddMsg setObject:@"" forKey:@"FILE_NM"];
      
      self.editInfoDic = [NSMutableDictionary dictionary];
      NSIndexPath *rowNo = [NSIndexPath indexPathForItem:(msgDataCnt-count) inSection:0];
      [self.editInfoDic setObject:@"SENDING" forKey:@"TYPE"];
      [self.editInfoDic setObject:[NSNumber numberWithInteger:tmpMsgIdx] forKey:@"TMP_NO"];
      [self.editInfoDic setObject:[NSNumber numberWithInteger:rowNo.row] forKey:@"TMP_IDX"];
      [self.editInfoDic setObject:dvcID forKey:@"DEVICE_ID"];
      [self.editInfoDic setObject:@"" forKey:@"LOCAL_CONTENT"];
      
      NSData *jsonData = [NSJSONSerialization dataWithJSONObject:self.editInfoDic options:0 error:&error];
      NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
      
      [self.firstAddMsg setObject:jsonString forKey:@"ADIT_INFO"];
      
      if(msgDataCnt > 0){
         //메시지가 있는 채팅방일 경우
         [self.msgData.chatArray insertObject:self.firstAddMsg atIndex:msgDataCnt-count];
         
         NSIndexPath *lastCell = [NSIndexPath indexPathForItem:msgDataCnt-count inSection:0];
         [self.tableView beginUpdates];
         [self.tableView insertRowsAtIndexPaths:@[lastCell] withRowAnimation:UITableViewRowAnimationNone];
         [self.tableView endUpdates];
         [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
         
      } else {
         //메시지가 없는 새로운 채팅방일 경우
         [self.msgData.chatArray addObject:self.firstAddMsg];
         [self.tableView reloadData];
         
         NSIndexPath *lastCell = [NSIndexPath indexPathForItem:0 inSection:0];
         [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
      }
      
      self.inputToolbar.contentView.textView.text = nil;
      
      [self.sendingMsgArr addObject:self.firstAddMsg];
      
      dispatch_async(dispatch_get_main_queue(), ^{
         [self callSaveInviteChat:snsDict];
      });
      
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

//메시지 전송버튼 클릭이벤트
- (void)messagesInputToolbar:(JSQMessagesInputToolbar *)toolbar didPressRightBarButton:(UIButton *)sender {
   NSString *content = self.inputToolbar.contentView.textView.text;
   
   @try{
      NSString *trimContent = [content stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
      
      if([trimContent rangeOfString:@"%"].location != NSNotFound){
         trimContent = [trimContent stringByReplacingOccurrencesOfString:@"%" withString:@"%25"];
      }
      if([trimContent rangeOfString:@"&"].location != NSNotFound){
         trimContent = [trimContent stringByReplacingOccurrencesOfString:@"&" withString:@"%26"];
      }
      
      NSUInteger textByte = [trimContent lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
      
      int count = missedCnt + tmpMissedCnt;
      
      if(![trimContent isEqualToString:@""] && trimContent != nil){
         tmpMsgIdx++;
         NSUInteger msgDataCnt = self.msgData.chatArray.count;
         
         NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
         [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
         NSString *date = [dateFormatter stringFromDate:[NSDate date]];
         NSString *dvcID = [[NSUserDefaults standardUserDefaults] objectForKey:@"DVC_ID"];//[MFUtil getUUID];
         
         self.firstAddMsg = [[NSMutableDictionary alloc]init];
         [self.firstAddMsg setObject:self.myUserNo forKey:@"USER_NO"];
         [self.firstAddMsg setObject:self.roomNo forKey:@"ROOM_NO"];
         
         [self.firstAddMsg setObject:date forKey:@"DATE"];
         
         if(textByte>1000) {
            NSData *contentData = [trimContent dataUsingEncoding:NSASCIIStringEncoding];
            contentData = [contentData subdataWithRange:NSMakeRange(0, 1000)];
            //NSString *prevStr = [NSString stringWithUTF8String:[contentData bytes]];
            NSString *prevStr = [[NSString alloc] initWithBytes:[contentData bytes] length:[contentData length] encoding:NSASCIIStringEncoding];
            
            [self.firstAddMsg setObject:@"LONG_TEXT" forKey:@"CONTENT_TY"];
            [self.firstAddMsg setObject:@"" forKey:@"CONTENT"];
            [self.firstAddMsg setObject:prevStr forKey:@"CONTENT_PREV"];
            
         } else {
            [self.firstAddMsg setObject:@"TEXT" forKey:@"CONTENT_TY"];
            [self.firstAddMsg setObject:trimContent forKey:@"CONTENT"];
            [self.firstAddMsg setObject:@"" forKey:@"CONTENT_PREV"];
         }
         
         [self.firstAddMsg setObject:@"" forKey:@"FILE_NM"];
         
         self.editInfoDic = [NSMutableDictionary dictionary];
         NSIndexPath *rowNo = [NSIndexPath indexPathForItem:(msgDataCnt-count) inSection:0];
         [self.editInfoDic setObject:@"SENDING" forKey:@"TYPE"];
         [self.editInfoDic setObject:[NSNumber numberWithInteger:tmpMsgIdx] forKey:@"TMP_NO"];
         [self.editInfoDic setObject:[NSNumber numberWithInteger:rowNo.row] forKey:@"TMP_IDX"];
         [self.editInfoDic setObject:dvcID forKey:@"DEVICE_ID"];
         [self.editInfoDic setObject:@"" forKey:@"LOCAL_CONTENT"];
         
         NSError *error;
         NSData *jsonData = [NSJSONSerialization dataWithJSONObject:self.editInfoDic options:0 error:&error];
         NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
         
         [self.firstAddMsg setObject:jsonString forKey:@"ADIT_INFO"];
         
         if(msgDataCnt > 0){
            //메시지가 있는 채팅방일 경우
            [self.msgData.chatArray insertObject:self.firstAddMsg atIndex:msgDataCnt-count];
            
            NSIndexPath *lastCell = [NSIndexPath indexPathForItem:msgDataCnt-count inSection:0];
            [self.tableView beginUpdates];
            [self.tableView insertRowsAtIndexPaths:@[lastCell] withRowAnimation:UITableViewRowAnimationNone];
            [self.tableView endUpdates];
            [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
            
         } else {
            //메시지가 없는 새로운 채팅방일 경우
            [self.msgData.chatArray addObject:self.firstAddMsg];
            [self.tableView reloadData];
            
            NSIndexPath *lastCell = [NSIndexPath indexPathForItem:0 inSection:0];
            [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
         }
         
         self.inputToolbar.contentView.textView.text = nil;
         
         [self.sendingMsgArr addObject:self.firstAddMsg];
         
         dispatch_async(dispatch_get_main_queue(), ^{
            [self callSaveChat:trimContent];
         });
         content = nil;
         trimContent = nil;
         
      } else {
         
      }
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
   
}

- (void)resendMessage:(NSDictionary *)dictionary {
   //NSLog(@"%s", __func__);
   NSUInteger msgDataCnt = self.msgData.chatArray.count;
   
   @try{
      NSString *roomNo = [dictionary objectForKey:@"ROOM_NO"];
      NSString *chatNo = [dictionary objectForKey:@"CHAT_NO"];
      NSString *contentType = [dictionary objectForKey:@"CONTENT_TY"];
      NSString *content = [dictionary objectForKey:@"CONTENT"];
      
      NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
      [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSString *date = [dateFormatter stringFromDate:[NSDate date]];
      
      int count = missedCnt + tmpMissedCnt;
      
      NSIndexPath *rowNo = [NSIndexPath indexPathForItem:(msgDataCnt-count) inSection:0];
      self.editInfoDic = [NSMutableDictionary dictionary];
      [self.editInfoDic setObject:@"SENDING" forKey:@"TYPE"];
      
      if([contentType isEqualToString:@"TEXT"]||[contentType isEqualToString:@"LONG_TEXT"]){
         [self.editInfoDic setObject:[NSNumber numberWithInteger:tmpMsgIdx] forKey:@"TMP_NO"];
         [self.editInfoDic setObject:[NSNumber numberWithInteger:rowNo.row] forKey:@"TMP_IDX"];
         [self.editInfoDic setObject:@"" forKey:@"LOCAL_CONTENT"];
         
         NSData* editData = [NSJSONSerialization dataWithJSONObject:self.editInfoDic options:0 error:nil];
         NSString* editJsonData = [[NSString alloc] initWithData:editData encoding:NSUTF8StringEncoding];
         
         [_msgResendDict setObject:editJsonData forKey:@"ADIT_INFO"];
         [_msgResendDict setObject:date forKey:@"DATE"];
         
         [self.sendingMsgArr addObject:_msgResendDict];
         [self.tmpSendingArr addObject:_msgResendDict];
         
         //재전송할때 실패메시지를 삭제하는 부분은 웹서비스 완료되면 해야되는일이 아닐까(일단 나중에)
         NSString *sqlString = [NSString stringWithFormat:@"DELETE FROM MISSED_CHATS WHERE ROOM_NO=%@ AND CHAT_NO=%@;", roomNo, chatNo];
         [self crudStatement:self.DBPath :sqlString];
         
         [self.msgData.chatArray insertObject:_msgResendDict atIndex:msgDataCnt-count];
         [self.msgData.chatArray removeObjectAtIndex:msg_rIdx+1];
         
         tmpMissedCnt--;
         
         [self.tableView reloadData];
         [self callSaveChat:content];
         
         [self scrollToBottomAnimated:YES];
         
      } else {
         [self.msgData.chatArray insertObject:_msgResendDict atIndex:msgDataCnt-count];
         [self.msgData.chatArray removeObjectAtIndex:self.msgData.chatArray.count-count-1];
         [self.msgData.chatArray removeObjectAtIndex:msg_rIdx];
         tmpMissedCnt--;
         
         NSString *sqlString = [NSString stringWithFormat:@"DELETE FROM MISSED_CHATS WHERE ROOM_NO=%@ AND CHAT_NO=%@;", roomNo, chatNo];
         [self crudStatement:self.DBPath :sqlString];
         
         [self saveAttachedFile:dictionary];
         [self scrollToBottomAnimated:YES];
      }
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (void)touchedMsgFailButton:(NSInteger)indexPath{
   UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:nil message:nil preferredStyle:UIAlertControllerStyleActionSheet];
   UIAlertAction *resendAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"재전송", @"")
                                                          style:UIAlertActionStyleDefault
                                                        handler:^(UIAlertAction * action){
                                                           _msgResendDict = [[NSMutableDictionary alloc]init];
                                                           
                                                           @try{
                                                              [_msgResendDict setObject:[[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"ROOM_NO"] forKey:@"ROOM_NO"];
                                                              [_msgResendDict setObject:[[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"CHAT_NO"] forKey:@"CHAT_NO"];
                                                              [_msgResendDict setObject:[[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"CONTENT_TY"] forKey:@"CONTENT_TY"];
                                                              [_msgResendDict setObject:[[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"CONTENT"] forKey:@"CONTENT"];
                                                              [_msgResendDict setObject:[[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"USER_NO"] forKey:@"USER_NO"];
                                                              [_msgResendDict setObject:[[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"ADIT_INFO"] forKey:@"ADIT_INFO"];
                                                              
                                                              NSString *aditInfo = [_msgResendDict objectForKey:@"ADIT_INFO"];
                                                              NSString *contentType = [[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"CONTENT_TY"];
                                                              
                                                              if([contentType isEqualToString:@"IMG"]){
                                                                 NSRange range = [aditInfo rangeOfString:@"/" options:NSBackwardsSearch];
                                                                 NSString *fileName = [aditInfo substringFromIndex:range.location+1];
                                                                 [_msgResendDict setObject:fileName forKey:@"FILE_NM"];
                                                              }
                                                              
                                                              msg_rIdx = indexPath;
                                                              
                                                              [self resendMessage:_msgResendDict];
                                                              [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                              
                                                           } @catch (NSException *exception) {
                                                              //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
                                                           }
                                                        }];
   
   UIAlertAction *deleteAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"삭제", @"삭제")
                                                          style:UIAlertActionStyleDestructive
                                                        handler:^(UIAlertAction * action){
                                                           _msgDeleteDict = [[NSMutableDictionary alloc]init];
                                                           
                                                           @try{
                                                              [_msgDeleteDict setObject:[[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"ROOM_NO"] forKey:@"ROOM_NO"];
                                                              [_msgDeleteDict setObject:[[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"CHAT_NO"] forKey:@"CHAT_NO"];
                                                              [_msgDeleteDict setObject:[[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"CONTENT_TY"] forKey:@"CONTENT_TY"];
                                                              [_msgDeleteDict setObject:[[self.msgData.chatArray objectAtIndex:indexPath]objectForKey:@"CONTENT"] forKey:@"CONTENT"];
                                                              
                                                              UIAlertView *alert = [[UIAlertView alloc]initWithTitle:nil message:@"선택한 메시지를 삭제하시겠습니까?" delegate:self cancelButtonTitle:@"취소" otherButtonTitles:@"확인", nil];
                                                              [alert show];
                                                              
                                                              msg_dIdx = indexPath;
                                                              [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                           } @catch (NSException *exception) {
                                                              //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
                                                           }
                                                        }];
   [actionSheet addAction:resendAction];
   [actionSheet addAction:deleteAction];
   
   if([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad){
      UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"취소", @"취소")
                                                             style:UIAlertActionStyleDefault
                                                           handler:^(UIAlertAction * action){
                                                              [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                           }];
      [actionSheet addAction:cancelAction];
      
      [actionSheet.popoverPresentationController setPermittedArrowDirections:0];
      CGRect rect = self.view.frame;
      rect.origin.x = (self.view.frame.size.width/2)-(actionSheet.view.frame.size.width/2);
      rect.origin.y = (self.view.frame.size.height/2)-(actionSheet.view.frame.size.height/2);
      actionSheet.popoverPresentationController.sourceView = self.view;
      actionSheet.popoverPresentationController.sourceRect = rect;
   } else {
      UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"취소", @"취소")
                                                             style:UIAlertActionStyleCancel
                                                           handler:^(UIAlertAction * action){
                                                              [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                           }];
      [actionSheet addAction:cancelAction];
   }
   
   [self presentViewController:actionSheet animated:YES completion:nil];
}

- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {
   //메시지삭제
   if(buttonIndex == 1){
      //NSLog(@"_msgDeleteDict : %@", _msgDeleteDict);
      @try{
         NSString *roomNo = [_msgDeleteDict objectForKey:@"ROOM_NO"];
         NSString *chatNo = [_msgDeleteDict objectForKey:@"CHAT_NO"];
         
         NSString *sqlString = [NSString stringWithFormat:@"DELETE FROM MISSED_CHATS WHERE ROOM_NO=%@ AND CHAT_NO=%@;", roomNo, chatNo];
         [self crudStatement:self.DBPath :sqlString];
         
         [self.msgData.chatArray removeObjectAtIndex:msg_dIdx];
         
         tmpMissedCnt--;
         
         [self.tableView reloadData];
         
      } @catch (NSException *exception) {
         //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
      }
   }
}

- (void)saveAttachedFile:(NSDictionary *)userInfo{
   //NSLog(@"userInfo : %@", userInfo);
   self.assetArray = [userInfo objectForKey:@"ASSET_LIST"];
   
   NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
   [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
   NSString *date = [dateFormatter stringFromDate:[NSDate date]];
   
   //여기서 초기화를 시키면 사진연속전송 후 촬영이미지 전송 시 이미지가 변경됨
   //imgCnt=0;
   uploadCnt=0;
   
   NSUInteger msgDataCnt = self.msgData.chatArray.count;
   
   //사진앨범에서 선택
   NSUInteger imgArrCnt = self.imageArray.count;
   if(self.assetArray.count > 0){
      @try{
         for (int i=0; i<imgArrCnt; i++) {
            tmpImgIdx++;
            imgCnt++;
            
            [self.tmpIdxArr addObject:[NSNumber numberWithInteger:tmpImgIdx]];
            
            UIImage *image = [self.imageArray objectAtIndex:i];
            NSData * data = UIImageJPEGRepresentation(image, 0.1);
            //NSLog(@"1 image w : %f, h : %f", image.size.width, image.size.height);
            
            NSString *orientation;
            if(image.size.width > image.size.height) orientation = @"HORIZONTAL";
            else orientation = @"VERTICAL";
            
            self.firstAddMsg = [[NSMutableDictionary alloc]init];
            [self.firstAddMsg setObject:self.myUserNo forKey:@"USER_NO"];
            [self.firstAddMsg setObject:self.roomNo forKey:@"ROOM_NO"];
            [self.firstAddMsg setObject:@"" forKey:@"CONTENT"];
            [self.firstAddMsg setObject:@"IMG" forKey:@"CONTENT_TY"];
            [self.firstAddMsg setObject:date forKey:@"DATE"];
            [self.firstAddMsg setObject:orientation forKey:@"ORIENTATION"];
            
            self.asset = [[userInfo objectForKey:@"ASSET_LIST"] objectAtIndex:i];
            
            NSString *fileName = [self createFileName];
            [self.firstAddMsg setObject:fileName forKey:@"FILE_NM"];
            [self.fileNameArr addObject:fileName];
            
            NSMutableDictionary *aditDic = [NSMutableDictionary dictionary];
            
            //로컬tmp경로 ADIT_INFO에 추가
            NSString *tmpPath = NSTemporaryDirectory();
            NSString *imagePath = [tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@",fileName]];
            //[self.firstAddMsg setObject:imagePath forKey:@"ADIT_INFO"];
            
            //썸네일이미지 로컬경로에 저장
            NSData *thumbData = UIImagePNGRepresentation([self getScaledImage:image scaledToMaxWidth:180.0f]);
            NSString *thumbImgPath =[tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"mThumb_%@",fileName]];
            NSLog(@"thumbImgPath : %@", thumbImgPath);
            [thumbData writeToFile:thumbImgPath atomically:YES];
            
            //원본이미지 로컬경로에 저장
            NSData *originData = UIImageJPEGRepresentation(image, 0.1);
            NSString *originImgPath =[tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@",fileName]];
            [originData writeToFile:originImgPath atomically:YES];
            
            //NSString *result = [self checkDataNetwork];
            //if([result isEqualToString:@"Cellular"] || [result isEqualToString:@"WIFI"]){
            int count = missedCnt + tmpMissedCnt;
            //NSLog(@"self.msgData.chatArray.count : %lu", self.msgData.chatArray.count);
            //NSLog(@"count : %d, tmpImgIdx : %d", count, tmpImgIdx);
            
            NSIndexPath *rowNo = [NSIndexPath indexPathForItem:(self.msgData.chatArray.count-count) inSection:0];
            
            [aditDic setObject:@"SENDING" forKey:@"TYPE"];
            [aditDic setObject:[NSNumber numberWithInteger:tmpImgIdx] forKey:@"TMP_NO"];
            [aditDic setObject:[NSNumber numberWithInteger:rowNo.row] forKey:@"TMP_IDX"];
            [aditDic setObject:imagePath forKey:@"LOCAL_CONTENT"];
            
            NSError *error;
            NSData *jsonData = [NSJSONSerialization dataWithJSONObject:aditDic options:0 error:&error];
            NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
            
            [self.firstAddMsg setObject:jsonString forKey:@"ADIT_INFO"];
            
            if(msgDataCnt > 0){
               //메시지가 있는 채팅방일 경우
               [self.msgData.chatArray insertObject:self.firstAddMsg atIndex:self.msgData.chatArray.count-count];
               
               NSIndexPath *lastCell = [NSIndexPath indexPathForItem:(self.msgData.chatArray.count-count-1) inSection:0];
               [self.tableView beginUpdates];
               [self.tableView insertRowsAtIndexPaths:@[lastCell] withRowAnimation:UITableViewRowAnimationNone];
               [self.tableView endUpdates];
               [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
               
            } else {
               //메시지가 없는 새로운 채팅방일 경우
               [self.msgData.chatArray addObject:self.firstAddMsg];
               
               [self.tableView reloadData];
               
               NSIndexPath *lastCell = [NSIndexPath indexPathForItem:0 inSection:0];
               [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
            }
            
            [self.sendingMsgArr addObject:self.firstAddMsg];
            [self.tmpSendingArr addObject:self.firstAddMsg];
            
            if(imgCnt==1) {
               [self saveAttachedFile:data AndFileName:fileName];
            }
         }
         
      } @catch (NSException *exception) {
         //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
      }
      
   } else {
      //이미지 메시지 재전송 or 사진촬영
      tmpImgIdx++;
      
      @try{
         NSString *aditInfo = [userInfo objectForKey:@"ADIT_INFO"];
         NSString *fileName =  [userInfo objectForKey:@"FILE_NM"];
         
         self.firstAddMsg = [[NSMutableDictionary alloc]init];
         [self.firstAddMsg setObject:self.myUserNo forKey:@"USER_NO"];
         [self.firstAddMsg setObject:self.roomNo forKey:@"ROOM_NO"];
         [self.firstAddMsg setObject:@"" forKey:@"CONTENT"];
         [self.firstAddMsg setObject:@"IMG" forKey:@"CONTENT_TY"];
         [self.firstAddMsg setObject:aditInfo forKey:@"ADIT_INFO"];
         [self.firstAddMsg setObject:date forKey:@"DATE"];
         [self.firstAddMsg setObject:fileName forKey:@"FILE_NM"];
         
         NSData* imgData = [[NSFileManager defaultManager] contentsAtPath:aditInfo];
         UIImage *image = [UIImage imageWithData:imgData];
         NSData * data = UIImageJPEGRepresentation(image, 0.1);
         
         NSMutableDictionary *aditDic = [NSMutableDictionary dictionary];
         
         NSString *tmpPath = NSTemporaryDirectory();
         
         //썸네일이미지 로컬경로에 저장
         NSData *thumbData = UIImagePNGRepresentation([self getScaledImage:image scaledToMaxWidth:180.0f]);
         NSString *thumbImgPath =[tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"mThumb_%@",fileName]];
         [thumbData writeToFile:thumbImgPath atomically:YES];
         
         //원본이미지 로컬경로에 저장
         NSData *originData = UIImageJPEGRepresentation(image, 0.1);
         NSString *originImgPath =[tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@",fileName]];
         [originData writeToFile:originImgPath atomically:YES];
         
         int count = missedCnt + tmpMissedCnt;
         
         NSIndexPath *rowNo = [NSIndexPath indexPathForItem:(self.msgData.chatArray.count-count) inSection:0];
         
         [aditDic setObject:@"SENDING" forKey:@"TYPE"];
         [aditDic setObject:[NSNumber numberWithInteger:tmpImgIdx] forKey:@"TMP_NO"];
         //[aditDic setObject:[NSNumber numberWithInteger:tmpImgIdx-1] forKey:@"TMP_IDX"];
         [aditDic setObject:[NSNumber numberWithInteger:rowNo.row] forKey:@"TMP_IDX"];
         [aditDic setObject:originImgPath forKey:@"LOCAL_CONTENT"];
         
         NSError *error;
         NSData *jsonData = [NSJSONSerialization dataWithJSONObject:aditDic options:0 error:&error];
         NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
         
         [self.firstAddMsg setObject:jsonString forKey:@"ADIT_INFO"];
         
         if(self.msgData.chatArray.count > 0){
            //메시지가 있는 채팅방일 경우
            [self.msgData.chatArray insertObject:self.firstAddMsg atIndex:self.msgData.chatArray.count-count];
            
            NSIndexPath *lastCell = [NSIndexPath indexPathForItem:(self.msgData.chatArray.count-count-1) inSection:0];
            [self.tableView beginUpdates];
            [self.tableView insertRowsAtIndexPaths:@[lastCell] withRowAnimation:UITableViewRowAnimationNone];
            [self.tableView endUpdates];
            [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
            
         } else {
            //메시지가 없는 새로운 채팅방일 경우
            [self.msgData.chatArray addObject:self.firstAddMsg];
            [self.tableView reloadData];
            
            NSIndexPath *lastCell = [NSIndexPath indexPathForItem:0 inSection:0];
            [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
         }
         
         [self.sendingMsgArr addObject:self.firstAddMsg];
         [self.tmpSendingArr addObject:self.firstAddMsg];
         
         [self saveAttachedFile:data AndFileName:fileName];
         
      } @catch (NSException *exception) {
         //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
      }
   }
   
   if(_isFlag){ //미디어버튼
      UIImage *accessoryImage = [UIImage imageNamed:@"btn_add.png"];
      UIImage *normalImage = [accessoryImage jsq_imageMaskedWithColor:[UIColor lightGrayColor]];
      [_mediaButton setImage:normalImage forState:UIControlStateNormal];
      
      _mediaButton.contentMode = UIViewContentModeScaleAspectFit;
      _mediaButton.backgroundColor = [UIColor clearColor];
      
      self.inputToolbar.contentView.textView.inputView = nil;
      [self.inputToolbar.contentView.textView reloadInputViews];
      
      _isFlag = false;
   }
}


- (void)saveAttachedFile:(NSData *)data AndFileName:(NSString *)fileName{
   //NSLog(@"fileName : %@", fileName);
   if (self.roomNo==nil) {
      NSLog(@"roomNo is nil");
   }else{
      @try{
         NSString *dvcID = [[NSUserDefaults standardUserDefaults] objectForKey:@"DVC_ID"];//[MFUtil getUUID];
         UIImage *image = [UIImage imageWithData:data];
         NSString *orientation;
         if(image.size.width > image.size.height) orientation = @"HORIZONTAL";
         else orientation = @"VERTICAL";
         
         NSData *jsonData = [[self.firstAddMsg objectForKey:@"ADIT_INFO"] dataUsingEncoding:NSUTF8StringEncoding];
         NSError *e;
         NSDictionary *editDic = [NSJSONSerialization JSONObjectWithData:jsonData options:0 error:&e];
         
         NSMutableDictionary *aditDic = [NSMutableDictionary dictionary];
         [aditDic setObject:[editDic objectForKey:@"TMP_NO"] forKey:@"TMP_NO"];
         [aditDic setObject:[editDic objectForKey:@"TMP_IDX"] forKey:@"TMP_IDX"];
         [aditDic setObject:[editDic objectForKey:@"LOCAL_CONTENT"] forKey:@"LOCAL_CONTENT"];
         [aditDic setObject:[editDic objectForKey:@"TYPE"] forKey:@"TYPE"];
         [aditDic setObject:dvcID forKey:@"DEVICE_ID"];
         [aditDic setObject:orientation forKey:@"ORIENTATION"];
         
         NSData* aditData = [NSJSONSerialization dataWithJSONObject:aditDic options:0 error:nil];
         NSString* aditJsonData = [[NSString alloc] initWithData:aditData encoding:NSUTF8StringEncoding];
         
         NSMutableDictionary *sendFileParam = [NSMutableDictionary dictionary];
         [sendFileParam setObject:self.roomNo forKey:@"roomNo"];
         [sendFileParam setObject:[[NSUserDefaults standardUserDefaults] objectForKey:@"USER_ID"] forKey:@"usrId"];
         [sendFileParam setObject:self.myUserNo forKey:@"usrNo"];
         [sendFileParam setObject:@"3" forKey:@"refTy"];
         [sendFileParam setObject:self.roomNo forKey:@"refNo"];
         [sendFileParam setObject:aditJsonData forKey:@"aditInfo"];
         
         NSString *urlString = appDelegate.main_url;
         urlString = [urlString stringByAppendingPathComponent:@"saveAttachedFile"];
         
         MFURLSessionUpload *sessionUpload = [[MFURLSessionUpload alloc]initWithURL:[NSURL URLWithString:urlString] option:sendFileParam WithData:data AndFileName:fileName];
         sessionUpload.delegate = self;
         [sessionUpload start];
         
      } @catch (NSException *exception) {
         //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
      }
   }
}

- (NSString *)createFileName{
   @try{
      NSString *fileName = nil;
      NSDate *today = [NSDate date];
      NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
      //[dateFormatter setDateFormat:@"yyMMdd-HHmmss.SSS"];
      [dateFormatter setDateFormat:@"yyMMdd-HHmmss"];
      NSString *currentTime = [dateFormatter stringFromDate:today];
      NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"USER_ID"];
      fileName = [NSString stringWithFormat:@"%@(%@).png",userID,currentTime];
      return fileName;
      
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

#pragma mark - Call Webservice
- (void)callChatReadStatus {
   NSLog(@"%s", __func__);
   
   NSString *sqlString = [NSString stringWithFormat:@"SELECT IFNULL(MIN(CHAT_NO),'-1') FIRST_CHAT, IFNULL(MAX(CHAT_NO),'-1') LAST_CHAT FROM CHATS WHERE CONTENT_TY != 'SYS' AND IS_READ = 0 AND ROOM_NO = %@ AND USER_NO != %@", _roomNo, self.myUserNo];
   
   self.dbHelper = [[MFDBHelper alloc]init];
   NSMutableArray *selectArr = [self.dbHelper selectQuery:sqlString];
   
   @try{
      NSNumber *firstChat = [[selectArr objectAtIndex:0] objectForKey:@"FIRST_CHAT"];
      NSNumber *lastChat = [[selectArr objectAtIndex:0] objectForKey:@"LAST_CHAT"];
      
      if(![[NSString stringWithFormat:@"%@", firstChat] isEqualToString:@"-1"] && ![[NSString stringWithFormat:@"%@", lastChat] isEqualToString:@"-1"]){
         NSString *urlString = appDelegate.main_url;
         NSLog(@"urlString : %@", urlString);
         NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"saveChatReadStatus"]];
         NSString *paramString = [NSString stringWithFormat:@"usrNo=%@&roomNo=%@&firstChatNo=%@&lastChatNo=%@", self.myUserNo, self.roomNo, firstChat, lastChat];
         MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
         session.delegate = self;
         [session start];
      } else {
         //NSLog(@"FIRST AND LAST CHATS ARE NULL---------");
      }
      
      appDelegate.currChatRoomNo = self.roomNo;
      
      NSString *sqlString2 = [NSString stringWithFormat:@"UPDATE CHATS SET IS_READ = 1 WHERE ROOM_NO=%@;",  self.roomNo];
      [self crudStatement:self.DBPath :sqlString2];
      
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

//텍스트메시지 전송/재전송 웹서비스
- (void)callSaveChat:(NSString *)message{
   NSString *urlString = appDelegate.main_url;
   NSMutableDictionary *contentDic = [NSMutableDictionary dictionary];
   
   @try{
      NSError *error;
      NSData* editData = [NSJSONSerialization dataWithJSONObject:self.editInfoDic options:0 error:&error];
      NSString* editJsonData = [[NSString alloc] initWithData:editData encoding:NSUTF8StringEncoding];
      
      if([message rangeOfString:@"%"].location != NSNotFound){
         message = [message stringByReplacingOccurrencesOfString:@"%" withString:@"%25"];
      }
      if([message rangeOfString:@"&"].location != NSNotFound){
         message = [message stringByReplacingOccurrencesOfString:@"&" withString:@"%26"];
      }
      
      NSUInteger textByte = [message lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
      if(textByte>1000) [contentDic setObject:@"LONG_TEXT" forKey:@"TYPE"];
      else [contentDic setObject:@"TEXT" forKey:@"TYPE"];
      
      [contentDic setObject:message forKey:@"VALUE"];
      
      if(![message isEqualToString:@""]){
         NSData* data = [NSJSONSerialization dataWithJSONObject:contentDic options:0 error:nil];
         NSString* jsonData = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
         
         NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"saveChat"]];
         
         //aditInfo : 메시지번호 등의 추가정보
         NSString *paramString = [NSString stringWithFormat:@"usrNo=%@&roomNo=%@&content=%@&aditInfo=%@", self.myUserNo, self.roomNo, jsonData, editJsonData];
         MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
         session.delegate = self;
         [session start];
      }
      
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (void)callSaveInviteChat:(NSDictionary *)dict{
   NSString *urlString = appDelegate.main_url;
   NSMutableDictionary *contentDic = [NSMutableDictionary dictionary];
   
   @try {
      NSError *error;
      NSData* editData = [NSJSONSerialization dataWithJSONObject:self.editInfoDic options:0 error:&error];
      NSString* editJsonData = [[NSString alloc] initWithData:editData encoding:NSUTF8StringEncoding];
      
      [contentDic setObject:@"INVITE" forKey:@"TYPE"];
      [contentDic setObject:dict forKey:@"VALUE"];
      NSLog(@"contentDic : %@", contentDic);
      
      NSData* data = [NSJSONSerialization dataWithJSONObject:contentDic options:0 error:nil];
      NSString* jsonData = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
      //NSLog(@"jsonData : %@", jsonData);
      
      NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"saveChat"]];
      
      //aditInfo : 메시지번호 등의 추가정보
      NSString *paramString = [NSString stringWithFormat:@"usrNo=%@&roomNo=%@&content=%@&aditInfo=%@", self.myUserNo, self.roomNo, jsonData, editJsonData];
      MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
      session.delegate = self;
      [session start];
      
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (void)callJoinSns:(NSString *)snsNo{
   NSString *urlString = appDelegate.main_url;
   NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"joinSNS"]];
   
   //aditInfo : 메시지번호 등의 추가정보
   NSString *paramString = [NSString stringWithFormat:@"usrNo=%@&snsNo=%@", self.myUserNo, snsNo];
   MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
   session.delegate = self;
   [session start];
}

#pragma mark - MFURLSession delegate
- (void)returnDataWithObject:(MFURLSession *)session error:(NSString *)error{
   //NSLog(@"%s", __func__);
   if (error != nil) {
      //실패테이블에 저장
      @try{
         tmpMissedCnt++;
         NSLog(@"실패dic : %@",session.returnDictionary);
         
         NSArray *dataSet = [session.returnDictionary objectForKey:@"DATASET"];
         NSString *roomNo = [[dataSet objectAtIndex:0] objectForKey:@"ROOM_NO"];
         NSString *contentType = [[dataSet objectAtIndex:0] objectForKey:@"CONTENT_TY"];
         NSString *content = [[dataSet objectAtIndex:0] objectForKey:@"CONTENT"];
         NSString *contentPrev = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"CONTENT_PREV"]];
         NSString *decodeContent = [NSString urlDecodeString:content];
         NSString *fileName = [[dataSet objectAtIndex:0] objectForKey:@"FILE_NM"];
         NSString *decodeFileNm = [NSString urlDecodeString:fileName];
         
         NSError *error;
         NSData *jsonData = [NSJSONSerialization dataWithJSONObject:self.editInfoDic options:0 error:&error];
         NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
         
         if([contentType isEqualToString:@"LONG_TEXT"]){
            NSString *sqlString = [NSString stringWithFormat:@"INSERT INTO missed_chats(room_no, content_ty, content, file_nm, adit_info, content_prev) VALUES(%@, '%@', '', '%@', '%@', '%@');", roomNo, contentType, decodeFileNm, jsonString, contentPrev];
            [self crudStatement:self.DBPath :sqlString];
            
         } else {
            NSString *sqlString = [NSString stringWithFormat:@"INSERT INTO missed_chats(room_no, content_ty, content, file_nm, adit_info, content_prev) VALUES(%@, '%@', '%@', '%@', '%@', '');", roomNo, contentType, decodeContent, decodeFileNm, jsonString];
            [self crudStatement:self.DBPath :sqlString];
         }
         
         NSString *sqlString2 = @"SELECT * FROM MISSED_CHATS ORDER BY CHAT_NO DESC LIMIT 1;";
         [self.dbHelper selectQuery:sqlString2];
         
      } @catch (NSException *exception) {
         //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
      }
      
   } else {
      //NSLog(@"dic : %@",session.returnDictionary);
      if(session.returnDictionary != nil){
         NSString *result = [session.returnDictionary objectForKey:@"RESULT"];
         NSString *wsName = [[session.url absoluteString] lastPathComponent];
         
         if ([result isEqualToString:@"SUCCESS"]) {
            @try{
               if ([wsName isEqualToString:@"saveAttachedFile"]) {
                  NSString *affected = [session.returnDictionary objectForKey:@"AFFECTED"];
                  if ([affected intValue]>0) {
                     [self dismissViewControllerAnimated:YES completion:^(void){
                        //채팅에서 noti_savePost를 왜쓰지??? 확인필요
                        [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_SavePost" object:nil userInfo:@{@"RESULT":@"SUCCESS"}];
                     }];
                  }
               } else if([wsName isEqualToString:@"saveChatReadStatus"]){
                  NSLog(@"saveChatReadStatus dic : %@",session.returnDictionary);
                  
                  if(appDelegate.isChatViewing){
                     NSString *roomNo = [session.returnDictionary objectForKey:@"ROOM_NO"];
                     NSArray *dataSet = [session.returnDictionary objectForKey:@"DATASET"];
                     for(int i=0; i<dataSet.count; i++){
                        NSString *chatNoList = [NSString urlDecodeString:[[dataSet objectAtIndex:i] objectForKey:@"CHAT_NO_LIST"]];
                        NSNumber *unreadCnt = [[dataSet objectAtIndex:i] objectForKey:@"UNREAD_COUNT"];
                        
                        NSString *sqlString = [NSString stringWithFormat:@"UPDATE CHATS SET UNREAD_COUNT = %@ WHERE ROOM_NO=%@ AND CHAT_NO IN (%@);", unreadCnt, roomNo, chatNoList];
                        [self crudStatement:self.DBPath :sqlString];
                        
                        unReadCnt = unreadCnt;
                     }
                     
                     if([[NSString stringWithFormat:@"%@", roomNo] isEqualToString:[NSString stringWithFormat:@"%@", self.roomNo]]){
                        NSLog(@"읽음카운트 처리");
                        //읽음카운트 처리 (reload하니 채팅이 버벅거리면서 올라감. reload안해도 읽음 처리는 됨. 왜지? 테스트 계속 해봐야 할듯)
                        //[self.tableView reloadData];
                     } else {
                        
                     }
                  }
                  
               } else if([wsName isEqualToString:@"saveChat"]){
                  //웹서비스 리턴 결과 무시(SUCCESS)
                  //NSLog(@"웹서비스 리턴 결과 무시(SUCCESS)");
                  
               } else if([wsName isEqualToString:@"joinSNS"]){
                  NSMutableArray *dataSet = [session.returnDictionary objectForKey:@"DATASET"];
                  //NSLog(@"dataSet : %@", dataSet);
                  NSString *affected = [[dataSet objectAtIndex:0] objectForKey:@"AFFECTED"];
                  NSString *needAllow = [[dataSet objectAtIndex:0] objectForKey:@"NEED_ALLOW"];
                  NSString *snsName = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"SNS_NM"]];
                  
                  if([affected intValue]==1){
                     if([needAllow intValue]==0){
                        //가입완료
                        UIAlertController *alert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"join_sns_toast1", @"join_sns_toast1"), snsName] message:nil preferredStyle:UIAlertControllerStyleAlert];
                        UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                         handler:^(UIAlertAction * action) {
                                                                            [alert dismissViewControllerAnimated:YES completion:nil];
                                                                            
                                                                            [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_RefreshTeamList" object:nil userInfo:nil];
                                                                            [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_RefreshTeamSelect" object:nil userInfo:nil];
                                                                            [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_RefreshFeed" object:nil userInfo:nil];
                                                                         }];
                        
                        [alert addAction:okButton];
                        [self presentViewController:alert animated:YES completion:nil];
                        
                     } else if([needAllow intValue]==1){
                        //가입 신청 완료
                        UIAlertController *alert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"join_sns_toast2", @"join_sns_toast2"), snsName] message:nil preferredStyle:UIAlertControllerStyleAlert];
                        UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                         handler:^(UIAlertAction * action) {
                                                                            [alert dismissViewControllerAnimated:YES completion:nil];
                                                                            
                                                                            [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_RefreshTeamList" object:nil userInfo:nil];
                                                                            [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_RefreshTeamSelect" object:nil userInfo:nil];
                                                                            [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_RefreshFeed" object:nil userInfo:nil];
                                                                         }];
                        
                        [alert addAction:okButton];
                        [self presentViewController:alert animated:YES completion:nil];
                     }
                     
                  } else if ([affected intValue]==0) {
                     if([needAllow intValue]==0){
                        //이미 가입된 상태
                        UIAlertController *alert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"join_sns_toast3", @"join_sns_toast3"), snsName] message:nil preferredStyle:UIAlertControllerStyleAlert];
                        UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                         handler:^(UIAlertAction * action) {
                                                                            [alert dismissViewControllerAnimated:YES completion:nil];
                                                                         }];
                        
                        [alert addAction:okButton];
                        [self presentViewController:alert animated:YES completion:nil];
                        
                     } else if([needAllow intValue]==1){
                        //이미 가입 신청된 상태
                        UIAlertController *alert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"join_sns_toast4", @"join_sns_toast4"), snsName] message:nil preferredStyle:UIAlertControllerStyleAlert];
                        UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                         handler:^(UIAlertAction * action) {
                                                                            [alert dismissViewControllerAnimated:YES completion:nil];
                                                                         }];
                        [alert addAction:okButton];
                        [self presentViewController:alert animated:YES completion:nil];
                     }
                  }
               }
               
            } @catch (NSException *exception) {
               //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
            }
            
         } else{
            //실패테이블에 저장
            @try{
               if([wsName isEqualToString:@"saveChat"]){
                  tmpMissedCnt++;
                  NSLog(@"실패dic2 : %@",session.returnDictionary);
                  NSArray *dataSet = [session.returnDictionary objectForKey:@"DATASET"];
                  NSString *roomNo = [[dataSet objectAtIndex:0] objectForKey:@"ROOM_NO"];
                  NSString *contentType = [[dataSet objectAtIndex:0] objectForKey:@"CONTENT_TY"];
                  NSString *content = [[dataSet objectAtIndex:0] objectForKey:@"CONTENT"];
                  NSString *decodeContent = [NSString urlDecodeString:content];
                  NSString *contentPrev = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"CONTENT"]];
                  NSString *fileName = [[dataSet objectAtIndex:0] objectForKey:@"FILE_NM"];
                  NSString *decodeFileNm = [NSString urlDecodeString:fileName];
                  
                  NSError *error;
                  NSData *jsonData = [NSJSONSerialization dataWithJSONObject:self.editInfoDic options:0 error:&error];
                  NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
                  
                  if([contentType isEqualToString:@"LONG_TEXT"]){
                     NSString *sqlString = [NSString stringWithFormat:@"INSERT INTO missed_chats(room_no, content_ty, content, file_nm, adit_info, content_prev) VALUES(%@, '%@', '', '%@', '%@', '%@');", roomNo, contentType, decodeFileNm, jsonString, contentPrev];
                     [self crudStatement:self.DBPath :sqlString];
                  } else {
                     NSString *sqlString = [NSString stringWithFormat:@"INSERT INTO missed_chats(room_no, content_ty, content, file_nm, adit_info, content_prev) VALUES(%@, '%@', '%@', '%@', '%@', '');", roomNo, contentType, decodeContent, decodeFileNm, jsonString];
                     [self crudStatement:self.DBPath :sqlString];
                  }
                  
                  NSString *sqlString2 = @"SELECT * FROM MISSED_CHATS ORDER BY CHAT_NO DESC LIMIT 1;";
                  [self.dbHelper selectQuery:sqlString2];
                  
               } else if([wsName isEqualToString:@"joinSNS"]){
                  //NSLog(@"session.returnDictionary : %@", session.returnDictionary);
                  NSString *message = [session.returnDictionary objectForKey:@"MESSAGE"];
                  if([message isEqualToString:@"SNS_IS_NULL"]){
                     UIAlertController *alert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"join_sns_toast5", @"join_sns_toast5") message:nil preferredStyle:UIAlertControllerStyleAlert];
                     UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                      handler:^(UIAlertAction * action) {
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                      }];
                     [alert addAction:okButton];
                     [self presentViewController:alert animated:YES completion:nil];
                  }
                  
               }
               
            } @catch (NSException *exception) {
               //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
            }
         }
      } else{
         //데이터,와이파이 둘 다 꺼져있을경우
         NSLog(@"인터넷 연결이 오프라인으로 나타납니다.");
         
      }
   }
}

- (void)returnError:(MFURLSession *)session error:(NSError *)error{
   NSLog(@"error code : %ld", (long)error.code);
   [SVProgressHUD dismiss];
   if(error.code == -1009){
      //Code=-1009 : 인터넷연결 꺼져있을경우?
      //실패테이블에 저장
      @try{
         tmpMissedCnt++;
         NSUInteger msgDataCnt = self.msgData.chatArray.count;
         int count = missedCnt + tmpMissedCnt;
         NSString *dvcID = [[NSUserDefaults standardUserDefaults] objectForKey:@"DVC_ID"];//[MFUtil getUUID];
         
         NSString *roomNo = [self.firstAddMsg objectForKey:@"ROOM_NO"];
         NSString *contentType = [self.firstAddMsg objectForKey:@"CONTENT_TY"];
         
         NSString *content;
         content = [NSString urlDecodeString:[self.firstAddMsg objectForKey:@"CONTENT"]];
         
         NSIndexPath *rowNo = [NSIndexPath indexPathForItem:(msgDataCnt-count) inSection:0];
         self.editInfoDic = [NSMutableDictionary dictionary];
         [self.editInfoDic setObject:@"FAILED" forKey:@"TYPE"];
         [self.editInfoDic setObject:[NSNumber numberWithInteger:tmpMsgIdx] forKey:@"TMP_NO"];
         [self.editInfoDic setObject:[NSNumber numberWithInteger:rowNo.row] forKey:@"TMP_IDX"];
         [self.editInfoDic setObject:dvcID forKey:@"DEVICE_ID"];
         [self.editInfoDic setObject:@"" forKey:@"LOCAL_CONTENT"];
         
         NSError *error;
         NSData *jsonData = [NSJSONSerialization dataWithJSONObject:self.editInfoDic options:0 error:&error];
         NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
         
         [self.firstAddMsg setObject:jsonString forKey:@"ADIT_INFO"];
         
         NSString *sqlString = [NSString stringWithFormat:@"INSERT INTO MISSED_CHATS(room_no, content_ty, content, file_nm, adit_info) VALUES(%@, '%@', '%@', '', '%@');", roomNo, contentType, content, jsonString];
         [self crudStatement:self.DBPath :sqlString];
         
         NSString *sqlString2 = @"SELECT * FROM MISSED_CHATS ORDER BY CHAT_NO DESC LIMIT 1;";
         NSMutableArray *selectArr = [self.dbHelper selectQuery:sqlString2];
         [self.firstAddMsg setObject:[[selectArr objectAtIndex:0]objectForKey:@"CHAT_NO"] forKey:@"CHAT_NO"];
         
         [self.msgData.chatArray removeObjectAtIndex:rowNo.row];
         [self.msgData.chatArray insertObject:self.firstAddMsg atIndex:self.msgData.chatArray.count];
         
         [self.tableView reloadData];
         
      } @catch (NSException *exception) {
         //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
      }
   }
}

#pragma mark - MFURLSessionUpload Delegate
-(void)returnDictionary:(NSDictionary *)dictionary WithError:(NSString *)error{
   NSLog(@"%s", __func__);
   if (error != nil) {
      
   }else{
      if(dictionary != nil){
         
         @try{
            uploadCnt++;
            NSLog(@"imageArray count : %lu, uploadCnt : %d", (unsigned long)self.imageArray.count, uploadCnt);
            NSLog(@"imageCnt : %d", imgCnt);
            //NSLog(@"fileurl : %@", [dictionary objectForKey:@"FILE_URL"]);
            //NSLog(@"dictionary : %@", dictionary);
            
            if(self.imageArray.count > uploadCnt){
               //int count = missedCnt + tmpMissedCnt;
               
               NSError *error;
               //NSLog(@"sendingArr : %@", self.sendingMsgArr);
               //NSLog(@"self.tmpSendingArr : %@", self.tmpSendingArr);
               
               if(self.sendingMsgArr.count>0 /*&& uploadCnt>1*/){
                  NSString *sendInfo = [[self.tmpSendingArr objectAtIndex:uploadCnt] objectForKey:@"ADIT_INFO"];
                  NSData *jsonData = [sendInfo dataUsingEncoding:NSUTF8StringEncoding];
                  NSDictionary *sendInfoDic = [NSJSONSerialization JSONObjectWithData:jsonData options:0 error:&error];
                  NSString *sendIdx = [sendInfoDic objectForKey:@"TMP_IDX"];
                  NSString *sendNo = [sendInfoDic objectForKey:@"TMP_NO"];
                  NSString *imagePath = [sendInfoDic objectForKey:@"LOCAL_CONTENT"];
                  
                  UIImage *image =[self.imageArray objectAtIndex:uploadCnt];
                  NSData * data = UIImageJPEGRepresentation(image, 0.1);
                  
                  NSString *orientation;
                  if(image.size.width > image.size.height) orientation = @"HORIZONTAL";
                  else orientation = @"VERTICAL";
                  
                  NSMutableDictionary *editDic = [NSMutableDictionary dictionary];
                  [editDic setObject:@"SENDING" forKey:@"TYPE"];
                  [editDic setObject:[NSNumber numberWithInteger:[sendNo integerValue]] forKey:@"TMP_NO"];
                  [editDic setObject:[NSNumber numberWithInteger:[sendIdx integerValue]] forKey:@"TMP_IDX"];
                  //[editDic setObject:imagePath forKey:@"LOCAL_CONTENT"];
                  [editDic setObject:imagePath forKey:@"LOCAL_CONTENT"];
                  [editDic setObject:orientation forKey:@"ORIENTATION"];
                  
                  NSData* editData = [NSJSONSerialization dataWithJSONObject:editDic options:0 error:nil];
                  NSString* editJsonData = [[NSString alloc] initWithData:editData encoding:NSUTF8StringEncoding];
                  
                  NSMutableDictionary *sendFileParam = [NSMutableDictionary dictionary];
                  [sendFileParam setObject:self.roomNo forKey:@"roomNo"];
                  [sendFileParam setObject:[[NSUserDefaults standardUserDefaults] objectForKey:@"USER_ID"] forKey:@"usrId"];
                  [sendFileParam setObject:self.myUserNo forKey:@"usrNo"];
                  [sendFileParam setObject:@"3" forKey:@"refTy"];
                  [sendFileParam setObject:self.roomNo forKey:@"refNo"];
                  [sendFileParam setObject:editJsonData forKey:@"aditInfo"];
                  
                  NSString *urlString = appDelegate.main_url;
                  urlString = [urlString stringByAppendingPathComponent:@"saveAttachedFile"];
                  NSString *fileName = [self.fileNameArr objectAtIndex:uploadCnt];
                  //NSLog(@"AndFileName : %@", fileName);
                  MFURLSessionUpload *sessionUpload = [[MFURLSessionUpload alloc]initWithURL:[NSURL URLWithString:urlString] option:sendFileParam WithData:data AndFileName:fileName];
                  sessionUpload.delegate = self;
                  [sessionUpload start];
               }
               
            } else if(self.imageArray.count == uploadCnt){
               NSLog(@"self.imageArray.count == uploadCnt");
               uploadCnt=0;
               self.tmpSendingArr = [[NSMutableArray alloc]init];
            }
            
            if ([dictionary objectForKey:@"FILE_URL"]==nil) {
               NSLog(@"error");
            } else{
               //[SVProgressHUD dismiss];
            }
            
         } @catch (NSException *exception) {
            //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
         }
         
      } else {
         //데이터,와이파이 둘 다 꺼져있을경우
         NSLog(@"인터넷 연결이 오프라인으로 나타납니다.");
      }
   }
}

- (void)returnResponse:(NSURLResponse *)response WithError:(NSString *)error{
   NSLog(@"%s, %@", __func__, error);
   
   /*
    //실패테이블에 저장
    tmpMissedCnt++;
    NSUInteger msgDataCnt = self.msgData.chatArray.count;
    int count = missedCnt + tmpMissedCnt;
    NSString *dvcID = [MFUtil getUUID];
    
    NSString *roomNo = [self.firstAddMsg objectForKey:@"ROOM_NO"];
    NSString *contentType = [self.firstAddMsg objectForKey:@"CONTENT_TY"];
    NSString *content = [NSString urlDecodeString:[self.firstAddMsg objectForKey:@"CONTENT"]];
    
    NSIndexPath *rowNo = [NSIndexPath indexPathForItem:(msgDataCnt-count) inSection:0];
    self.editInfoDic = [NSMutableDictionary dictionary];
    [self.editInfoDic setObject:@"FAILED" forKey:@"TYPE"];
    [self.editInfoDic setObject:[NSNumber numberWithInteger:tmpMsgIdx] forKey:@"TMP_NO"];
    [self.editInfoDic setObject:[NSNumber numberWithInteger:rowNo.row] forKey:@"TMP_IDX"];
    [self.editInfoDic setObject:dvcID forKey:@"DEVICE_ID"];
    [self.editInfoDic setObject:@"" forKey:@"LOCAL_CONTENT"];
    
    NSError *error2;
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:self.editInfoDic options:0 error:&error2];
    NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
    
    [self.firstAddMsg setObject:jsonString forKey:@"ADIT_INFO"];
    
    NSString *sqlString = [NSString stringWithFormat:@"INSERT INTO MISSED_CHATS(room_no, content_ty, content, file_nm, adit_info) VALUES(%@, '%@', '%@', '', '%@');", roomNo, contentType, content, jsonString];
    [self crudStatement:self.DBPath :sqlString];
    
    NSString *sqlString2 = @"SELECT * FROM MISSED_CHATS ORDER BY CHAT_NO DESC LIMIT 1;";
    NSMutableArray *selectArr = [self.dbHelper selectQuery:sqlString2];
    [self.firstAddMsg setObject:[[selectArr objectAtIndex:0]objectForKey:@"CHAT_NO"] forKey:@"CHAT_NO"];
    
    [self.msgData.chatArray removeObjectAtIndex:rowNo.row];
    [self.msgData.chatArray insertObject:self.firstAddMsg atIndex:self.msgData.chatArray.count];
    
    [self.tableView reloadData];
    */
}


#pragma mark - TableView Delegate
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
   return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
   return self.msgData.chatArray.count;
}

/*
 - (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
 {
 static ChatSendViewCell *sendCell = nil;
 static ChatReceiveViewCell *recvCell = nil;
 static SystemLabelViewCell *sysCell = nil;
 
 static ChatInviteSendCell *inviteSendCell = nil;
 static ChatInviteReceiveCell *inviteRecvCell = nil;
 
 static LongChatSendViewCell *longSendCell = nil;
 static LongChatReceiveViewCell *longRecvCell = nil;
 
 if(self.msgData.chatArray!=nil){
 NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
 NSString *userNo = [msgDict objectForKey:@"USER_NO"];
 NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
 //NSString *content = [NSString urlDecodeString:[msgDict objectForKey:@"CONTENT"]];
 //NSString *decodeContent = [NSString urlDecodeString:content];
 
 static dispatch_once_t onceToken;
 
 dispatch_once(&onceToken, ^{
 //sendCell = (ChatSendViewCell*)[self.tableView dequeueReusableCellWithIdentifier:@"ChatSendViewCell"];
 sendCell = [tableView dequeueReusableCellWithIdentifier:@"ChatSendViewCell"];
 if (sendCell == nil) {
 NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"ChatSendViewCell" owner:self options:nil];
 
 for (id currentObject in topLevelObject) {
 if ([currentObject isKindOfClass:[ChatSendViewCell class]]) {
 sendCell = (ChatSendViewCell *) currentObject;
 [sendCell setSelectionStyle:UITableViewCellSelectionStyleNone];
 }
 }
 }
 
 //recvCell = (ChatReceiveViewCell*)[self.tableView dequeueReusableCellWithIdentifier:@"ChatReceiveViewCell"];
 recvCell = [tableView dequeueReusableCellWithIdentifier:@"ChatReceiveViewCell"];
 if (recvCell == nil) {
 NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"ChatReceiveViewCell" owner:self options:nil];
 
 for (id currentObject in topLevelObject) {
 if ([currentObject isKindOfClass:[ChatReceiveViewCell class]]) {
 recvCell = (ChatReceiveViewCell *) currentObject;
 [recvCell setSelectionStyle:UITableViewCellSelectionStyleNone];
 }
 }
 }
 
 //sysCell = (SystemLabelViewCell*)[self.tableView dequeueReusableCellWithIdentifier:@"SystemLabelViewCell"];
 sysCell = [tableView dequeueReusableCellWithIdentifier:@"SystemLabelViewCell"];
 if (sysCell == nil) {
 NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"SystemLabelViewCell" owner:self options:nil];
 
 for (id currentObject in topLevelObject) {
 if ([currentObject isKindOfClass:[SystemLabelViewCell class]]) {
 sysCell = (SystemLabelViewCell *) currentObject;
 [sysCell setSelectionStyle:UITableViewCellSelectionStyleNone];
 }
 }
 }
 
 inviteSendCell = [tableView dequeueReusableCellWithIdentifier:@"ChatInviteSendCell"];
 if (inviteSendCell == nil) {
 NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"ChatInviteSendCell" owner:self options:nil];
 
 for (id currentObject in topLevelObject) {
 if ([currentObject isKindOfClass:[ChatInviteSendCell class]]) {
 inviteSendCell = (ChatInviteSendCell *) currentObject;
 [inviteSendCell setSelectionStyle:UITableViewCellSelectionStyleNone];
 }
 }
 }
 
 inviteRecvCell = [tableView dequeueReusableCellWithIdentifier:@"ChatInviteReceiveCell"];
 if (inviteRecvCell == nil) {
 NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"ChatInviteReceiveCell" owner:self options:nil];
 
 for (id currentObject in topLevelObject) {
 if ([currentObject isKindOfClass:[ChatInviteReceiveCell class]]) {
 inviteRecvCell = (ChatInviteReceiveCell *) currentObject;
 [inviteRecvCell setSelectionStyle:UITableViewCellSelectionStyleNone];
 }
 }
 }
 
 longSendCell = [tableView dequeueReusableCellWithIdentifier:@"LongChatSendViewCell"];
 if (longSendCell == nil) {
 NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"LongChatSendViewCell" owner:self options:nil];
 
 for (id currentObject in topLevelObject) {
 if ([currentObject isKindOfClass:[LongChatSendViewCell class]]) {
 longSendCell = (LongChatSendViewCell *) currentObject;
 [longSendCell setSelectionStyle:UITableViewCellSelectionStyleNone];
 }
 }
 }
 
 
 longRecvCell = [tableView dequeueReusableCellWithIdentifier:@"LongChatReceiveViewCell"];
 if (longRecvCell == nil) {
 NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"LongChatReceiveViewCell" owner:self options:nil];
 
 for (id currentObject in topLevelObject) {
 if ([currentObject isKindOfClass:[LongChatReceiveViewCell class]]) {
 longRecvCell = (LongChatReceiveViewCell *) currentObject;
 [longRecvCell setSelectionStyle:UITableViewCellSelectionStyleNone];
 }
 }
 }
 });
 
 if([[NSString stringWithFormat:@"%@", userNo] isEqualToString:[NSString stringWithFormat:@"%@", _myUserNo]]){
 //[self setUpSendCell:sendCell atIndexPath:indexPath]; //느린원인
 //return [self calculateHeightForConfiguredSizingCell:sendCell];
 
 if([contentType isEqualToString:@"INVITE"]){
 return [self tmpSetInviteSendCell:inviteSendCell atIndexPath:indexPath];
 
 } else if([contentType isEqualToString:@"LONG_TEXT"]){
 return [self tmpSetLongSendCell:longSendCell atIndexPath:indexPath];
 //return 530;
 
 } else {
 //return [self tmpSetUpSendCell:sendCell atIndexPath:indexPath];
 return 50;
 }
 
 
 } else {
 if([contentType isEqualToString:@"SYS"]){
 //NSLog(@"#######################");
 [self setUpSysCell:sysCell atIndexPath:indexPath];
 return sysCell.systemLabel.frame.size.height+17;
 
 } else if([contentType isEqualToString:@"INVITE"]){
 return [self tmpSetInviteRecvCell:inviteRecvCell atIndexPath:indexPath];
 
 } else if([contentType isEqualToString:@"LONG_TEXT"]){
 return [self tmpSetLongRecvCell:longRecvCell atIndexPath:indexPath];
 
 } else {
 //[self setUpRecvCell:recvCell atIndexPath:indexPath]; //느린원인
 //return [self calculateHeightForConfiguredSizingCell:recvCell];
 return [self tmpSetUpRecvCell:recvCell atIndexPath:indexPath];
 }
 }
 }
 return 0;
 }
 */

- (CGFloat)calculateHeightForConfiguredSizingCell:(UITableViewCell *)sizingCell {
   [sizingCell layoutIfNeeded];
   
   CGSize size = [sizingCell.contentView systemLayoutSizeFittingSize:UILayoutFittingCompressedSize];
   NSLog(@"size : %f", size.height);
   return size.height;
}


-(void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath{
   
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
   ChatSendViewCell *sendCell = [tableView dequeueReusableCellWithIdentifier:@"ChatSendViewCell"];
   ChatReceiveViewCell *receiveCell = [tableView dequeueReusableCellWithIdentifier:@"ChatReceiveViewCell"];
   SystemLabelViewCell *sysCell = [tableView dequeueReusableCellWithIdentifier:@"SystemLabelViewCell"];
   
   ChatReceiveFileCell *fileCell = [tableView dequeueReusableCellWithIdentifier:@"ChatReceiveFileCell"];
   
   ChatInviteSendCell *inviteSendCell = [tableView dequeueReusableCellWithIdentifier:@"ChatInviteSendCell"];
   ChatInviteReceiveCell *inviteRecvCell = [tableView dequeueReusableCellWithIdentifier:@"ChatInviteReceiveCell"];
   
   LongChatSendViewCell *longSendCell = [tableView dequeueReusableCellWithIdentifier:@"LongChatSendViewCell"];
   LongChatReceiveViewCell *longRecvCell = [tableView dequeueReusableCellWithIdentifier:@"LongChatReceiveViewCell"];
   
   if(self.msgData.chatArray!=nil){
      @try{
         NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
         
         NSString *roomNo = [msgDict objectForKey:@"ROOM_NO"];
         NSString *userNo = [msgDict objectForKey:@"USER_NO"];
         NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
         
         //내가보낸 메시지일 경우
         if([[NSString stringWithFormat:@"%@", userNo] isEqualToString:[NSString stringWithFormat:@"%@", _myUserNo]]){
            if([contentType isEqualToString:@"INVITE"]){
               if (inviteSendCell == nil) {
                  NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"ChatInviteSendCell" owner:self options:nil];
                  
                  for (id currentObject in topLevelObject) {
                     if ([currentObject isKindOfClass:[ChatInviteSendCell class]]) {
                        inviteSendCell = (ChatInviteSendCell *) currentObject;
                        [inviteSendCell setSelectionStyle:UITableViewCellSelectionStyleNone];
                     }
                  }
               }
               
               [self setInviteSendCell:inviteSendCell atIndexPath:indexPath];
               inviteSendCell.backgroundColor = [MFUtil myRGBfromHex:@"E9F3FA"];
               return inviteSendCell;
               
            } else if([contentType isEqualToString:@"LONG_TEXT"]){
               if (longSendCell == nil) {
                  NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"LongChatSendViewCell" owner:self options:nil];
                  
                  for (id currentObject in topLevelObject) {
                     if ([currentObject isKindOfClass:[LongChatSendViewCell class]]) {
                        longSendCell = (LongChatSendViewCell *) currentObject;
                        [longSendCell setSelectionStyle:UITableViewCellSelectionStyleNone];
                     }
                  }
               }
               
               [self setLongSendCell:longSendCell atIndexPath:indexPath];
               longSendCell.backgroundColor = [MFUtil myRGBfromHex:@"E9F3FA"];
               return longSendCell;
               
            } else {
               if (sendCell == nil) {
                  NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"ChatSendViewCell" owner:self options:nil];
                  
                  for (id currentObject in topLevelObject) {
                     if ([currentObject isKindOfClass:[ChatSendViewCell class]]) {
                        sendCell = (ChatSendViewCell *) currentObject;
                        [sendCell setSelectionStyle:UITableViewCellSelectionStyleNone];
                     }
                  }
               }
               
               [self setUpSendCell:sendCell atIndexPath:indexPath];
               sendCell.backgroundColor = [MFUtil myRGBfromHex:@"E9F3FA"];
               return sendCell;
            }
            
         } else {
            if (receiveCell == nil) {
               NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"ChatReceiveViewCell" owner:self options:nil];
               
               for (id currentObject in topLevelObject) {
                  if ([currentObject isKindOfClass:[ChatReceiveViewCell class]]) {
                     receiveCell = (ChatReceiveViewCell *) currentObject;
                     [receiveCell setSelectionStyle:UITableViewCellSelectionStyleNone];
                  }
               }
            }
            
            if (sysCell == nil) {
               NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"SystemLabelViewCell" owner:self options:nil];
               
               for (id currentObject in topLevelObject) {
                  if ([currentObject isKindOfClass:[SystemLabelViewCell class]]) {
                     sysCell = (SystemLabelViewCell *) currentObject;
                     [sysCell setSelectionStyle:UITableViewCellSelectionStyleNone];
                  }
               }
            }
            
            if (fileCell == nil) {
               NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"ChatReceiveFileCell" owner:self options:nil];
               
               for (id currentObject in topLevelObject) {
                  if ([currentObject isKindOfClass:[ChatReceiveFileCell class]]) {
                     fileCell = (ChatReceiveFileCell *) currentObject;
                     [fileCell setSelectionStyle:UITableViewCellSelectionStyleNone];
                  }
               }
            }
            
            if(inviteRecvCell == nil) {
               NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"ChatInviteReceiveCell" owner:self options:nil];
               
               for(id currentObject in topLevelObject) {
                  if([currentObject isKindOfClass:[ChatInviteReceiveCell class]]){
                     inviteRecvCell = (ChatInviteReceiveCell *) currentObject;
                     [inviteRecvCell setSelectionStyle:UITableViewCellSelectionStyleNone];
                  }
               }
            }
            
            if (longRecvCell == nil) {
               NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"LongChatReceiveViewCell" owner:self options:nil];
               
               for (id currentObject in topLevelObject) {
                  if ([currentObject isKindOfClass:[LongChatReceiveViewCell class]]) {
                     longRecvCell = (LongChatReceiveViewCell *) currentObject;
                     [longRecvCell setSelectionStyle:UITableViewCellSelectionStyleNone];
                  }
               }
            }
            
            
            //NSLog(@"roomNo : %@, myRoomNo : %@", roomNo, _roomNo);
            if([[NSString stringWithFormat:@"%@", roomNo] isEqualToString:[NSString stringWithFormat:@"%@", _roomNo]]){
               if([contentType isEqualToString:@"SYS"]){
                  [self setUpSysCell:sysCell atIndexPath:indexPath];
                  sysCell.backgroundColor = [MFUtil myRGBfromHex:@"E9F3FA"];
                  return sysCell;
                  
               } else if([contentType isEqualToString:@"FILE"]){
                  [self setUpFileCell:fileCell atIndexPath:indexPath];
                  fileCell.backgroundColor = [MFUtil myRGBfromHex:@"E9F3FA"];
                  return fileCell;
                  
               } else if([contentType isEqualToString:@"INVITE"]){
                  [self setInviteRecvCell:inviteRecvCell atIndexPath:indexPath];
                  inviteRecvCell.backgroundColor = [MFUtil myRGBfromHex:@"E9F3FA"];
                  return inviteRecvCell;
                  
               } else if([contentType isEqualToString:@"LONG_TEXT"]){
                  [self setLongRecvCell:longRecvCell atIndexPath:indexPath];
                  longRecvCell.backgroundColor = [MFUtil myRGBfromHex:@"E9F3FA"];
                  return longRecvCell;
                  
               } else {
                  [self setUpRecvCell:receiveCell atIndexPath:indexPath];
                  receiveCell.backgroundColor = [MFUtil myRGBfromHex:@"E9F3FA"];
                  return receiveCell;
               }
               
            } else {
               if(![[NSString stringWithFormat:@"%@", userNo] isEqualToString:[NSString stringWithFormat:@"%@", _myUserNo]]){
                  NSLog(@"다른방메시지도착1");
               }
               return nil;
            }
         }
      } @catch (NSException *exception) {
         //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
      }
   }
   return nil;
}

#pragma mark - Setting TableView Cell
- (void)setUpSendCell:(ChatSendViewCell *)sendCell atIndexPath:(NSIndexPath *)indexPath {
   NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
   //NSLog(@"Send MsgDict : %@", msgDict);
   imgMsg = [[UIImage alloc]init];
   
   @try{
      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      
      NSString *decodeContent = [NSString urlDecodeString:content];
      NSString *date = [msgDict objectForKey:@"DATE"];
      NSString *decodeDate = [NSString urlDecodeString:date];
      //NSString *pushType = [msgDict objectForKey:@"TYPE"];
      NSString *fileThumb = [msgDict objectForKey:@"FILE_THUMB"];
      NSString *decodeFileThumb = [NSString urlDecodeString:fileThumb];
      NSString *aditInfo = [msgDict objectForKey:@"ADIT_INFO"];
      //NSString *fileName = [msgDict objectForKey:@"FILE_NM"];
      NSString *unReadCount = [msgDict objectForKey:@"UNREAD_COUNT"];
      
      NSData *jsonData = [aditInfo dataUsingEncoding:NSUTF8StringEncoding];
      NSError *e;
      NSDictionary *aditDic = [NSJSONSerialization JSONObjectWithData:jsonData options:0 error:&e];
      //NSLog(@"aditDic : %@", aditDic);
      
      NSString *localImgPath = @"";
      if([aditDic objectForKey:@"LOCAL_CONTENT"] !=nil) {
         localImgPath = [aditDic objectForKey:@"LOCAL_CONTENT"];
      }
      NSString *sendType = [aditDic objectForKey:@"TYPE"];
      
      NSString *tmpPath = NSTemporaryDirectory();
      
      //이미지 데이터일 경우
      if([contentType isEqualToString:@"IMG"]){
         NSMutableString *contentStr = nil;
         
         if([content isEqualToString:@""]){
            //실패한데이터
            contentStr = [[NSMutableString alloc]initWithString:localImgPath];
            //NSLog(@"실패한데이터 contentStr : %@", contentStr);
         } else if(![content isEqualToString:@""] && decodeFileThumb == nil){
            //불러온데이터
            contentStr = [[NSMutableString alloc]initWithString:localImgPath];
            //NSLog(@"불러온데이터 contentStr : %@", contentStr);
         } else {
            //전송한데이터
            contentStr = [[NSMutableString alloc]initWithString:decodeContent];
            //NSLog(@"전송한데이터 contentStr : %@", contentStr);
         }
         
         NSRange range = [contentStr rangeOfString:@"/" options:NSBackwardsSearch];
         NSMutableString *localStr = [[NSMutableString alloc]initWithString:contentStr];
         
         if(![content isEqualToString:@""] && decodeFileThumb != nil){
            [localStr insertString:@"/thumb" atIndex:range.location];
         }
         
         @try {
            if([content isEqualToString:@""]){
               NSString *thumbfileName = [contentStr substringFromIndex:range.location+1];
               NSString *thumbStr2 = [tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"mThumb_%@",thumbfileName]];
               //NSLog(@"실패,사진촬영 thumbStr2 : %@", thumbStr2);
               
               NSData *data = [NSData dataWithContentsOfFile:thumbStr2];
               UIImage *image = [UIImage imageWithData:data];
               //NSLog(@"image : %@", image);
               
               //큰이미지 사이즈조절
               if(image.size.height > image.size.width*2) {
                  UIImage *image2 = [self imageByScalingAndCroppingForSize:CGSizeMake(180,300) : image];
                  image = [self getScaledImage:image2 scaledToMaxWidth:180 maxHeight:300];
               } else {
                  image = [self getScaledImage:image scaledToMaxWidth:180.0f];
               }
               
               //실패이미지를 위해 이미지 저장
               NSData *imageThumbData = UIImagePNGRepresentation(image);
               [imageThumbData writeToFile:thumbStr2 atomically:YES];
               
               imgMsg = image;
               
            } else {
               NSString *fileName = [contentStr substringFromIndex:range.location+1];
               
               //썸네일이미지
               NSString *imagePath = [tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"mThumb_%@",fileName]];
               //NSString *imagePath = [savePath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",fileName]];
               //NSLog(@"불러온데이터 imagePath : %@", imagePath);
               
               NSData *data = [NSData dataWithContentsOfFile:imagePath];
               UIImage *image = [UIImage imageWithData:data];
               
               imgMsg = image;
            }
         } @catch (NSException *exception) {
            NSLog(@"setUpSendCell exception : %@", exception);
         }
      }
      
      NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
      [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSDate *nsDate = [dateFormat dateFromString:decodeDate];
      
      NSDateFormatter *dateFormat2 = [[NSDateFormatter alloc] init];
      [dateFormat2 setDateFormat:@"yyyy년 MMMM d일 eeee"];
      NSString *dateStr = [dateFormat2 stringFromDate:nsDate];
      
      NSDateFormatter *dateFormat3 = [[NSDateFormatter alloc] init];
      [dateFormat3 setDateFormat:@"a hh:mm"];
      NSString *timeStr = [dateFormat3 stringFromDate:nsDate];
      NSString *decodeTime = [NSString urlDecodeString:timeStr];
      
      NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
      
      UIImage *bubble = [[UIImage imageNamed:@"bubble.png"] stretchableImageWithLeftCapWidth:21 topCapHeight:14];
      //UIColor *color = [UIColor colorWithHue:210.0f / 360.0f saturation:0.94f brightness:1.0f alpha:1.0f];
      UIColor *color = [MFUtil myRGBfromHex:@"B7E6F6"];
      
      sendCell.bubbleImage.image = [bubble imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];
      [sendCell.bubbleImage setTintColor:color];
      
      sendCell.timeLabel.text = decodeTime;
      
      [sendCell.msgLabel setUserInteractionEnabled:YES];
      
      //NSLog(@"unReadCount : %@", unReadCount);
      if(![[NSString stringWithFormat:@"%@",unReadCount] isEqualToString:@"0"] && unReadCount!=nil){
         sendCell.readCntLabel.hidden = NO;
         sendCell.readCntLabel.text = [NSString stringWithFormat:@"%@", unReadCount];
      } else {
         sendCell.readCntLabel.hidden = YES;
      }
      
      //NSLog(@"#sendType# : %@", sendType);
      
      if([sendType isEqualToString:@"SENDING"]){
         sendCell.timeLabel.hidden = YES;
         sendCell.failButton.hidden = YES;
         [sendCell.indicator startAnimating];
         
      } else if([sendType isEqualToString:@"SUCCEED"]){
         sendCell.timeLabel.hidden = NO;
         sendCell.failButton.hidden = YES;
         [sendCell.indicator setHidesWhenStopped:YES];
         [sendCell.indicator stopAnimating];
         
      } else if([sendType isEqualToString:@"FAILED"]){
         sendCell.timeLabel.hidden = YES;
         sendCell.failButton.hidden = NO;
         [sendCell.indicator setHidesWhenStopped:YES];
         [sendCell.indicator stopAnimating];
         
      } else {
         NSLog(@"unknown sendType : %@", sendType);
         //DATE
         sendCell.timeLabel.hidden = YES;
         sendCell.failButton.hidden = YES;
         [sendCell.indicator setHidesWhenStopped:YES];
         [sendCell.indicator stopAnimating];
      }
      
      if (indexPath.item == 0) {
         sendCell.dateLabel.text = dateStr;
         sendCell.dateLabel.hidden = NO;
         sendCell.dateLabelConstraint.constant=25;
         
         if([contentType isEqualToString:@"TEXT"]){
            sendCell.imgMessage.image = nil;
            sendCell.msgLabel.hidden = NO;
            sendCell.msgLabel.text = decodeContent;
            
            //채팅내용 검색결과
            if(self.searchText.length>0){
               if([decodeContent rangeOfString:[NSString stringWithFormat:@"%@", self.searchText]].location != NSNotFound){
                  sendCell.msgLabel.attributedText = [self textGetRanges:decodeContent keyword:self.searchText];
               }
            }
            
            sendCell.bubbleImage.hidden = NO;
            sendCell.imgMessage.hidden = YES;
            
            NSDictionary *attributes = @{NSFontAttributeName: [sendCell.msgLabel font]};
            CGSize textSize = [[sendCell.msgLabel text] sizeWithAttributes:attributes];
            CGFloat strikeWidth = textSize.width;
            
            if(strikeWidth < 23.0f){
               sendCell.msgContentWidth.constant = 30;
               sendCell.msgLabel.textAlignment = NSTextAlignmentCenter;
            } else if(strikeWidth >= self.tableView.frame.size.width - 160){
               sendCell.msgContentWidth.constant = self.tableView.frame.size.width - 160;
               sendCell.msgLabel.textAlignment = NSTextAlignmentLeft;
            } else {
               if(strikeWidth+15 >= self.tableView.frame.size.width - 160) sendCell.msgContentWidth.constant = self.tableView.frame.size.width - 160;
               else sendCell.msgContentWidth.constant = strikeWidth+10;
               
               sendCell.msgLabel.textAlignment = NSTextAlignmentLeft;
            }
            
         } else if ([contentType isEqualToString:@"IMG"]) {
            sendCell.imgMessage.image = nil;
            sendCell.msgContentWidth.constant = 170; //self.tableView.frame.size.width - 300;
            
            if([decodeContent rangeOfString:@"https://"].location != NSNotFound || [decodeContent rangeOfString:@"http://"].location != NSNotFound){
               sendCell.imgMessage.hidden = NO;
               
               sendCell.bubbleImage.hidden = YES;
               sendCell.msgLabel.hidden = YES;
               
               sendCell.imgMessage.image = imgMsg;
               sendCell.imgMessage.tag = indexPath.row;
               
            } else{
               //전송실패 IMG메시지
               NSString *thumbFilePath = [tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"mThumb_%@",[localImgPath lastPathComponent]]];
               
               if(aditInfo != nil){
                  NSData *data = [NSData dataWithContentsOfFile:thumbFilePath];
                  UIImage *image = [UIImage imageWithData:data];
                  //NSLog(@"이미지3 : %@", image);
                  
                  sendCell.imgMessage.image = image;
                  sendCell.imgMessage.hidden = NO;
                  sendCell.bubbleImage.hidden = YES;
                  sendCell.msgLabel.hidden = YES;
               }
            }
         } else {
            
         }
      }
      
      if (indexPath.item > 0) {
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         
         if([contentType isEqualToString:@"TEXT"]){
            sendCell.imgMessage.image = nil;
            sendCell.msgLabel.hidden = NO;
            
            sendCell.msgLabel.text = decodeContent;
            
            sendCell.bubbleImage.hidden = NO;
            sendCell.imgMessage.hidden = YES;
            
            //채팅내용 검색결과
            if(self.searchText.length>0){
               if([decodeContent rangeOfString:[NSString stringWithFormat:@"%@", self.searchText]].location != NSNotFound){
                  sendCell.msgLabel.attributedText = [self textGetRanges:decodeContent keyword:self.searchText];
               }
            }
            
            NSDictionary *attributes = @{NSFontAttributeName: [sendCell.msgLabel font]};
            CGSize textSize = [[sendCell.msgLabel text] sizeWithAttributes:attributes];
            CGFloat strikeWidth = textSize.width;
            
            if(strikeWidth < 23.0f){
               sendCell.msgContentWidth.constant = 30;
               sendCell.msgLabel.textAlignment = NSTextAlignmentCenter;
            } else if(strikeWidth >= self.tableView.frame.size.width - 160){
               sendCell.msgContentWidth.constant = self.tableView.frame.size.width - 160;
               sendCell.msgLabel.textAlignment = NSTextAlignmentLeft;
            } else {
               if(strikeWidth+15 >= self.tableView.frame.size.width - 160) sendCell.msgContentWidth.constant = self.tableView.frame.size.width - 160;
               else sendCell.msgContentWidth.constant = strikeWidth+10;
               
               sendCell.msgLabel.textAlignment = NSTextAlignmentLeft;
            }
            
            
         } else if ([contentType isEqualToString:@"IMG"]) {
            sendCell.imgMessage.image = nil;
            sendCell.msgContentWidth.constant = 170; //self.tableView.frame.size.width - (self.tableView.frame.size.width - 110);
            
            if([decodeContent rangeOfString:@"https://"].location != NSNotFound || [decodeContent rangeOfString:@"http://"].location != NSNotFound){
               sendCell.imgMessage.hidden = NO;
               sendCell.bubbleImage.hidden = YES;
               sendCell.msgLabel.hidden = YES;
               sendCell.imgMessage.image = imgMsg;
               sendCell.imgMessage.tag = indexPath.row;
               
               //NSLog(@"send image width : %f, height: %f", imgMsg.size.width, imgMsg.size.height);
               
            } else{
               //전송실패 OR 선등록 IMG메시지
               //NSLog(@"indexPath>0 aditInfo : %@", aditInfo);
               
               //                NSRange range = [aditInfo rangeOfString:@"/" options:NSBackwardsSearch];
               //                NSString *thumbPath = [aditInfo substringToIndex:range.location];
               //
               //                NSString *thumbStr = [aditInfo substringFromIndex:range.location+1];
               //                //NSLog(@"thumbStr : %@", thumbStr);
               //                NSMutableString *thumbFileNm = [[NSMutableString alloc]initWithString:thumbStr];
               //                //[thumbFileNm insertString:@"mThumb_" atIndex:0];
               //
               //                NSMutableString *thumbFilePath = [[NSMutableString alloc]initWithString:thumbPath];
               //                [thumbFilePath insertString:[NSString stringWithFormat:@"/mThumb_%@", thumbFileNm] atIndex:range.location];
               //                NSLog(@"전송실패/사진촬영 IMG메시지1 : %@", thumbFilePath);
               
               
               sendCell.imgMessage.image = imgMsg;
               
               if(aditInfo != nil){
                  sendCell.imgMessage.hidden = NO;
                  sendCell.bubbleImage.hidden = YES;
                  sendCell.msgLabel.hidden = YES;
               }
            }
         } else {
            //FILE OR DATE
            //            sendCell.timeLabel.hidden = YES;
            //            sendCell.failButton.hidden = YES;
            //            sendCell.imgMessage.hidden = YES;
            //            sendCell.bubbleImage.hidden = YES;
            //            sendCell.msgContent.hidden = YES;
            //            sendCell.readCntLabel.hidden = YES;
            
            //            sendCell.dateLabel.text = dateStr;
            //            sendCell.dateLabel.hidden = NO;
            //            sendCell.dateLabelConstraint.constant=15;
         }
         
         if (![pDateStr isEqualToString:cDateStr]) {
            //NSLog(@"pd : %@, cd : %@", pDateStr, cDateStr);
            sendCell.dateLabel.text = dateStr;
            sendCell.dateLabel.hidden = NO;
            sendCell.dateLabelConstraint.constant=25;
            
         } else {
            sendCell.dateLabel.hidden = YES;
            sendCell.dateLabelConstraint.constant=5;
         }
      }
      
      UITapGestureRecognizer *gesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleTapGesture:)];
      sendCell.failButton.tag = indexPath.row;
      [sendCell.failButton addGestureRecognizer:gesture];
      
      UITapGestureRecognizer *sendImgGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(chatImgTapGesture:)];
      sendCell.imgMessage.tag = indexPath.row;
      [sendCell.imgMessage setUserInteractionEnabled:YES];
      [sendCell.imgMessage addGestureRecognizer:sendImgGesture];
      
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (float)tmpSetUpSendCell:(ChatSendViewCell *)sendCell atIndexPath:(NSIndexPath *)indexPath {
   float cellHeight=0;
   float imgCellHeight=0;
   //    float dateCellHeight=0;
   
   //sendCell.msgContentView.textContainer.lineBreakMode = NSLineBreakByClipping;
   
   @try{
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *content = [NSString urlDecodeString:[msgDict objectForKey:@"CONTENT"]];
      //        NSString *decodeContent = [NSString urlDecodeString:content];
      NSString *aditInfo = [msgDict objectForKey:@"ADIT_INFO"];
      NSString *fileThumb = [msgDict objectForKey:@"FILE_THUMB"];
      NSString *decodeFileThumb = [NSString urlDecodeString:fileThumb];
      //NSString *fileName = [msgDict objectForKey:@"FILE_NM"];
      NSString *tmpPath = NSTemporaryDirectory();
      
      //NSLog(@"tmpSetupSend content : %@", content);
      
      NSData *jsonData = [aditInfo dataUsingEncoding:NSUTF8StringEncoding];
      NSError *e;
      NSDictionary *aditDic = [NSJSONSerialization JSONObjectWithData:jsonData options:0 error:&e];
      //NSLog(@"aditDic : %@", aditDic);
      
      NSString *localImgPath = @"";
      if([aditDic objectForKey:@"LOCAL_CONTENT"] !=nil) localImgPath = [aditDic objectForKey:@"LOCAL_CONTENT"];
      
      //NSLog(@"sendCell.msgContentView.frame.size.height : %f", sendCell.msgContentView.frame.size.height);
      CGSize maximumSize = CGSizeMake(300, 9999);
      UIFont *textFont = [UIFont fontWithName:@"Helvetica" size:14];
      
      //CGSize textStringSize = [content sizeWithFont:textFont constrainedToSize:maximumSize lineBreakMode:NSLineBreakByWordWrapping];
      NSAttributedString *attributedText = [[NSAttributedString alloc] initWithString:content attributes:@{NSFontAttributeName: textFont}];
      CGRect rect = [attributedText boundingRectWithSize:(CGSize)maximumSize options:NSStringDrawingUsesLineFragmentOrigin context:nil];
      CGSize textStringSize = rect.size;
      
      CGRect textFrame = CGRectMake(0, 0, 300, textStringSize.height);
      sendCell.msgContent.frame = textFrame;
      cellHeight+=textStringSize.height;
      
      NSDictionary *attributes = @{NSFontAttributeName: textFont};
      CGSize textSize = [content sizeWithAttributes:attributes];
      CGFloat strikeWidth = textSize.width;
      //NSLog(@"strikeWidth : %f", strikeWidth);
      
      //cellHeight += sendCell.msgContentView.frame.size.height;
      
      //이미지 데이터일 경우
      if([contentType isEqualToString:@"IMG"]){
         NSMutableString *contentStr = nil;
         
         if([content isEqualToString:@""]){
            //실패한데이터
            contentStr = [[NSMutableString alloc]initWithString:localImgPath];
         } else if(![content isEqualToString:@""] && decodeFileThumb == nil){
            //불러온데이터
            contentStr = [[NSMutableString alloc]initWithString:localImgPath];
         } else {
            //전송한데이터
            contentStr = [[NSMutableString alloc]initWithString:content];
         }
         
         NSRange range = [contentStr rangeOfString:@"/" options:NSBackwardsSearch];
         NSMutableString *localStr = [[NSMutableString alloc]initWithString:contentStr];
         
         //NSLog(@"tmpcontentStr : %@", contentStr);
         
         if(![content isEqualToString:@""] && decodeFileThumb != nil){
            [localStr insertString:@"/thumb" atIndex:range.location];
         }
         
         @try {
            if([content isEqualToString:@""]){
               NSString *thumbfileName = [contentStr substringFromIndex:range.location+1];
               NSString *thumbStr2 = [tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"mThumb_%@",thumbfileName]];
               
               NSData *data = [NSData dataWithContentsOfFile:thumbStr2];
               UIImage *image = [UIImage imageWithData:data];
               
               //큰이미지 사이즈조절
               if(image.size.height > image.size.width*2) {
                  //UIImage *image2 = [self imageByScalingAndCroppingForSize:CGSizeMake(180,300) : image];
                  image = [self getScaledImage:image scaledToMaxWidth:180 maxHeight:300];
               } else {
                  image = [self getScaledImage:image scaledToMaxWidth:180.0f];
               }
               
               imgCellHeight+=image.size.height;
               //NSLog(@"imgCellHeight1 : %f", imgCellHeight);
               
            } else {
               NSString *fileName = [contentStr substringFromIndex:range.location+1];
               
               //썸네일이미지
               NSString *imagePath = [tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"mThumb_%@",fileName]];
               //NSString *imagePath = [savePath stringByAppendingPathComponent:[NSString stringWithFormat:@"thumb_%@",fileName]];
               NSData *data = [NSData dataWithContentsOfFile:imagePath];
               UIImage *image = [UIImage imageWithData:data];
               //NSLog(@"image2 : %@", image);
               
               if(image.size.height > image.size.width*2) {
                  //UIImage *image2 = [self imageByScalingAndCroppingForSize:CGSizeMake(180,300) : image];
                  image = [self getScaledImage:image scaledToMaxWidth:180 maxHeight:300];
               } else {
                  image = [self getScaledImage:image scaledToMaxWidth:180.0f];
               }
               
               imgCellHeight+=image.size.height;
               //NSLog(@"imgCellHeight2 : %f", imgCellHeight);
            }
         } @catch (NSException *exception) {
            NSLog(@"tmpSetUpSendCell exception : %@", exception);
         }
      }
      
      if (indexPath.item == 0) {
         sendCell.dateLabelConstraint.constant=25;
         cellHeight+=15;
         imgCellHeight+=15;
         
         if([contentType isEqualToString:@"TEXT"]){
            sendCell.imgMessage.image = nil;
            
         } else if ([contentType isEqualToString:@"IMG"]) {
            sendCell.imgMessage.image = nil;
            
         }
      }
      
      if (indexPath.item > 0) {
         NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
         [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
         
         NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         
         if([contentType isEqualToString:@"TEXT"]){
            sendCell.imgMessage.image = nil;
            
         } else if ([contentType isEqualToString:@"IMG"]) {
            sendCell.imgMessage.image = nil;
            
         }
         
         if (![pDateStr isEqualToString:cDateStr]) {
            sendCell.dateLabelConstraint.constant=25;
            cellHeight+=15;
            imgCellHeight+=15;
         } else {
            sendCell.dateLabelConstraint.constant=5;
            cellHeight+=5;
            imgCellHeight+=5;
         }
      }
      
      float lineCount = strikeWidth / 169;
      //NSLog(@"lineCount : %f / %@", lineCount, content);
      
      if([contentType isEqualToString:@"TEXT"] || [contentType isEqualToString:@"FILE"]){
         //           if(strikeWidth > sendCell.msgContentWidth.constant){
         //              cellHeight = cellHeight+15;
         //           }
         //
         //           return cellHeight+27;
         
         if(lineCount>1.3) cellHeight += 15;
         return cellHeight+27;
         
      } else {
         return imgCellHeight;
      }
      
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (void)setUpRecvCell:(ChatReceiveViewCell *)receiveCell atIndexPath:(NSIndexPath *)indexPath {
   NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
   //NSLog(@"Recv MsgDict : %@", msgDict);
   
   @try{
      //    NSString *chatNo = [msgDict objectForKey:@"CHAT_NO"];
      //    NSString *roomNo = [msgDict objectForKey:@"ROOM_NO"];
      //    NSString *userNo = [msgDict objectForKey:@"USER_NO"];
      NSString *userName = [msgDict objectForKey:@"USER_NM"];
      NSString *decodeUserNm = [NSString urlDecodeString:userName];
      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      if([content rangeOfString:@"%"].location != NSNotFound){
         content = [content stringByReplacingOccurrencesOfString:@"%" withString:@"%25"];
      }
      if([content rangeOfString:@"&"].location != NSNotFound){
         content = [content stringByReplacingOccurrencesOfString:@"&" withString:@"%26"];
      }
      NSString *decodeContent = [NSString urlDecodeString:content];
      NSString *fileName = [msgDict objectForKey:@"FILE_NM"];
      //NSString *decodeFileName = [NSString urlDecodeString:fileName];
      //NSString *filethumbName = [msgDict objectForKey:@"FILE_THUMB"];
      NSString *date = [msgDict objectForKey:@"DATE"];
      //NSString *decodeDate = [NSString urlDecodeString:date];
      //    NSString *pushType = [msgDict objectForKey:@"TYPE"];
      NSString *profileImg = [NSString urlDecodeString:[msgDict objectForKey:@"USER_IMG"]];
      //NSLog(@"profileImg : %@", profileImg);
      NSString *unReadCount = [msgDict objectForKey:@"UNREAD_COUNT"];
      
      //NSLog(@"decodeContent : %@", decodeContent);
      
      /*
       //프로필이미지가 로컬에 있는지 확인, 없으면 로컬에 저장
       NSString *chkTmpPath = NSTemporaryDirectory();
       NSString *chkFile = [chkTmpPath stringByAppendingPathComponent:[profileImg lastPathComponent]];
       BOOL fileExists = [[NSFileManager defaultManager] fileExistsAtPath:chkFile];
       //NSLog(@"fileExists : %d", fileExists);
       if(!fileExists){
       UIImage *thumbImage = [UIImage imageWithData:[NSData dataWithContentsOfURL:[NSURL URLWithString:[profileImg stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]]]];
       NSData *imageData = UIImagePNGRepresentation(thumbImage);
       NSString *fileName = [profileImg lastPathComponent];
       
       NSString *thumbImgPath =[chkTmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@",fileName]];
       [imageData writeToFile:thumbImgPath atomically:YES];
       //NSLog(@"thumbImgPath : %@", thumbImgPath);
       }*/
      
      NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
      [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSDate *nsDate = [dateFormat dateFromString:date];
      
      NSDateFormatter *dateFormat2 = [[NSDateFormatter alloc] init];
      [dateFormat2 setDateFormat:@"yyyy년 MMMM d일 eeee"];
      NSString *dateStr = [dateFormat2 stringFromDate:nsDate];
      
      NSDateFormatter *dateFormat3 = [[NSDateFormatter alloc] init];
      [dateFormat3 setDateFormat:@"a hh:mm"];
      NSString *timeStr = [dateFormat3 stringFromDate:nsDate];
      NSString *decodeTime = [NSString urlDecodeString:timeStr];
      
      NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
      NSString *tmpPath = NSTemporaryDirectory();
      
      if([contentType isEqualToString:@"IMG"]){
         //NSString *imagePath =[tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@",decodeFileName]];
         
         NSString *imagePath =[tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"mThumb_%@",fileName]];
         //NSLog(@"recv image imagePath : %@", imagePath);
         
         NSData *data = [NSData dataWithContentsOfFile:imagePath];
         //imgRecvMsg = [UIImage imageWithData:data];
         UIImage *image = [UIImage imageWithData:data];
         //NSLog(@"recv img size w : %f, h : %f", image.size.width, image.size.height);
         
         if(image.size.height > image.size.width*2) {
            UIImage *image2 = [self imageByScalingAndCroppingForSize:CGSizeMake(180,300) : image];
            image = [self getScaledImage:image2 scaledToMaxWidth:180 maxHeight:300];
         } else {
            image = [self getScaledImage:image scaledToMaxWidth:180.0f];
         }
         
         //image = [self getScaledImage:image scaledToMaxWidth:180.0f];
         imgRecvMsg = image;
         
         //NSLog(@"recv image : %@", image);
      }
      
      UIImage *bubble = [[UIImage imageNamed:@"bubbleReceive.png"] stretchableImageWithLeftCapWidth:21 topCapHeight:14];
      //UIColor *color = [UIColor colorWithHue:240.0f / 360.0f saturation:0.02f brightness:0.92f alpha:1.0f];
      UIColor *color = [UIColor whiteColor];
      
      receiveCell.rBubbleImage.image = [bubble imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];
      [receiveCell.rBubbleImage setTintColor:color];
      
      receiveCell.rUserName.text = decodeUserNm;
      //NSLog(@"decodeUserNm : %@", decodeUserNm);
      receiveCell.rTimeLabel.text = decodeTime;
      
      //[receiveCell.rMsgContent setUserInteractionEnabled:YES];
      [receiveCell.rMsgLabel setUserInteractionEnabled:YES];
      
      if(![[NSString stringWithFormat:@"%@",unReadCount] isEqualToString:@"0"] && unReadCount!=nil){
         receiveCell.rReadCntLabel.hidden = NO;
         receiveCell.rReadCntLabel.text = [NSString stringWithFormat:@"%@", unReadCount];
      } else {
         receiveCell.rReadCntLabel.hidden = YES;
      }
      
      if(![profileImg isEqualToString:@""]){
         self.dbHelper = [[MFDBHelper alloc]init];
         userImg = [self imageByScalingAndCroppingForSize:CGSizeMake(50, 50) :[self.dbHelper saveThumbImage:@"profile" :profileImg]];
         receiveCell.rAvatarImage.image = userImg;
         
      } else {
         UIImage *defaultImg = [UIImage imageNamed:@"profile_default.png"];
         receiveCell.rAvatarImage.image = defaultImg;
      }
      
      if (indexPath.item == 0) {
         receiveCell.rDateLabel.text = dateStr;
         receiveCell.rDateLabel.hidden = NO;
         receiveCell.rDateLabelConstraint.constant = 25;
         
         if([contentType isEqualToString:@"TEXT"]){
            receiveCell.rImageMessage.image = nil;
            
            //receiveCell.rMsgContent.text = decodeContent;
            receiveCell.rMsgLabel.text = decodeContent;
            
            receiveCell.rSystemLabel.hidden = YES;
            receiveCell.rAvatarImage.hidden = NO;
            receiveCell.rUserName.hidden = NO;
            //receiveCell.rMsgContent.hidden = NO;
            receiveCell.rMsgLabel.hidden = NO;
            receiveCell.rBubbleImage.hidden = NO;
            receiveCell.rImageMessage.hidden = YES;
            receiveCell.rTimeLabel.hidden = NO;
            receiveCell.rFileIcon.hidden = YES;
            
            //            receiveCell.rDateLabel.hidden = YES;
            //            receiveCell.rDateLabelConstraint.constant = 5;
            
            //채팅내용 검색결과
            if(self.searchText.length>0){
               if([decodeContent rangeOfString:[NSString stringWithFormat:@"%@", self.searchText]].location != NSNotFound){
                  //receiveCell.rMsgContent.attributedText = [self textGetRanges:decodeContent keyword:self.searchText];
                  receiveCell.rMsgLabel.attributedText = [self textGetRanges:decodeContent keyword:self.searchText];
               }
            }
            
            //                NSDictionary *attributes = @{NSFontAttributeName: [receiveCell.rMsgContent font]};
            //                CGSize textSize = [[receiveCell.rMsgContent text] sizeWithAttributes:attributes];
            NSDictionary *attributes = @{NSFontAttributeName: [receiveCell.rMsgLabel font]};
            CGSize textSize = [[receiveCell.rMsgLabel text] sizeWithAttributes:attributes];
            CGFloat strikeWidth = textSize.width;
            
            if(strikeWidth < 23.0f){
               receiveCell.rMsgContentWidth.constant = 40;
               receiveCell.rMsgLabel.textAlignment = NSTextAlignmentCenter;
            } else if(strikeWidth >= self.tableView.frame.size.width - 160){
               receiveCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 160;
               receiveCell.rMsgLabel.textAlignment = NSTextAlignmentLeft;
            } else {
               if(strikeWidth+15 >= self.tableView.frame.size.width - 160) receiveCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 160;
               else receiveCell.rMsgContentWidth.constant = strikeWidth+15;
               receiveCell.rMsgLabel.textAlignment = NSTextAlignmentLeft;
            }
            
         } else if ([contentType isEqualToString:@"IMG"]) {
            receiveCell.rImageMessage.image = nil;
            receiveCell.rMsgContentWidth.constant = 170; //self.tableView.frame.size.width - 200;
            
            receiveCell.rImageMessage.image = imgRecvMsg;
            receiveCell.rImageMessage.hidden = NO;
            
            receiveCell.rSystemLabel.hidden = YES;
            receiveCell.rAvatarImage.hidden = NO;
            receiveCell.rUserName.hidden = NO;
            //receiveCell.rMsgContent.hidden = YES;
            receiveCell.rMsgLabel.hidden = YES;
            receiveCell.rBubbleImage.hidden = YES;
            receiveCell.rTimeLabel.hidden = NO;
            receiveCell.rFileIcon.hidden = YES;
            
            //            receiveCell.rDateLabel.hidden = YES;
            //            receiveCell.rDateLabelConstraint.constant = 5;
            
            receiveCell.rImageMessage.tag = indexPath.row;
            
         } else if ([contentType isEqualToString:@"FILE"]){
            //file
            //NSString *file = [decodeContent2 lastPathComponent];
            NSString *file = [decodeContent lastPathComponent];
            
            //                receiveCell.rMsgContent.bounds = CGRectMake(receiveCell.rBubbleImage.frame.origin.x, receiveCell.rMsgContent.frame.origin.y, receiveCell.rMsgContent.frame.size.width, receiveCell.rMsgContent.frame.size.height);
            receiveCell.rMsgLabel.bounds = CGRectMake(receiveCell.rBubbleImage.frame.origin.x, receiveCell.rMsgLabel.frame.origin.y, receiveCell.rMsgLabel.frame.size.width, receiveCell.rMsgLabel.frame.size.height);
            
            receiveCell.rImageMessage.image = nil;
            //receiveCell.rMsgContent.text = file;
            receiveCell.rMsgLabel.text = file;
            
            receiveCell.rSystemLabel.hidden = YES;
            receiveCell.rAvatarImage.hidden = NO;
            receiveCell.rUserName.hidden = NO;
            //receiveCell.rMsgContent.hidden = NO;
            receiveCell.rMsgLabel.hidden = NO;
            receiveCell.rBubbleImage.hidden = NO;
            receiveCell.rImageMessage.hidden = YES;
            receiveCell.rTimeLabel.hidden = NO;
            receiveCell.rFileIcon.hidden = NO;
            
            receiveCell.rFileIcon.backgroundColor = [UIColor orangeColor];
            
            //                NSDictionary *attributes = @{NSFontAttributeName: [receiveCell.rMsgContent font]};
            //                CGSize textSize = [[receiveCell.rMsgContent text] sizeWithAttributes:attributes];
            NSDictionary *attributes = @{NSFontAttributeName: [receiveCell.rMsgLabel font]};
            CGSize textSize = [[receiveCell.rMsgLabel text] sizeWithAttributes:attributes];
            CGFloat strikeWidth = textSize.width;
            
            if(strikeWidth < 23.0f){
               receiveCell.rMsgContentWidth.constant = 40;
               receiveCell.rMsgLabel.textAlignment = NSTextAlignmentCenter;
            } else if(strikeWidth >= self.tableView.frame.size.width - 160){
               receiveCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 160;
               receiveCell.rMsgLabel.textAlignment = NSTextAlignmentLeft;
            } else {
               if(strikeWidth+15 >= self.tableView.frame.size.width - 160) receiveCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 160;
               else receiveCell.rMsgContentWidth.constant = strikeWidth+15;
               receiveCell.rMsgLabel.textAlignment = NSTextAlignmentLeft;
            }
            
            
            UITapGestureRecognizer *fileTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapFileOnTable:)];
            //                receiveCell.rMsgContent.tag = indexPath.row;
            //                [receiveCell.rMsgContent setUserInteractionEnabled:YES];
            //                [receiveCell.rMsgContent addGestureRecognizer:fileTap];
            receiveCell.rMsgLabel.tag = indexPath.row;
            [receiveCell.rMsgLabel setUserInteractionEnabled:YES];
            [receiveCell.rMsgLabel addGestureRecognizer:fileTap];
            
         } else if ([contentType isEqualToString:@"INVITE"]){
            
         } else {
            //DATE
            //            receiveCell.rSystemLabel.hidden = YES;
            //            receiveCell.rAvatarImage.hidden = YES;
            //            receiveCell.rUserName.hidden = YES;
            //            receiveCell.rMsgContent.hidden = YES;
            //            receiveCell.rBubbleImage.hidden = YES;
            //            receiveCell.rImageMessage.hidden = YES;
            //            receiveCell.rTimeLabel.hidden = YES;
            //            receiveCell.rFileIcon.hidden = YES;
            //
            //            receiveCell.rDateLabel.text = dateStr;
            //            receiveCell.rDateLabel.hidden = NO;
            //            receiveCell.rDateLabelConstraint.constant = 15;
         }
      }
      
      if (indexPath.item  > 0) {
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         //NSLog(@"pd : %@, cd : %@", pDateStr, cDateStr);
         
         if([contentType isEqualToString:@"TEXT"]){
            receiveCell.rImageMessage.image = nil;
            
            //                receiveCell.rMsgContent.text = decodeContent;
            receiveCell.rMsgLabel.text = decodeContent;
            
            receiveCell.rSystemLabel.hidden = YES;
            receiveCell.rAvatarImage.hidden = NO;
            receiveCell.rUserName.hidden = NO;
            //receiveCell.rMsgContent.hidden = NO;
            receiveCell.rMsgLabel.hidden = NO;
            receiveCell.rBubbleImage.hidden = NO;
            receiveCell.rImageMessage.hidden = YES;
            receiveCell.rTimeLabel.hidden = NO;
            receiveCell.rFileIcon.hidden = YES;
            
            
            //채팅내용 검색결과
            if(self.searchText.length>0){
               if([decodeContent rangeOfString:[NSString stringWithFormat:@"%@", self.searchText]].location != NSNotFound){
                  //receiveCell.rMsgContent.attributedText = [self textGetRanges:decodeContent keyword:self.searchText];
                  receiveCell.rMsgLabel.attributedText = [self textGetRanges:decodeContent keyword:self.searchText];
               }
            }
            
            //                NSDictionary *attributes = @{NSFontAttributeName: [receiveCell.rMsgContent font]};
            //                CGSize textSize = [[receiveCell.rMsgContent text] sizeWithAttributes:attributes];
            NSDictionary *attributes = @{NSFontAttributeName: [receiveCell.rMsgLabel font]};
            CGSize textSize = [[receiveCell.rMsgLabel text] sizeWithAttributes:attributes];
            CGFloat strikeWidth = textSize.width;
            
            if(strikeWidth < 23.0f){
               receiveCell.rMsgContentWidth.constant = 40;
               receiveCell.rMsgLabel.textAlignment = NSTextAlignmentCenter;
            } else if(strikeWidth >= self.tableView.frame.size.width - 160){
               receiveCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 160;
               receiveCell.rMsgLabel.textAlignment = NSTextAlignmentLeft;
            } else {
               if(strikeWidth+15 >= self.tableView.frame.size.width - 160) receiveCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 160;
               else receiveCell.rMsgContentWidth.constant = strikeWidth+15;
               receiveCell.rMsgLabel.textAlignment = NSTextAlignmentLeft;
            }
            
         } else if ([contentType isEqualToString:@"IMG"]) {
            receiveCell.rImageMessage.image = nil;
            //receiveCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 200;
            receiveCell.rMsgContentWidth.constant = 170;
            
            receiveCell.rImageMessage.image = imgRecvMsg;
            receiveCell.rImageMessage.hidden = NO;
            
            receiveCell.rSystemLabel.hidden = YES;
            receiveCell.rAvatarImage.hidden = NO;
            receiveCell.rUserName.hidden = NO;
            //                receiveCell.rMsgContent.hidden = YES;
            receiveCell.rMsgLabel.hidden = YES;
            receiveCell.rBubbleImage.hidden = YES;
            receiveCell.rTimeLabel.hidden = NO;
            receiveCell.rFileIcon.hidden = YES;
            
            //            receiveCell.rDateLabel.hidden = YES;
            //            receiveCell.rDateLabelConstraint.constant = 5;
            
            receiveCell.rImageMessage.tag = indexPath.row;
            
         } else if ([contentType isEqualToString:@"FILE"]) {
            //file
            NSString *file = [decodeContent lastPathComponent];
            
            //                receiveCell.rMsgContent.bounds = CGRectMake(receiveCell.rBubbleImage.frame.origin.x, receiveCell.rMsgContent.frame.origin.y, receiveCell.rMsgContent.frame.size.width, receiveCell.rMsgContent.frame.size.height);
            receiveCell.rMsgLabel.bounds = CGRectMake(receiveCell.rBubbleImage.frame.origin.x, receiveCell.rMsgLabel.frame.origin.y, receiveCell.rMsgLabel.frame.size.width, receiveCell.rMsgLabel.frame.size.height);
            
            receiveCell.rImageMessage.image = nil;
            //receiveCell.rMsgContent.text = file;
            receiveCell.rMsgLabel.text = file;
            
            receiveCell.rSystemLabel.hidden = YES;
            receiveCell.rAvatarImage.hidden = NO;
            receiveCell.rUserName.hidden = NO;
            //                receiveCell.rMsgContent.hidden = NO;
            receiveCell.rMsgLabel.hidden = NO;
            receiveCell.rBubbleImage.hidden = NO;
            receiveCell.rImageMessage.hidden = YES;
            receiveCell.rTimeLabel.hidden = NO;
            
            receiveCell.rFileIcon.hidden = YES;
            
            //            receiveCell.rDateLabel.hidden = YES;
            //            receiveCell.rDateLabelConstraint.constant = 5;
            
            //NSDictionary *attrs = @{ NSForegroundColorAttributeName : [UIColor blackColor], NSFontAttributeName : [UIFont systemFontOfSize:17] };
            NSMutableAttributedString *attributedString = [[NSMutableAttributedString alloc] initWithString:[NSString stringWithFormat:@" %@", file]];
            NSTextAttachment *textAttachment = [[NSTextAttachment alloc] init];
            
            NSRange range = [file rangeOfString:@"." options:NSBackwardsSearch];
            NSString *fileExt = [[file substringFromIndex:range.location+1] lowercaseString];
            
            if([fileExt isEqualToString:@"jpg"]||[fileExt isEqualToString:@"jpeg"]||[fileExt isEqualToString:@"gif"]||[fileExt isEqualToString:@"png"]||[fileExt isEqualToString:@"tiff"]||[fileExt isEqualToString:@"bmp"]||[fileExt isEqualToString:@"heic"]){
               textAttachment.image = [UIImage imageNamed:@"file_img.png"];
               
            } else if([fileExt isEqualToString:@"mp4"]||[fileExt isEqualToString:@"mkv"]||[fileExt isEqualToString:@"wma"]||[fileExt isEqualToString:@"mov"]||[fileExt isEqualToString:@"swf"]||[fileExt isEqualToString:@"mpg"]||[fileExt isEqualToString:@"mpeg"]||[fileExt isEqualToString:@"vob"]||[fileExt isEqualToString:@"asf"]){
               textAttachment.image = [UIImage imageNamed:@"file_movie.png"];
               
            } else if([fileExt isEqualToString:@"mp3"]||[fileExt isEqualToString:@"wav"]||[fileExt isEqualToString:@"ogg"]||[fileExt isEqualToString:@"wma"]||[fileExt isEqualToString:@"m4a"]||[fileExt isEqualToString:@"flac"]){
               textAttachment.image = [UIImage imageNamed:@"file_music.png"];
               
            } else if([fileExt isEqualToString:@"psd"]){
               textAttachment.image = [UIImage imageNamed:@"file_psd.png"];
               
            } else if([fileExt isEqualToString:@"ai"]){
               textAttachment.image = [UIImage imageNamed:@"file_ai.png"];
               
            } else if([fileExt isEqualToString:@"docx"]||[fileExt isEqualToString:@"doc"]){
               textAttachment.image = [UIImage imageNamed:@"file_word.png"];
               
            } else if([fileExt isEqualToString:@"pptx"]||[fileExt isEqualToString:@"ppt"]){
               textAttachment.image = [UIImage imageNamed:@"file_ppt.png"];
               
            } else if([fileExt isEqualToString:@"xls"]||[fileExt isEqualToString:@"xlsx"]){
               textAttachment.image = [UIImage imageNamed:@"file_excel.png"];
               
            } else if([fileExt isEqualToString:@"pdf"]){
               textAttachment.image = [UIImage imageNamed:@"file_pdf.png"];
               
            } else if([fileExt isEqualToString:@"txt"]){
               textAttachment.image = [UIImage imageNamed:@"file_txt.png"];
               
            } else if([fileExt isEqualToString:@"hwp"]){
               textAttachment.image = [UIImage imageNamed:@"file_hwp.png"];
               
            } else if([fileExt isEqualToString:@"zip"]||[fileExt isEqualToString:@"rar"]||[fileExt isEqualToString:@"egg"]||[fileExt isEqualToString:@"alz"]||[fileExt isEqualToString:@"7z"]){
               textAttachment.image = [UIImage imageNamed:@"file_zip.png"];
               
            } else {
               textAttachment.image = [UIImage imageNamed:@"file_document.png"];
            }
            
            CGFloat oldWidth = textAttachment.image.size.width;
            //CGFloat scaleFactor = oldWidth / (receiveCell.rMsgContent.frame.size.width - 145);
            CGFloat scaleFactor = oldWidth / (receiveCell.rMsgLabel.frame.size.width - 145);
            textAttachment.image = [UIImage imageWithCGImage:textAttachment.image.CGImage scale:scaleFactor orientation:UIImageOrientationUp];
            
            NSAttributedString *attrStringWithImage = [NSAttributedString attributedStringWithAttachment:textAttachment];
            [attributedString replaceCharactersInRange:NSMakeRange(0, 0) withAttributedString:attrStringWithImage];
            //                receiveCell.rMsgContent.attributedText = attributedString;
            receiveCell.rMsgLabel.attributedText = attributedString;
            
            //                NSDictionary *attributes = @{NSFontAttributeName: [receiveCell.rMsgContent font]};
            //                CGSize textSize = [[receiveCell.rMsgContent text] sizeWithAttributes:attributes];
            NSDictionary *attributes = @{NSFontAttributeName: [receiveCell.rMsgLabel font]};
            CGSize textSize = [[receiveCell.rMsgLabel text] sizeWithAttributes:attributes];
            CGFloat strikeWidth = textSize.width;
            
            if(strikeWidth < 23.0f){
               receiveCell.rMsgContentWidth.constant = 40;
               receiveCell.rMsgLabel.textAlignment = NSTextAlignmentCenter;
            } else if(strikeWidth >= self.tableView.frame.size.width - 160){
               receiveCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 160;
               receiveCell.rMsgLabel.textAlignment = NSTextAlignmentLeft;
            } else {
               if(strikeWidth+15 >= self.tableView.frame.size.width - 160) receiveCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 160;
               else receiveCell.rMsgContentWidth.constant = strikeWidth+15;
               receiveCell.rMsgLabel.textAlignment = NSTextAlignmentLeft;
            }
            
            UITapGestureRecognizer *fileTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapFileOnTable:)];
            //                receiveCell.rMsgContent.tag = indexPath.row;
            //                [receiveCell.rMsgContent setUserInteractionEnabled:YES];
            //                [receiveCell.rMsgContent addGestureRecognizer:fileTap];
            receiveCell.rMsgLabel.tag = indexPath.row;
            [receiveCell.rMsgLabel setUserInteractionEnabled:YES];
            [receiveCell.rMsgLabel addGestureRecognizer:fileTap];
            
         } else if ([contentType isEqualToString:@"INVITE"]){
            
         } else {
            //DATE
            //            receiveCell.rSystemLabel.hidden = YES;
            //            receiveCell.rAvatarImage.hidden = YES;
            //            receiveCell.rUserName.hidden = YES;
            //            receiveCell.rMsgContent.hidden = YES;
            //            receiveCell.rBubbleImage.hidden = YES;
            //            receiveCell.rImageMessage.hidden = YES;
            //            receiveCell.rTimeLabel.hidden = YES;
            //            receiveCell.rFileIcon.hidden = YES;
            //
            //            receiveCell.rDateLabel.text = dateStr;
            //            receiveCell.rDateLabel.hidden = NO;
            //            receiveCell.rDateLabelConstraint.constant =15;
         }
         
         if (![pDateStr isEqualToString:cDateStr]) {
            receiveCell.rDateLabel.text = dateStr;
            receiveCell.rDateLabel.hidden = NO;
            receiveCell.rDateLabelConstraint.constant = 25;
            
         } else {
            receiveCell.rDateLabel.hidden = YES;
            receiveCell.rDateLabelConstraint.constant = 5;
         }
      }
      
      UITapGestureRecognizer *revcImgGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(chatImgTapGesture:)];
      receiveCell.rImageMessage.tag = indexPath.row;
      [receiveCell.rImageMessage setUserInteractionEnabled:YES];
      [receiveCell.rImageMessage addGestureRecognizer:revcImgGesture];
      
      UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapProfileOnTable:)];
      receiveCell.rAvatarImage.tag = indexPath.row;
      [receiveCell.rAvatarImage setUserInteractionEnabled:YES];
      [receiveCell.rAvatarImage addGestureRecognizer:tap];
      
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (float)tmpSetUpRecvCell:(ChatReceiveViewCell *)receiveCell atIndexPath:(NSIndexPath *)indexPath {
   float cellHeight=0;
   float imgCellHeight=0;
   //    float dateCellHeight=0;
   
   @try{
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
      //NSLog(@"Recv MsgDict : %@", msgDict);
      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      NSString *fileName = [msgDict objectForKey:@"FILE_NM"];
      NSString *tmpPath = NSTemporaryDirectory();
      
      NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
      [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      
      NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
      
      CGSize maximumSize = CGSizeMake(300, 9999);
      UIFont *textFont = [UIFont fontWithName:@"Helvetica" size:14];
      //CGSize textStringSize = [content sizeWithFont:textFont constrainedToSize:maximumSize lineBreakMode:NSLineBreakByWordWrapping];
      NSAttributedString *attributedText = [[NSAttributedString alloc] initWithString:content attributes:@{NSFontAttributeName: textFont}];
      CGRect rect = [attributedText boundingRectWithSize:(CGSize)maximumSize options:NSStringDrawingUsesLineFragmentOrigin context:nil];
      CGSize textStringSize = rect.size;
      
      CGRect textFrame = CGRectMake(0, 0, 300, textStringSize.height);
      receiveCell.rMsgContent.frame = textFrame;
      cellHeight+=textStringSize.height;
      
      NSDictionary *attributes = @{NSFontAttributeName: textFont};
      CGSize textSize = [content sizeWithAttributes:attributes];
      CGFloat strikeWidth = textSize.width;
      
      if([contentType isEqualToString:@"IMG"]){
         NSString *imagePath =[tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"mThumb_%@",fileName]];
         
         NSData *data = [NSData dataWithContentsOfFile:imagePath];
         //imgRecvMsg = [UIImage imageWithData:data];
         UIImage *image = [UIImage imageWithData:data];
         
         if(image.size.height > image.size.width*2) image = [self getScaledImage:image scaledToMaxWidth:180 maxHeight:300];
         else image = [self getScaledImage:image scaledToMaxWidth:180.0f];
         
         imgCellHeight+=image.size.height;
         //NSLog(@"image.size.height : %f", image.size.height);
      }
      
      if (indexPath.item == 0) {
         receiveCell.rDateLabelConstraint.constant = 25;
         cellHeight+=15;
         imgCellHeight+=15;
         
         if([contentType isEqualToString:@"TEXT"]){
            receiveCell.rImageMessage.image = nil;
            
         } else if ([contentType isEqualToString:@"IMG"]) {
            receiveCell.rImageMessage.image = nil;
            
         } else if ([contentType isEqualToString:@"FILE"]){
            //file
            receiveCell.rMsgContent.bounds = CGRectMake(receiveCell.rBubbleImage.frame.origin.x, receiveCell.rMsgContent.frame.origin.y, receiveCell.rMsgContent.frame.size.width, receiveCell.rMsgContent.frame.size.height);
            
            receiveCell.rImageMessage.image = nil;
            
         } else if ([contentType isEqualToString:@"INVITE"]){
            
         } else {
            //date
            receiveCell.rImageMessage.image = nil;
         }
      }
      
      if (indexPath.item  > 0) {
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         
         if([contentType isEqualToString:@"TEXT"]){
            receiveCell.rImageMessage.image = nil;
            
         } else if ([contentType isEqualToString:@"IMG"]) {
            receiveCell.rImageMessage.image = nil;
            receiveCell.rImageMessage.image = imgRecvMsg;
            
         } else if ([contentType isEqualToString:@"FILE"]){
            //file
            receiveCell.rMsgContent.bounds = CGRectMake(receiveCell.rBubbleImage.frame.origin.x, receiveCell.rMsgContent.frame.origin.y, receiveCell.rMsgContent.frame.size.width, receiveCell.rMsgContent.frame.size.height);
            
            receiveCell.rImageMessage.image = nil;
            
         } else {
            //date
            receiveCell.rImageMessage.image = nil;
         }
         
         if (![pDateStr isEqualToString:cDateStr]) {
            receiveCell.rDateLabelConstraint.constant = 25;
            cellHeight+=15;
            imgCellHeight+=15;
         } else {
            receiveCell.rDateLabelConstraint.constant = 5;
            cellHeight+=5;
            imgCellHeight+=15;
         }
      }
      
      float lineCount = strikeWidth / 169;
      
      if([contentType isEqualToString:@"TEXT"] || [contentType isEqualToString:@"FILE"]){
         //            cellHeight = cellHeight+receiveCell.rUserName.frame.size.height;
         //            if(strikeWidth > receiveCell.rMsgContentWidth.constant){
         //                cellHeight = cellHeight+20;
         //            }
         //            return cellHeight+35;
         
         if(lineCount>1.3) cellHeight += 20;
         return cellHeight+50;
         
      } else if([contentType isEqualToString:@"IMG"]){
         //        receiveCell.rDateLabelConstraint.constant = 5;
         //        cellHeight+=5;
         
         return imgCellHeight+receiveCell.rUserName.frame.size.height;
         //return cellHeight+35;
         
      } else if([contentType isEqualToString:@"INVITE"]){
         return cellHeight+15;
         
      } else {
         return 0;
      }
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (void)setUpSysCell:(SystemLabelViewCell *)sysCell atIndexPath:(NSIndexPath *)indexPath {
   NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
   NSLog(@"msgDict : %@", msgDict);
   
   @try{
      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      NSString *decodeContent = [NSString urlDecodeString:content];
      NSString *decodeContent2 = [NSString urlDecodeString:decodeContent];
      
      [sysCell.systemLabel setFrame:CGRectMake(sysCell.systemLabel.frame.origin.x, sysCell.systemLabel.frame.origin.y, sysCell.systemLabel.frame.size.width, 25)];
      
      
      if (indexPath.item == 0) {
         if([contentType isEqualToString:@"SYS"]){
            sysCell.systemLabel.text = decodeContent2;
            [sysCell.systemLabel setTextColor:[UIColor blackColor]];
            [sysCell.systemLabel setFont:[UIFont systemFontOfSize:13]];
            sysCell.systemLabel.numberOfLines = 0;
            [sysCell.systemLabel setLineBreakMode:NSLineBreakByWordWrapping];
            
            CGSize constraintSize = CGSizeMake(sysCell.systemLabel.frame.size.width, 460);
            //CGSize newSize = [decodeContent2 sizeWithFont:[UIFont systemFontOfSize:14] constrainedToSize:constraintSize lineBreakMode:NSLineBreakByWordWrapping];
            NSAttributedString *attributedText = [[NSAttributedString alloc] initWithString:decodeContent2 attributes:@{NSFontAttributeName: [UIFont systemFontOfSize:13]}];
            CGRect rect = [attributedText boundingRectWithSize:(CGSize)constraintSize options:NSStringDrawingUsesLineFragmentOrigin context:nil];
            CGSize newSize = rect.size;
            
            CGFloat labelHeight = MAX(newSize.height, sysCell.systemLabel.frame.size.height);
            [sysCell.systemLabel setFrame:CGRectMake(sysCell.systemLabel.frame.origin.x, sysCell.systemLabel.frame.origin.y, sysCell.systemLabel.frame.size.width, labelHeight)];
            [sysCell.systemLabel setText:decodeContent2];
         }
      }
      
      if (indexPath.item > 0) {
         if([contentType isEqualToString:@"SYS"]){
            sysCell.systemLabel.text = decodeContent2;
            [sysCell.systemLabel setTextColor:[UIColor blackColor]];
            
            [sysCell.systemLabel setFont:[UIFont systemFontOfSize:13]];
            sysCell.systemLabel.numberOfLines = 0;
            [sysCell.systemLabel setLineBreakMode:NSLineBreakByWordWrapping];
            
            CGSize constraintSize = CGSizeMake(sysCell.systemLabel.frame.size.width, 460);
            //CGSize newSize = [decodeContent2 sizeWithFont:[UIFont systemFontOfSize:14] constrainedToSize:constraintSize lineBreakMode:NSLineBreakByWordWrapping];
            NSAttributedString *attributedText = [[NSAttributedString alloc] initWithString:decodeContent2 attributes:@{NSFontAttributeName: [UIFont systemFontOfSize:13]}];
            CGRect rect = [attributedText boundingRectWithSize:(CGSize)constraintSize options:NSStringDrawingUsesLineFragmentOrigin context:nil];
            CGSize newSize = rect.size;
            
            CGFloat labelHeight = MAX(newSize.height, sysCell.systemLabel.frame.size.height);
            [sysCell.systemLabel setFrame:CGRectMake(sysCell.systemLabel.frame.origin.x, sysCell.systemLabel.frame.origin.y, sysCell.systemLabel.frame.size.width, labelHeight)];
            [sysCell.systemLabel setText:decodeContent2];
         }
      }
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (void)setUpFileCell:(ChatReceiveFileCell *)fileCell atIndexPath:(NSIndexPath *)indexPath {
   NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
   
   @try{
      NSString *userName = [msgDict objectForKey:@"USER_NM"];
      NSString *decodeUserNm = [NSString urlDecodeString:userName];
      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      if([content rangeOfString:@"%"].location != NSNotFound){
         content = [content stringByReplacingOccurrencesOfString:@"%" withString:@"%25"];
      }
      if([content rangeOfString:@"&"].location != NSNotFound){
         content = [content stringByReplacingOccurrencesOfString:@"&" withString:@"%26"];
      }
      NSString *decodeContent = [NSString urlDecodeString:content];
      NSString *fileName = [msgDict objectForKey:@"FILE_NM"];
      NSString *date = [msgDict objectForKey:@"DATE"];
      NSString *profileImg = [NSString urlDecodeString:[msgDict objectForKey:@"USER_IMG"]];
      NSString *unReadCount = [msgDict objectForKey:@"UNREAD_COUNT"];
      
      NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
      [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSDate *nsDate = [dateFormat dateFromString:date];
      
      NSDateFormatter *dateFormat2 = [[NSDateFormatter alloc] init];
      [dateFormat2 setDateFormat:@"yyyy년 MMMM d일 eeee"];
      NSString *dateStr = [dateFormat2 stringFromDate:nsDate];
      
      NSDateFormatter *dateFormat3 = [[NSDateFormatter alloc] init];
      [dateFormat3 setDateFormat:@"a hh:mm"];
      NSString *timeStr = [dateFormat3 stringFromDate:nsDate];
      NSString *decodeTime = [NSString urlDecodeString:timeStr];
      
      NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
      NSString *tmpPath = NSTemporaryDirectory();
      
      UIImage *bubble = [[UIImage imageNamed:@"bubbleReceive.png"] stretchableImageWithLeftCapWidth:21 topCapHeight:14];
      //UIColor *color = [UIColor colorWithHue:240.0f / 360.0f saturation:0.02f brightness:0.92f alpha:1.0f];
      UIColor *color = [UIColor whiteColor];
      
      fileCell.fBubbleImage.image = [bubble imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];
      [fileCell.fBubbleImage setTintColor:color];
      
      fileCell.fUserName.text = decodeUserNm;
      fileCell.fTimeLabel.text = decodeTime;
      
      if(![[NSString stringWithFormat:@"%@",unReadCount] isEqualToString:@"0"] && unReadCount!=nil){
         fileCell.fReadLabel.hidden = NO;
         fileCell.fReadLabel.text = [NSString stringWithFormat:@"%@", unReadCount];
      } else {
         fileCell.fReadLabel.hidden = YES;
      }
      
      if(![profileImg isEqualToString:@""]){
         self.dbHelper = [[MFDBHelper alloc]init];
         userImg = [self imageByScalingAndCroppingForSize:CGSizeMake(50, 50) :[self.dbHelper saveThumbImage:@"profile" :profileImg]];
         fileCell.fAvatarImage.image = userImg;
         
      } else {
         UIImage *defaultImg = [UIImage imageNamed:@"profile_default.png"];
         fileCell.fAvatarImage.image = defaultImg;
      }
      
      if (indexPath.item == 0) {
         fileCell.fDateLabel.text = dateStr;
         fileCell.fDateLabel.hidden = NO;
         fileCell.fDateLabelConstraint.constant = 25;
         
         if ([contentType isEqualToString:@"FILE"]){
            //file
            NSString *file = [decodeContent lastPathComponent];
            
            fileCell.fMsgLabel.text = file;
            fileCell.fAvatarImage.hidden = NO;
            fileCell.fUserName.hidden = NO;
            fileCell.fMsgLabel.hidden = NO;
            fileCell.fBubbleImage.hidden = NO;
            fileCell.fTimeLabel.hidden = NO;
            fileCell.fFileIcon.hidden = NO;
            
            NSRange range = [file rangeOfString:@"." options:NSBackwardsSearch];
            NSString *fileExt = [[file substringFromIndex:range.location+1] lowercaseString];
            
            if([fileExt isEqualToString:@"jpg"]||[fileExt isEqualToString:@"jpeg"]||[fileExt isEqualToString:@"gif"]||[fileExt isEqualToString:@"png"]||[fileExt isEqualToString:@"tiff"]||[fileExt isEqualToString:@"bmp"]||[fileExt isEqualToString:@"heic"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_img.png"];
               
            } else if([fileExt isEqualToString:@"mp4"]||[fileExt isEqualToString:@"mkv"]||[fileExt isEqualToString:@"wma"]||[fileExt isEqualToString:@"mov"]||[fileExt isEqualToString:@"swf"]||[fileExt isEqualToString:@"mpg"]||[fileExt isEqualToString:@"mpeg"]||[fileExt isEqualToString:@"vob"]||[fileExt isEqualToString:@"asf"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_movie.png"];
               
            } else if([fileExt isEqualToString:@"mp3"]||[fileExt isEqualToString:@"wav"]||[fileExt isEqualToString:@"ogg"]||[fileExt isEqualToString:@"wma"]||[fileExt isEqualToString:@"m4a"]||[fileExt isEqualToString:@"flac"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_music.png"];
               
            } else if([fileExt isEqualToString:@"psd"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_psd.png"];
               
            } else if([fileExt isEqualToString:@"ai"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_ai.png"];
               
            } else if([fileExt isEqualToString:@"docx"]||[fileExt isEqualToString:@"doc"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_word.png"];
               
            } else if([fileExt isEqualToString:@"pptx"]||[fileExt isEqualToString:@"ppt"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_ppt.png"];
               
            } else if([fileExt isEqualToString:@"xls"]||[fileExt isEqualToString:@"xlsx"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_excel.png"];
               
            } else if([fileExt isEqualToString:@"pdf"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_pdf.png"];
               
            } else if([fileExt isEqualToString:@"txt"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_txt.png"];
               
            } else if([fileExt isEqualToString:@"hwp"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_hwp.png"];
               
            } else if([fileExt isEqualToString:@"zip"]||[fileExt isEqualToString:@"rar"]||[fileExt isEqualToString:@"egg"]||[fileExt isEqualToString:@"alz"]||[fileExt isEqualToString:@"7z"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_zip.png"];
               
            } else {
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_document.png"];
            }
            
            NSDictionary *attributes = @{NSFontAttributeName: [fileCell.fMsgLabel font]};
            CGSize textSize = [[fileCell.fMsgLabel text] sizeWithAttributes:attributes];
            CGFloat strikeWidth = textSize.width;
            
            //            if(strikeWidth < 23.0f){
            //               receiveCell.rMsgContentWidth.constant = 40;
            //               receiveCell.rMsgLabel.textAlignment = NSTextAlignmentCenter;
            //            } else if(strikeWidth >= self.tableView.frame.size.width - 160){
            //               receiveCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 160;
            //               receiveCell.rMsgLabel.textAlignment = NSTextAlignmentLeft;
            //            } else {
            //               if(strikeWidth+15 >= self.tableView.frame.size.width - 160) receiveCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 160;
            //               else receiveCell.rMsgContentWidth.constant = strikeWidth+15;
            //               receiveCell.rMsgLabel.textAlignment = NSTextAlignmentLeft;
            //            }
            
            UITapGestureRecognizer *fileTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapFileOnTable:)];
            fileCell.fMsgLabel.tag = indexPath.row;
            [fileCell.fMsgLabel setUserInteractionEnabled:YES];
            [fileCell.fMsgLabel addGestureRecognizer:fileTap];
         }
      }
      
      if (indexPath.item  > 0) {
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         //NSLog(@"pd : %@, cd : %@", pDateStr, cDateStr);
         
         if ([contentType isEqualToString:@"FILE"]) {
            //file
            NSString *file = [decodeContent lastPathComponent];
            
            fileCell.fMsgLabel.text = file;
            fileCell.fAvatarImage.hidden = NO;
            fileCell.fUserName.hidden = NO;
            fileCell.fMsgLabel.hidden = NO;
            fileCell.fBubbleImage.hidden = NO;
            fileCell.fTimeLabel.hidden = NO;
            fileCell.fFileIcon.hidden = NO;
            
            NSRange range = [file rangeOfString:@"." options:NSBackwardsSearch];
            NSString *fileExt = [[file substringFromIndex:range.location+1] lowercaseString];
            
            if([fileExt isEqualToString:@"jpg"]||[fileExt isEqualToString:@"jpeg"]||[fileExt isEqualToString:@"gif"]||[fileExt isEqualToString:@"png"]||[fileExt isEqualToString:@"tiff"]||[fileExt isEqualToString:@"bmp"]||[fileExt isEqualToString:@"heic"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_img.png"];
               
            } else if([fileExt isEqualToString:@"mp4"]||[fileExt isEqualToString:@"mkv"]||[fileExt isEqualToString:@"wma"]||[fileExt isEqualToString:@"mov"]||[fileExt isEqualToString:@"swf"]||[fileExt isEqualToString:@"mpg"]||[fileExt isEqualToString:@"mpeg"]||[fileExt isEqualToString:@"vob"]||[fileExt isEqualToString:@"asf"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_movie.png"];
               
            } else if([fileExt isEqualToString:@"mp3"]||[fileExt isEqualToString:@"wav"]||[fileExt isEqualToString:@"ogg"]||[fileExt isEqualToString:@"wma"]||[fileExt isEqualToString:@"m4a"]||[fileExt isEqualToString:@"flac"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_music.png"];
               
            } else if([fileExt isEqualToString:@"psd"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_psd.png"];
               
            } else if([fileExt isEqualToString:@"ai"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_ai.png"];
               
            } else if([fileExt isEqualToString:@"docx"]||[fileExt isEqualToString:@"doc"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_word.png"];
               
            } else if([fileExt isEqualToString:@"pptx"]||[fileExt isEqualToString:@"ppt"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_ppt.png"];
               
            } else if([fileExt isEqualToString:@"xls"]||[fileExt isEqualToString:@"xlsx"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_excel.png"];
               
            } else if([fileExt isEqualToString:@"pdf"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_pdf.png"];
               
            } else if([fileExt isEqualToString:@"txt"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_txt.png"];
               
            } else if([fileExt isEqualToString:@"hwp"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_hwp.png"];
               
            } else if([fileExt isEqualToString:@"zip"]||[fileExt isEqualToString:@"rar"]||[fileExt isEqualToString:@"egg"]||[fileExt isEqualToString:@"alz"]||[fileExt isEqualToString:@"7z"]){
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_zip.png"];
               
            } else {
               fileCell.fFileIcon.image = [UIImage imageNamed:@"file_document.png"];
            }
            
            NSDictionary *attributes = @{NSFontAttributeName: [fileCell.fMsgLabel font]};
            CGSize textSize = [[fileCell.fMsgLabel text] sizeWithAttributes:attributes];
            CGFloat strikeWidth = textSize.width;
            
            //            if(strikeWidth < 23.0f){
            //               fileCell.rMsgContentWidth.constant = 40;
            //               fileCell.fMsgLabel.textAlignment = NSTextAlignmentCenter;
            //            } else if(strikeWidth >= self.tableView.frame.size.width - 160){
            //               fileCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 160;
            //               fileCell.fMsgLabel.textAlignment = NSTextAlignmentLeft;
            //            } else {
            //               if(strikeWidth+15 >= self.tableView.frame.size.width - 160) fileCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 160;
            //               else fileCell.rMsgContentWidth.constant = strikeWidth+15;
            //               fileCell.fMsgLabel.textAlignment = NSTextAlignmentLeft;
            //            }
            
            UITapGestureRecognizer *fileTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapFileOnTable:)];
            fileCell.fMsgLabel.tag = indexPath.row;
            [fileCell.fMsgLabel setUserInteractionEnabled:YES];
            [fileCell.fMsgLabel addGestureRecognizer:fileTap];
            
         }
         
         if (![pDateStr isEqualToString:cDateStr]) {
            fileCell.fDateLabel.text = dateStr;
            fileCell.fDateLabel.hidden = NO;
            fileCell.fDateLabelConstraint.constant = 25;
            
         } else {
            fileCell.fDateLabel.hidden = YES;
            fileCell.fDateLabelConstraint.constant = 5;
         }
      }
      
      UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapProfileOnTable:)];
      fileCell.fAvatarImage.tag = indexPath.row;
      [fileCell.fAvatarImage setUserInteractionEnabled:YES];
      [fileCell.fAvatarImage addGestureRecognizer:tap];
      
      
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (float)tmpSetInviteSendCell:(ChatInviteSendCell *)inviteSendCell atIndexPath:(NSIndexPath *)indexPath {
   float cellHeight=0;
   float titleLblHeight=0;
   float contentLblHeight=0;
   NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
   
   @try{
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      //NSString *date = [msgDict objectForKey:@"DATE"];
      
      NSData *jsonData = [content dataUsingEncoding:NSUTF8StringEncoding];
      NSError *error;
      NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
      //NSLog(@"tmpdict : %@", dict);
      
      NSString *snsNm = [dict objectForKey:@"SNS_NM"];
      NSString *snsDesc = [dict objectForKey:@"SNS_DESC"];
      //NSString *snsCoverImage = [dict objectForKey:@"SNS_COVER_IMG"];
      
      //        NSLog(@"snsNm : %@", snsNm);
      //        NSLog(@"snsDesc : %@", snsDesc);
      
      [inviteSendCell.titleLabel setNumberOfLines:0];
      
      [inviteSendCell.contentLabel setNumberOfLines:3];
      [inviteSendCell.contentLabel setLineBreakMode:NSLineBreakByTruncatingTail];
      
      CGSize constraintSize = CGSizeMake(LABEL_DEFAUlT_WIDTH, LABEL_MAX_HEIGHT);
      
      NSAttributedString *attributedText = [[NSAttributedString alloc] initWithString:[NSString stringWithFormat:NSLocalizedString(@"invite_title", @"invite_title"), snsNm] attributes:@{NSFontAttributeName: [UIFont systemFontOfSize:15.0f weight:UIFontWeightMedium]}];
      CGRect rect = [attributedText boundingRectWithSize:(CGSize)constraintSize options:NSStringDrawingUsesLineFragmentOrigin context:nil];
      CGSize newSize = rect.size;
      titleLblHeight = MAX(newSize.height, 18);
      
      NSAttributedString *attributedText2 = [[NSAttributedString alloc] initWithString:snsDesc attributes:@{NSFontAttributeName: [UIFont systemFontOfSize:13.0f]}];
      CGRect rect2 = [attributedText2 boundingRectWithSize:(CGSize)constraintSize options:NSStringDrawingUsesLineFragmentOrigin context:nil];
      CGSize newSize2 = rect2.size;
      contentLblHeight = MAX(newSize2.height, 16);
      
      
      if([snsDesc isEqualToString:@""]){
         contentLblHeight = 2;
      }
      else {
         contentLblHeight = inviteSendCell.contentLabel.frame.size.height*3;
      }
      
      //NSLog(@"titleLblHeight : %f, contentLblHeight : %f", titleLblHeight, contentLblHeight);
      
      if (indexPath.item == 0){
         inviteSendCell.inviteSendDateConstraint.constant=25;
         cellHeight = inviteSendCell.imgView.frame.size.height + titleLblHeight + contentLblHeight + inviteSendCell.moreButton.frame.size.height + 35;
         cellHeight+=15;
      }
      
      if (indexPath.item > 0) {
         NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
         [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
         
         NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         
         if (![pDateStr isEqualToString:cDateStr]) {
            inviteSendCell.inviteSendDateConstraint.constant=25;
            cellHeight = inviteSendCell.imgView.frame.size.height + titleLblHeight + contentLblHeight + inviteSendCell.moreButton.frame.size.height + 35;
            cellHeight+=15;
         } else {
            inviteSendCell.inviteSendDateConstraint.constant=5;
            cellHeight = inviteSendCell.imgView.frame.size.height + titleLblHeight + contentLblHeight + inviteSendCell.moreButton.frame.size.height + 35;
            cellHeight+=5;
         }
      }
      
      return cellHeight;
      
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (void)setInviteSendCell:(ChatInviteSendCell *)inviteSendCell atIndexPath:(NSIndexPath *)indexPath {
   @try{
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
      NSLog(@"Send MsgDict : %@", msgDict);
      
      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      //        if([content rangeOfString:@"%"].location != NSNotFound){
      //            content = [content stringByReplacingOccurrencesOfString:@"%" withString:@"%25"];
      //        }
      //        if([content rangeOfString:@"&"].location != NSNotFound){
      //            content = [content stringByReplacingOccurrencesOfString:@"&" withString:@"%26"];
      //        }
      
      NSString *date = [msgDict objectForKey:@"DATE"];
      //NSString *pushType = [msgDict objectForKey:@"TYPE"];
      NSString *fileThumb = [NSString urlDecodeString:[msgDict objectForKey:@"FILE_THUMB"]];
      NSString *aditInfo = [msgDict objectForKey:@"ADIT_INFO"];
      NSString *unReadCount = [msgDict objectForKey:@"UNREAD_COUNT"];
      
      NSData *jsonData = [content dataUsingEncoding:NSUTF8StringEncoding];
      NSError *error;
      NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
      NSLog(@"dict : %@", dict);
      
      NSString *snsNm = [dict objectForKey:@"SNS_NM"];
      NSString *snsDesc = [dict objectForKey:@"SNS_DESC"];
      NSString *snsCoverImage = [dict objectForKey:@"SNS_COVER_IMG"];
      
      NSData *jsonData2 = [aditInfo dataUsingEncoding:NSUTF8StringEncoding];
      NSError *e;
      NSDictionary *aditDic = [NSJSONSerialization JSONObjectWithData:jsonData2 options:0 error:&e];
      //NSLog(@"aditDic : %@", aditDic);
      
      NSString *sendType = [aditDic objectForKey:@"TYPE"];
      
      NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
      [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSDate *nsDate = [dateFormat dateFromString:date];
      
      NSDateFormatter *dateFormat2 = [[NSDateFormatter alloc] init];
      [dateFormat2 setDateFormat:@"yyyy년 MMMM d일 eeee"];
      NSString *dateStr = [dateFormat2 stringFromDate:nsDate];
      
      NSDateFormatter *dateFormat3 = [[NSDateFormatter alloc] init];
      [dateFormat3 setDateFormat:@"a hh:mm"];
      NSString *timeStr = [dateFormat3 stringFromDate:nsDate];
      NSString *decodeTime = [NSString urlDecodeString:timeStr];
      
      NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
      
      UIImage *bubble = [[UIImage imageNamed:@"bubble.png"] stretchableImageWithLeftCapWidth:21 topCapHeight:14];
      //UIColor *color = [UIColor colorWithHue:210.0f / 360.0f saturation:0.94f brightness:1.0f alpha:1.0f];
      UIColor *color = [MFUtil myRGBfromHex:@"B7E6F6"];
      
      inviteSendCell.bubbleImg.image = [bubble imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];
      [inviteSendCell.bubbleImg setTintColor:color];
      
      UITapGestureRecognizer *bubbleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapMoreHandler:)];
      inviteSendCell.bubbleImg.tag = indexPath.row;
      [inviteSendCell.bubbleImg setUserInteractionEnabled:YES];
      [inviteSendCell.bubbleImg addGestureRecognizer:bubbleTap];
      
      inviteSendCell.imgView.layer.cornerRadius = inviteSendCell.imgView.frame.size.width/10;
      inviteSendCell.imgView.clipsToBounds = YES;
      
      /*
       if(![snsCoverImage isEqualToString:@""]&&![snsCoverImage isEqualToString:@"null"]&&snsCoverImage!=nil){
       self.dbHelper = [[MFDBHelper alloc]init];
       UIImage *image = [self.dbHelper saveThumbImage:@"cover" :snsCoverImage];
       if(image!=nil){
       UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(90, 90) :image];
       [imgCache storeImage:postCover forKey:snsCoverImage toDisk:YES];
       }
       
       [imgCache queryDiskCacheForKey:snsCoverImage done:^(UIImage *image, SDImageCacheType cacheType) {
       if(image!=nil){
       UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(185, 105) :image];
       inviteSendCell.imgView.image = postCover;
       } else {
       UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(185, 105) :[UIImage imageNamed:@"board_blue_square.png"]];
       inviteSendCell.imgView.image = postCover;
       }
       }];
       } else {
       UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(185, 105) :[UIImage imageNamed:@"board_blue_square.png"]];
       inviteSendCell.imgView.image = postCover;
       }
       */
      
      if(![snsCoverImage isEqualToString:@""]&&![snsCoverImage isEqualToString:@"null"]&&snsCoverImage!=nil){
         self.dbHelper = [[MFDBHelper alloc]init];
         UIImage *image = [self.dbHelper saveThumbImage:@"cover" :snsCoverImage];
         if(image!=nil){
            UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(185, 105) :image];
            inviteSendCell.imgView.image = postCover;
         } else {
            UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(185, 105) :[UIImage imageNamed:@"board_blue_square.png"]];
            inviteSendCell.imgView.image = postCover;
         }
      } else {
         UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(185, 105) :[UIImage imageNamed:@"board_blue_square.png"]];
         inviteSendCell.imgView.image = postCover;
      }
      
      [inviteSendCell.titleLabel setNumberOfLines:0];
      //[inviteSendCell.titleLabel setLineBreakMode:NSLineBreakByCharWrapping];
      
      [inviteSendCell.contentLabel setNumberOfLines:3];
      [inviteSendCell.contentLabel setLineBreakMode:NSLineBreakByTruncatingTail];
      
      inviteSendCell.titleLabel.text = [NSString stringWithFormat:NSLocalizedString(@"invite_title", @"invite_title"), snsNm];
      inviteSendCell.contentLabel.text = snsDesc;
      
      [inviteSendCell.moreButton setImage:[self getScaledImage:[UIImage imageNamed:@"icon_popup.png"] scaledToMaxWidth:10.0f] forState:UIControlStateNormal];
      [inviteSendCell.moreButton setImageEdgeInsets:UIEdgeInsetsMake(5.0, 0.0, 5.0, 0.0)];
      [inviteSendCell.moreButton setTitleEdgeInsets:UIEdgeInsetsMake(0.0, 5.0, 0.0, 0.0)];
      [inviteSendCell.moreButton setTitleColor:[MFUtil myRGBfromHex:@"1D4696"] forState:UIControlStateNormal];
      [inviteSendCell.moreButton setTitle:@"게시판소개 더보기" forState:UIControlStateNormal];
      inviteSendCell.moreButton.tag = indexPath.row;
      [inviteSendCell.moreButton addTarget:self action:@selector(tapMoreButton:) forControlEvents:UIControlEventTouchUpInside];
      
      inviteSendCell.timeLabel.text = decodeTime;
      
      //NSLog(@"unReadCount : %@", unReadCount);
      if(![[NSString stringWithFormat:@"%@",unReadCount] isEqualToString:@"0"] && unReadCount!=nil){
         inviteSendCell.readLabel.hidden = NO;
         inviteSendCell.readLabel.text = [NSString stringWithFormat:@"%@", unReadCount];
      } else {
         inviteSendCell.readLabel.hidden = YES;
      }
      
      //NSLog(@"#sendType# : %@", sendType);
      
      if([sendType isEqualToString:@"SENDING"]){
         inviteSendCell.timeLabel.hidden = YES;
         inviteSendCell.failButton.hidden = YES;
         [inviteSendCell.indicator startAnimating];
         
      } else if([sendType isEqualToString:@"SUCCEED"]){
         inviteSendCell.timeLabel.hidden = NO;
         inviteSendCell.failButton.hidden = YES;
         [inviteSendCell.indicator setHidesWhenStopped:YES];
         [inviteSendCell.indicator stopAnimating];
         
      } else if([sendType isEqualToString:@"FAILED"]){
         inviteSendCell.timeLabel.hidden = YES;
         inviteSendCell.failButton.hidden = NO;
         [inviteSendCell.indicator setHidesWhenStopped:YES];
         [inviteSendCell.indicator stopAnimating];
         
      } else {
         NSLog(@"unknown sendType : %@", sendType);
         //DATE
         inviteSendCell.timeLabel.hidden = YES;
         inviteSendCell.failButton.hidden = YES;
         [inviteSendCell.indicator setHidesWhenStopped:YES];
         [inviteSendCell.indicator stopAnimating];
      }
      
      if (indexPath.item == 0) {
         inviteSendCell.dateLabel.text = dateStr;
         inviteSendCell.dateLabel.hidden = NO;
         inviteSendCell.inviteSendDateConstraint.constant=25;
      }
      
      if (indexPath.item > 0) {
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         
         
         if (![pDateStr isEqualToString:cDateStr]) {
            //NSLog(@"pd : %@, cd : %@", pDateStr, cDateStr);
            inviteSendCell.dateLabel.text = dateStr;
            inviteSendCell.dateLabel.hidden = NO;
            inviteSendCell.inviteSendDateConstraint.constant=25;
            
         } else {
            inviteSendCell.dateLabel.hidden = YES;
            inviteSendCell.inviteSendDateConstraint.constant=5;
         }
      }
      
   } @catch(NSException *exception){
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (float)tmpSetInviteRecvCell:(ChatInviteReceiveCell *)inviteRecvCell atIndexPath:(NSIndexPath *)indexPath {
   float cellHeight=0;
   float titleLblHeight=0;
   float contentLblHeight=0;
   NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
   
   @try{
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      
      NSString *date = [msgDict objectForKey:@"DATE"];
      NSData *jsonData = [content dataUsingEncoding:NSUTF8StringEncoding];
      NSError *error;
      NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
      //         NSLog(@"tmp recv dict : %@", dict);
      
      NSString *snsNm = [dict objectForKey:@"SNS_NM"];
      NSString *snsDesc = [dict objectForKey:@"SNS_DESC"];
      
      [inviteRecvCell.titleLabel setNumberOfLines:0];
      [inviteRecvCell.contentLabel setNumberOfLines:3];
      
      CGSize constraintSize = CGSizeMake(LABEL_DEFAUlT_WIDTH, LABEL_MAX_HEIGHT);
      
      NSAttributedString *attributedText = [[NSAttributedString alloc] initWithString:[NSString stringWithFormat:NSLocalizedString(@"invite_title", @"invite_title"), snsNm] attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:15.0f weight:UIFontWeightMedium]}];
      CGRect rect = [attributedText boundingRectWithSize:(CGSize)constraintSize options:NSStringDrawingUsesLineFragmentOrigin context:nil];
      CGSize newSize = rect.size;
      titleLblHeight = MAX(newSize.height, 18);
      
      NSAttributedString *attributedText2 = [[NSAttributedString alloc] initWithString:snsDesc attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:13.0f]}];
      CGRect rect2 = [attributedText2 boundingRectWithSize:(CGSize)constraintSize options:NSStringDrawingUsesLineFragmentOrigin context:nil];
      CGSize newSize2 = rect2.size;
      contentLblHeight = MAX(newSize2.height, 16);
      
      if([snsDesc isEqualToString:@""]){
         contentLblHeight = 2;
      } else {
         contentLblHeight = inviteRecvCell.contentLabel.frame.size.height*3;
      }
      //NSLog(@"titleLblHeight : %f, contentLblHeight : %f", titleLblHeight, contentLblHeight);
      
      if (indexPath.item == 0) {
         inviteRecvCell.inviteRecvDateConstraint.constant=25;
         cellHeight = inviteRecvCell.userName.frame.size.height+inviteRecvCell.imgView.frame.size.height + titleLblHeight + contentLblHeight + inviteRecvCell.moreButton.frame.size.height + inviteRecvCell.joinButton.frame.size.height + 50;
         cellHeight+=15;
      }
      
      if (indexPath.item > 0) {
         NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
         [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
         
         NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         
         if (![pDateStr isEqualToString:cDateStr]) {
            inviteRecvCell.inviteRecvDateConstraint.constant=25;
            cellHeight = inviteRecvCell.userName.frame.size.height+inviteRecvCell.imgView.frame.size.height + titleLblHeight + contentLblHeight + inviteRecvCell.moreButton.frame.size.height + inviteRecvCell.joinButton.frame.size.height + 50;
            cellHeight+=15;
         } else {
            inviteRecvCell.inviteRecvDateConstraint.constant=5;
            cellHeight = inviteRecvCell.userName.frame.size.height+inviteRecvCell.imgView.frame.size.height + titleLblHeight + contentLblHeight + inviteRecvCell.moreButton.frame.size.height + inviteRecvCell.joinButton.frame.size.height + 50;
            cellHeight+=5;
         }
      }
      
      return cellHeight;
      
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (void)setInviteRecvCell:(ChatInviteReceiveCell *)inviteRecvCell atIndexPath:(NSIndexPath *)indexPath {
   @try{
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
      
      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      //        if([content rangeOfString:@"%"].location != NSNotFound){
      //            content = [content stringByReplacingOccurrencesOfString:@"%" withString:@"%25"];
      //        }
      //        if([content rangeOfString:@"&"].location != NSNotFound){
      //            content = [content stringByReplacingOccurrencesOfString:@"&" withString:@"%26"];
      //        }
      
      NSString *userName = [NSString urlDecodeString:[msgDict objectForKey:@"USER_NM"]];
      NSString *profileImg = [NSString urlDecodeString:[msgDict objectForKey:@"USER_IMG"]];
      NSString *date = [msgDict objectForKey:@"DATE"];
      //NSString *pushType = [msgDict objectForKey:@"TYPE"];
      NSString *fileThumb = [NSString urlDecodeString:[msgDict objectForKey:@"FILE_THUMB"]];
      NSString *aditInfo = [msgDict objectForKey:@"ADIT_INFO"];
      NSString *unReadCount = [msgDict objectForKey:@"UNREAD_COUNT"];
      
      NSData *jsonData = [content dataUsingEncoding:NSUTF8StringEncoding];
      NSError *error;
      NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
      //NSLog(@"dict : %@", dict);
      
      NSString *snsNm = [dict objectForKey:@"SNS_NM"];
      NSString *snsDesc = [dict objectForKey:@"SNS_DESC"];
      NSString *snsCoverImage = [dict objectForKey:@"SNS_COVER_IMG"];
      
      NSData *jsonData2 = [aditInfo dataUsingEncoding:NSUTF8StringEncoding];
      NSError *e;
      NSDictionary *aditDic = [NSJSONSerialization JSONObjectWithData:jsonData2 options:0 error:&e];
      //NSLog(@"aditDic : %@", aditDic);
      
      NSString *sendType = [aditDic objectForKey:@"TYPE"];
      
      NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
      [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSDate *nsDate = [dateFormat dateFromString:date];
      
      NSDateFormatter *dateFormat2 = [[NSDateFormatter alloc] init];
      [dateFormat2 setDateFormat:@"yyyy년 MMMM d일 eeee"];
      NSString *dateStr = [dateFormat2 stringFromDate:nsDate];
      
      NSDateFormatter *dateFormat3 = [[NSDateFormatter alloc] init];
      [dateFormat3 setDateFormat:@"a hh:mm"];
      NSString *timeStr = [dateFormat3 stringFromDate:nsDate];
      NSString *decodeTime = [NSString urlDecodeString:timeStr];
      
      NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
      
      UIImage *bubble = [[UIImage imageNamed:@"bubbleReceive.png"] stretchableImageWithLeftCapWidth:21 topCapHeight:14];
      //UIColor *color = [UIColor colorWithHue:240.0f / 360.0f saturation:0.02f brightness:0.92f alpha:1.0f];
      UIColor *color = [UIColor whiteColor];
      
      if(![profileImg isEqualToString:@""]){
         self.dbHelper = [[MFDBHelper alloc]init];
         userImg = [self imageByScalingAndCroppingForSize:CGSizeMake(50, 50) :[self.dbHelper saveThumbImage:@"profile" :profileImg]];
         
         inviteRecvCell.userImgView.image = userImg;
         
         //NSLog(@"recv profile image : %@", image);
         //NSLog(@"recv profile imagePath : %@", imagePath);
      } else {
         UIImage *defaultImg = [UIImage imageNamed:@"profile_default.png"];
         inviteRecvCell.userImgView.image = defaultImg;
      }
      
      inviteRecvCell.bubbleImg.image = [bubble imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];
      [inviteRecvCell.bubbleImg setTintColor:color];
      
      UITapGestureRecognizer *bubbleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapMoreHandler:)];
      inviteRecvCell.bubbleImg.tag = indexPath.row;
      [inviteRecvCell.bubbleImg setUserInteractionEnabled:YES];
      [inviteRecvCell.bubbleImg addGestureRecognizer:bubbleTap];
      
      inviteRecvCell.imgView.layer.cornerRadius = inviteRecvCell.imgView.frame.size.width/10;
      inviteRecvCell.imgView.clipsToBounds = YES;
      
      inviteRecvCell.userName.text = userName;
      
      [inviteRecvCell.joinButton setTitle:NSLocalizedString(@"invite_done", @"invite_done") forState:UIControlStateNormal];
      inviteRecvCell.joinButton.tag = indexPath.row;
      [inviteRecvCell.joinButton addTarget:self action:@selector(tapJoinButton:) forControlEvents:UIControlEventTouchUpInside];
      
      if(![snsCoverImage isEqualToString:@""]&&![snsCoverImage isEqualToString:@"null"]&&snsCoverImage!=nil){
         self.dbHelper = [[MFDBHelper alloc]init];
         UIImage *image = [self.dbHelper saveThumbImage:@"cover" :snsCoverImage];
         if(image!=nil){
            UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(125, 105) :image];
            inviteRecvCell.imgView.image = postCover;
         } else {
            UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(125, 105) :[UIImage imageNamed:@"board_blue_square.png"]];
            inviteRecvCell.imgView.image = postCover;
         }
      } else {
         UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(125, 105) :[UIImage imageNamed:@"board_blue_square.png"]];
         inviteRecvCell.imgView.image = postCover;
      }
      
      [inviteRecvCell.titleLabel setNumberOfLines:0];
      //[inviteRecvCell.titleLabel setLineBreakMode:NSLineBreakByCharWrapping];
      
      [inviteRecvCell.contentLabel setNumberOfLines:3];
      //[inviteRecvCell.contentLabel setLineBreakMode:NSLineBreakByTruncatingTail];
      
      inviteRecvCell.titleLabel.text = [NSString stringWithFormat:NSLocalizedString(@"invite_title", @"invite_title"), snsNm];
      inviteRecvCell.contentLabel.text = snsDesc;
      
      [inviteRecvCell.moreButton setImage:[self getScaledImage:[UIImage imageNamed:@"icon_popup.png"] scaledToMaxWidth:10.0f] forState:UIControlStateNormal];
      [inviteRecvCell.moreButton setImageEdgeInsets:UIEdgeInsetsMake(5.0, 0.0, 5.0, 0.0)];
      [inviteRecvCell.moreButton setTitleEdgeInsets:UIEdgeInsetsMake(0.0, 5.0, 0.0, 0.0)];
      [inviteRecvCell.moreButton setTitleColor:[MFUtil myRGBfromHex:@"1D4696"] forState:UIControlStateNormal];
      [inviteRecvCell.moreButton setTitle:@"게시판소개 더보기" forState:UIControlStateNormal];
      inviteRecvCell.moreButton.tag = indexPath.row;
      [inviteRecvCell.moreButton addTarget:self action:@selector(tapMoreButton:) forControlEvents:UIControlEventTouchUpInside];
      
      inviteRecvCell.timeLabel.text = decodeTime;
      
      //NSLog(@"unReadCount : %@", unReadCount);
      if(![[NSString stringWithFormat:@"%@",unReadCount] isEqualToString:@"0"] && unReadCount!=nil){
         inviteRecvCell.readLabel.hidden = NO;
         inviteRecvCell.readLabel.text = [NSString stringWithFormat:@"%@", unReadCount];
      } else {
         inviteRecvCell.readLabel.hidden = YES;
      }
      
      if (indexPath.item == 0) {
         inviteRecvCell.dateLabel.text = dateStr;
         inviteRecvCell.dateLabel.hidden = NO;
         inviteRecvCell.inviteRecvDateConstraint.constant=25;
      }
      
      if (indexPath.item > 0) {
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         
         
         if (![pDateStr isEqualToString:cDateStr]) {
            //NSLog(@"pd : %@, cd : %@", pDateStr, cDateStr);
            inviteRecvCell.dateLabel.text = dateStr;
            inviteRecvCell.dateLabel.hidden = NO;
            inviteRecvCell.inviteRecvDateConstraint.constant=25;
            
         } else {
            inviteRecvCell.dateLabel.hidden = YES;
            inviteRecvCell.inviteRecvDateConstraint.constant=5;
         }
      }
      
      UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapProfileOnTable:)];
      inviteRecvCell.userImgView.tag = indexPath.row;
      [inviteRecvCell.userImgView setUserInteractionEnabled:YES];
      [inviteRecvCell.userImgView addGestureRecognizer:tap];
      
   } @catch(NSException *exception){
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (float)tmpSetLongSendCell:(LongChatSendViewCell *)longSendCell atIndexPath:(NSIndexPath *)indexPath {
   float cellHeight=80;
   longSendCell.msgContent.userInteractionEnabled = NO;
   
   @try{
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
      //NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      //NSString *content = [NSString urlDecodeString:[msgDict objectForKey:@"CONTENT"]];
      NSString *contentPrev = [NSString urlDecodeString:[msgDict objectForKey:@"CONTENT_PREV"]];
      NSString *aditInfo = [msgDict objectForKey:@"ADIT_INFO"];
      
      NSData *jsonData = [aditInfo dataUsingEncoding:NSUTF8StringEncoding];
      NSError *e;
      NSDictionary *aditDic = [NSJSONSerialization JSONObjectWithData:jsonData options:0 error:&e];
      
      NSString *localImgPath = @"";
      if([aditDic objectForKey:@"LOCAL_CONTENT"] !=nil) localImgPath = [aditDic objectForKey:@"LOCAL_CONTENT"];
      
      CGSize maximumSize = CGSizeMake(300, 9999);
      UIFont *textFont = [UIFont fontWithName:@"Helvetica" size:14];
      
      NSAttributedString *attributedText = [[NSAttributedString alloc] initWithString:contentPrev attributes:@{NSFontAttributeName: textFont}];
      CGRect rect = [attributedText boundingRectWithSize:(CGSize)maximumSize options:NSStringDrawingUsesLineFragmentOrigin context:nil];
      CGSize textStringSize = rect.size;
      
      CGRect textFrame = CGRectMake(0, 0, 300, textStringSize.height);
      longSendCell.msgContent.frame = textFrame;
      cellHeight+=textStringSize.height;
      
      NSDictionary *attributes = @{NSFontAttributeName: textFont};
      CGSize textSize = [contentPrev sizeWithAttributes:attributes];
      CGFloat strikeWidth = textSize.width;
      
      if (indexPath.item == 0) {
         longSendCell.dateLabelConstraint.constant=25;
         cellHeight+=15;
      }
      
      if (indexPath.item > 0) {
         NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
         [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
         
         NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         
         if (![pDateStr isEqualToString:cDateStr]) {
            longSendCell.dateLabelConstraint.constant=25;
            cellHeight+=15;
            
         } else {
            longSendCell.dateLabelConstraint.constant=5;
            cellHeight+=5;
         }
      }
      
      int lineCount = strikeWidth / 162;
      //if(lineCount>1.3) cellHeight += 15;
      cellHeight += 15*lineCount;
      return cellHeight;
      
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (void)setLongSendCell:(LongChatSendViewCell *)longSendCell atIndexPath:(NSIndexPath *)indexPath {
   @try{
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
      NSLog(@"Long Send MsgDict : %@", msgDict);
      
      //NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *chatNo = [msgDict objectForKey:@"CHAT_NO"];
      //NSString *content = [msgDict objectForKey:@"CONTENT"];
      NSString *contentPrev = [msgDict objectForKey:@"CONTENT_PREV"];
      if([contentPrev rangeOfString:@"%"].location != NSNotFound){
         contentPrev = [contentPrev stringByReplacingOccurrencesOfString:@"%" withString:@"%25"];
      }
      if([contentPrev rangeOfString:@"&"].location != NSNotFound){
         contentPrev = [contentPrev stringByReplacingOccurrencesOfString:@"&" withString:@"%26"];
      }
      
      //      longSendCell.msgContent.text = contentPrev;
      //      longSendCell.msgContent.userInteractionEnabled = NO;
      longSendCell.msgLabel.text = contentPrev;
      longSendCell.msgLabel.userInteractionEnabled = NO;
      
      NSString *date = [msgDict objectForKey:@"DATE"];
      NSString *aditInfo = [msgDict objectForKey:@"ADIT_INFO"];
      NSString *unReadCount = [msgDict objectForKey:@"UNREAD_COUNT"];
      
      NSData *jsonData2 = [aditInfo dataUsingEncoding:NSUTF8StringEncoding];
      NSError *e;
      NSDictionary *aditDic = [NSJSONSerialization JSONObjectWithData:jsonData2 options:0 error:&e];
      //NSLog(@"aditDic : %@", aditDic);
      
      NSString *sendType = [aditDic objectForKey:@"TYPE"];
      
      NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
      [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSDate *nsDate = [dateFormat dateFromString:date];
      
      NSDateFormatter *dateFormat2 = [[NSDateFormatter alloc] init];
      [dateFormat2 setDateFormat:@"yyyy년 MMMM d일 eeee"];
      NSString *dateStr = [dateFormat2 stringFromDate:nsDate];
      
      NSDateFormatter *dateFormat3 = [[NSDateFormatter alloc] init];
      [dateFormat3 setDateFormat:@"a hh:mm"];
      NSString *timeStr = [dateFormat3 stringFromDate:nsDate];
      NSString *decodeTime = [NSString urlDecodeString:timeStr];
      
      NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
      
      UIImage *bubble = [[UIImage imageNamed:@"bubble.png"] stretchableImageWithLeftCapWidth:21 topCapHeight:14];
      UIColor *color = [MFUtil myRGBfromHex:@"B7E6F6"];
      
      longSendCell.bubbleImg.image = [bubble imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];
      [longSendCell.bubbleImg setTintColor:color];
      
      [longSendCell.viewButton setImage:[self getScaledImage:[UIImage imageNamed:@"icon_popup.png"] scaledToMaxWidth:10.0f] forState:UIControlStateNormal];
      [longSendCell.viewButton setImageEdgeInsets:UIEdgeInsetsMake(5.0, 5.0, 5.0, 0.0)];
      [longSendCell.viewButton setTitleEdgeInsets:UIEdgeInsetsMake(0.0, 10.0, 0.0, 0.0)];
      [longSendCell.viewButton setTitleColor:[MFUtil myRGBfromHex:@"1D4696"] forState:UIControlStateNormal];
      [longSendCell.viewButton setTitle:@"전체보기" forState:UIControlStateNormal];
      longSendCell.viewButton.tag = [chatNo integerValue];
      [longSendCell.viewButton addTarget:self action:@selector(tapChatMoreButton:) forControlEvents:UIControlEventTouchUpInside];
      
      longSendCell.timeLabel.text = decodeTime;
      
      //NSLog(@"unReadCount : %@", unReadCount);
      if(![[NSString stringWithFormat:@"%@",unReadCount] isEqualToString:@"0"] && unReadCount!=nil){
         longSendCell.readLabel.hidden = NO;
         longSendCell.readLabel.text = [NSString stringWithFormat:@"%@", unReadCount];
      } else {
         longSendCell.readLabel.hidden = YES;
      }
      
      //NSLog(@"#sendType# : %@", sendType);
      
      if([sendType isEqualToString:@"SENDING"]){
         longSendCell.timeLabel.hidden = YES;
         longSendCell.failButton.hidden = YES;
         [longSendCell.indicator startAnimating];
         
      } else if([sendType isEqualToString:@"SUCCEED"]){
         longSendCell.timeLabel.hidden = NO;
         longSendCell.failButton.hidden = YES;
         [longSendCell.indicator setHidesWhenStopped:YES];
         [longSendCell.indicator stopAnimating];
         
      } else if([sendType isEqualToString:@"FAILED"]){
         longSendCell.timeLabel.hidden = YES;
         longSendCell.failButton.hidden = NO;
         [longSendCell.indicator setHidesWhenStopped:YES];
         [longSendCell.indicator stopAnimating];
         
      } else {
         NSLog(@"unknown sendType : %@", sendType);
         //DATE
         longSendCell.timeLabel.hidden = YES;
         longSendCell.failButton.hidden = YES;
         [longSendCell.indicator setHidesWhenStopped:YES];
         [longSendCell.indicator stopAnimating];
      }
      
      if (indexPath.item == 0) {
         longSendCell.dateLabel.text = dateStr;
         longSendCell.dateLabel.hidden = NO;
         longSendCell.dateLabelConstraint.constant=25;
      }
      
      if (indexPath.item > 0) {
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         
         
         if (![pDateStr isEqualToString:cDateStr]) {
            //NSLog(@"pd : %@, cd : %@", pDateStr, cDateStr);
            longSendCell.dateLabel.text = dateStr;
            longSendCell.dateLabel.hidden = NO;
            longSendCell.dateLabelConstraint.constant=25;
            
         } else {
            longSendCell.dateLabel.hidden = YES;
            longSendCell.dateLabelConstraint.constant=5;
         }
      }
      
   } @catch(NSException *exception){
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (float)tmpSetLongRecvCell:(LongChatReceiveViewCell *)longRecvCell atIndexPath:(NSIndexPath *)indexPath {
   float cellHeight=100;
   longRecvCell.msgContent.userInteractionEnabled = NO;
   
   @try{
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
      //NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      //NSString *content = [NSString urlDecodeString:[msgDict objectForKey:@"CONTENT"]];
      NSString *contentPrev = [NSString urlDecodeString:[msgDict objectForKey:@"CONTENT_PREV"]];
      NSString *aditInfo = [msgDict objectForKey:@"ADIT_INFO"];
      
      NSData *jsonData = [aditInfo dataUsingEncoding:NSUTF8StringEncoding];
      NSError *e;
      NSDictionary *aditDic = [NSJSONSerialization JSONObjectWithData:jsonData options:0 error:&e];
      
      NSString *localImgPath = @"";
      if([aditDic objectForKey:@"LOCAL_CONTENT"] !=nil) localImgPath = [aditDic objectForKey:@"LOCAL_CONTENT"];
      
      CGSize maximumSize = CGSizeMake(300, 9999);
      UIFont *textFont = [UIFont fontWithName:@"Helvetica" size:14];
      
      NSAttributedString *attributedText = [[NSAttributedString alloc] initWithString:contentPrev attributes:@{NSFontAttributeName: textFont}];
      CGRect rect = [attributedText boundingRectWithSize:(CGSize)maximumSize options:NSStringDrawingUsesLineFragmentOrigin context:nil];
      CGSize textStringSize = rect.size;
      
      CGRect textFrame = CGRectMake(0, 0, 300, textStringSize.height);
      longRecvCell.msgContent.frame = textFrame;
      cellHeight+=textStringSize.height;
      
      NSDictionary *attributes = @{NSFontAttributeName: textFont};
      CGSize textSize = [contentPrev sizeWithAttributes:attributes];
      CGFloat strikeWidth = textSize.width;
      
      if (indexPath.item == 0) {
         longRecvCell.dateLabelConstraint.constant=25;
         cellHeight+=15;
      }
      
      if (indexPath.item > 0) {
         NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
         [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
         
         NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         
         if (![pDateStr isEqualToString:cDateStr]) {
            longRecvCell.dateLabelConstraint.constant=25;
            cellHeight+=15;
            
         } else {
            longRecvCell.dateLabelConstraint.constant=5;
            cellHeight+=5;
         }
      }
      
      int lineCount = strikeWidth / 162;
      //if(lineCount>1.3) cellHeight += 15;
      cellHeight += 15*lineCount;
      return cellHeight;
      
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (void)setLongRecvCell:(LongChatReceiveViewCell *)longRecvCell atIndexPath:(NSIndexPath *)indexPath {
   @try{
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:indexPath.item];
      //    NSString *chatNo = [msgDict objectForKey:@"CHAT_NO"];
      //    NSString *roomNo = [msgDict objectForKey:@"ROOM_NO"];
      //    NSString *userNo = [msgDict objectForKey:@"USER_NO"];
      NSString *userName = [msgDict objectForKey:@"USER_NM"];
      NSString *decodeUserNm = [NSString urlDecodeString:userName];
      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *chatNo = [msgDict objectForKey:@"CHAT_NO"];
      //NSString *content = [msgDict objectForKey:@"CONTENT"];
      NSString *contentPrev = [msgDict objectForKey:@"CONTENT_PREV"];
      if([contentPrev rangeOfString:@"%"].location != NSNotFound){
         contentPrev = [contentPrev stringByReplacingOccurrencesOfString:@"%" withString:@"%25"];
      }
      if([contentPrev rangeOfString:@"&"].location != NSNotFound){
         contentPrev = [contentPrev stringByReplacingOccurrencesOfString:@"&" withString:@"%26"];
      }
      
      NSString *date = [msgDict objectForKey:@"DATE"];
      NSString *profileImg = [NSString urlDecodeString:[msgDict objectForKey:@"USER_IMG"]];
      NSString *unReadCount = [msgDict objectForKey:@"UNREAD_COUNT"];
      
      NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
      [dateFormat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
      NSDate *nsDate = [dateFormat dateFromString:date];
      
      NSDateFormatter *dateFormat2 = [[NSDateFormatter alloc] init];
      [dateFormat2 setDateFormat:@"yyyy년 MMMM d일 eeee"];
      NSString *dateStr = [dateFormat2 stringFromDate:nsDate];
      
      NSDateFormatter *dateFormat3 = [[NSDateFormatter alloc] init];
      [dateFormat3 setDateFormat:@"a hh:mm"];
      NSString *timeStr = [dateFormat3 stringFromDate:nsDate];
      NSString *decodeTime = [NSString urlDecodeString:timeStr];
      
      NSDictionary *currentDic = [self.msgData.chatArray objectAtIndex:indexPath.item];
      
      UIImage *bubble = [[UIImage imageNamed:@"bubbleReceive.png"] stretchableImageWithLeftCapWidth:21 topCapHeight:14];
      UIColor *color = [UIColor whiteColor];
      
      longRecvCell.bubbleImg.image = [bubble imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];
      [longRecvCell.bubbleImg setTintColor:color];
      
      [longRecvCell.viewButton setImage:[self getScaledImage:[UIImage imageNamed:@"icon_popup.png"] scaledToMaxWidth:10.0f] forState:UIControlStateNormal];
      [longRecvCell.viewButton setImageEdgeInsets:UIEdgeInsetsMake(5.0, 5.0, 5.0, 0.0)];
      [longRecvCell.viewButton setTitleEdgeInsets:UIEdgeInsetsMake(0.0, 10.0, 0.0, 0.0)];
      [longRecvCell.viewButton setTitleColor:[MFUtil myRGBfromHex:@"1D4696"] forState:UIControlStateNormal];
      [longRecvCell.viewButton setTitle:@"전체보기" forState:UIControlStateNormal];
      longRecvCell.viewButton.tag = [chatNo integerValue];
      [longRecvCell.viewButton addTarget:self action:@selector(tapChatMoreButton:) forControlEvents:UIControlEventTouchUpInside];
      
      longRecvCell.userName.text = decodeUserNm;
      longRecvCell.timeLabel.text = decodeTime;
      
      //longRecvCell.msgContent.text = contentPrev;
      //longRecvCell.msgContent.userInteractionEnabled = NO;
      longRecvCell.msgLabel.text = contentPrev;
      longRecvCell.msgLabel.userInteractionEnabled = NO;
      
      longRecvCell.bubbleWidthConstraint.constant = [UIScreen mainScreen].bounds.size.width - 145;
      //longRecvCell.bubbleWidthConstraint.constant = longRecvCell.msgContent.frame.size.width;
      
      if(![[NSString stringWithFormat:@"%@",unReadCount] isEqualToString:@"0"] && unReadCount!=nil){
         longRecvCell.readLabel.hidden = NO;
         longRecvCell.readLabel.text = [NSString stringWithFormat:@"%@", unReadCount];
      } else {
         longRecvCell.readLabel.hidden = YES;
      }
      
      if(![profileImg isEqualToString:@""]){
         self.dbHelper = [[MFDBHelper alloc]init];
         userImg = [self imageByScalingAndCroppingForSize:CGSizeMake(50, 50) :[self.dbHelper saveThumbImage:@"profile" :profileImg]];
         longRecvCell.userImg.image = userImg;
         
      } else {
         UIImage *defaultImg = [UIImage imageNamed:@"profile_default.png"];
         longRecvCell.userImg.image = defaultImg;
      }
      
      if (indexPath.item == 0) {
         longRecvCell.dateLabel.text = dateStr;
         longRecvCell.dateLabel.hidden = NO;
         longRecvCell.dateLabelConstraint.constant = 25;
         
         //채팅내용 검색결과
         //         if(self.searchText.length>0){
         //            if([decodeContent rangeOfString:[NSString stringWithFormat:@"%@", self.searchText]].location != NSNotFound){
         //               longRecvCell.rMsgContent.attributedText = [self textGetRanges:decodeContent keyword:self.searchText];
         //            }
         //         }
         //
         //         NSDictionary *attributes = @{NSFontAttributeName: [receiveCell.rMsgContent font]};
         //         CGSize textSize = [[receiveCell.rMsgContent text] sizeWithAttributes:attributes];
         //         CGFloat strikeWidth = textSize.width;
         //
         //         if(strikeWidth < 23.0f){
         //            longRecvCell.rMsgContentWidth.constant = 40;
         //            longRecvCell.msgContent.textAlignment = NSTextAlignmentCenter;
         //         } else if(strikeWidth >= self.tableView.frame.size.width - 160){
         //            longRecvCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 160;
         //            longRecvCell.msgContent.textAlignment = NSTextAlignmentLeft;
         //         } else {
         //            if(strikeWidth+15 >= self.tableView.frame.size.width - 160) longRecvCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 160;
         //            else longRecvCell.rMsgContentWidth.constant = strikeWidth+15;
         //            longRecvCell.msgContent.textAlignment = NSTextAlignmentLeft;
         //         }
      }
      
      if (indexPath.item  > 0) {
         NSDictionary *previousDic = [self.msgData.chatArray objectAtIndex:indexPath.item - 1];
         NSString *previousDate = [previousDic objectForKey:@"DATE"];
         NSString *currentDate = [currentDic objectForKey:@"DATE"];
         
         NSDate *pDate = [dateFormat dateFromString:previousDate];
         NSDate *cDate = [dateFormat dateFromString:currentDate];
         
         NSDateFormatter *dateFormat4 = [[NSDateFormatter alloc] init];
         [dateFormat4 setDateFormat:@"yyyy-MM-dd"];
         NSString *pDateStr = [dateFormat4 stringFromDate:pDate];
         NSString *cDateStr = [dateFormat4 stringFromDate:cDate];
         
         
         //채팅내용 검색결과
         //         if(self.searchText.length>0){
         //            if([decodeContent rangeOfString:[NSString stringWithFormat:@"%@", self.searchText]].location != NSNotFound){
         //               longRecvCell.rMsgContent.attributedText = [self textGetRanges:decodeContent keyword:self.searchText];
         //            }
         //         }
         //
         //         NSDictionary *attributes = @{NSFontAttributeName: [receiveCell.rMsgContent font]};
         //         CGSize textSize = [[receiveCell.rMsgContent text] sizeWithAttributes:attributes];
         //         CGFloat strikeWidth = textSize.width;
         //
         //         if(strikeWidth < 23.0f){
         //            receiveCell.rMsgContentWidth.constant = 40;
         //            receiveCell.rMsgContent.textAlignment = NSTextAlignmentCenter;
         //         } else if(strikeWidth >= self.tableView.frame.size.width - 160){
         //            receiveCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 160;
         //            receiveCell.rMsgContent.textAlignment = NSTextAlignmentLeft;
         //         } else {
         //            if(strikeWidth+15 >= self.tableView.frame.size.width - 160) receiveCell.rMsgContentWidth.constant = self.tableView.frame.size.width - 160;
         //            else receiveCell.rMsgContentWidth.constant = strikeWidth+15;
         //            receiveCell.rMsgContent.textAlignment = NSTextAlignmentLeft;
         //         }
         
         
         if (![pDateStr isEqualToString:cDateStr]) {
            longRecvCell.dateLabel.text = dateStr;
            longRecvCell.dateLabel.hidden = NO;
            longRecvCell.dateLabelConstraint.constant = 25;
            
         } else {
            longRecvCell.dateLabel.hidden = YES;
            longRecvCell.dateLabelConstraint.constant = 5;
         }
      }
      
      UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapProfileOnTable:)];
      longRecvCell.userImg.tag = indexPath.row;
      [longRecvCell.userImg setUserInteractionEnabled:YES];
      [longRecvCell.userImg addGestureRecognizer:tap];
      
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

#pragma mark - Tap Event Handler
- (void)handleTapGesture:(UITapGestureRecognizer*)tap{
   @try {
      NSInteger index = tap.view.tag;
      if (index >= 0) {
         [self touchedMsgFailButton:(NSInteger)index];
      }
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (void)tapFileOnTable:(id)sender{
   NSLog(@"%s", __func__);
   UITapGestureRecognizer *gesture = sender;
   UIImageView *imageView = (UIImageView *)gesture.view;
   
   @try {
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:(long)imageView.tag];
      NSLog(@"msgDic : %@", msgDict);
      
      NSString *fileUrl = [msgDict objectForKey:@"CONTENT"];
      
      UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:nil message:nil preferredStyle:UIAlertControllerStyleActionSheet];
      UIAlertAction *fileOpenAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"파일열기", @"")
                                                               style:UIAlertActionStyleDefault
                                                             handler:^(UIAlertAction * action){
                                                                [self performSegueWithIdentifier:@"CHAT_FILE_OPEN_MODAL" sender:fileUrl];
                                                                [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                             }];
      [actionSheet addAction:fileOpenAction];
      
      if([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad){
         UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"취소", @"취소")
                                                                style:UIAlertActionStyleDefault
                                                              handler:^(UIAlertAction * action){
                                                                 [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                              }];
         [actionSheet addAction:cancelAction];
         
         [actionSheet.popoverPresentationController setPermittedArrowDirections:0];
         CGRect rect = self.view.frame;
         rect.origin.x = (self.view.frame.size.width/2)-(actionSheet.view.frame.size.width/2);
         rect.origin.y = (self.view.frame.size.height/2)-(actionSheet.view.frame.size.height/2);
         actionSheet.popoverPresentationController.sourceView = self.view;
         actionSheet.popoverPresentationController.sourceRect = rect;
      } else {
         UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"취소", @"취소")
                                                                style:UIAlertActionStyleCancel
                                                              handler:^(UIAlertAction * action){
                                                                 [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                              }];
         [actionSheet addAction:cancelAction];
      }
      
      [self presentViewController:actionSheet animated:YES completion:nil];
      
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (void)tapProfileOnTable:(id)sender{
   NSLog(@"%s", __func__);
   UITapGestureRecognizer *gesture = sender;
   UIImageView *imageView = (UIImageView *)gesture.view;
   
   @try{
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:(long)imageView.tag];
      //NSLog(@"msgDic : %@", msgDict);
      
      //[self performSegueWithIdentifier:@"CHAT_PROFILE_MODAL" sender:msgDict];
      
      self.dbHelper = [[MFDBHelper alloc]init];
      NSString *sqlString = [NSString stringWithFormat:@"SELECT ROOM_TYPE FROM CHAT_ROOMS WHERE ROOM_NO = %@", self.roomNo];
      NSMutableArray *selectArr = [self.dbHelper selectQuery:sqlString];
      NSString *roomType = [[selectArr objectAtIndex:0]objectForKey:@"ROOM_TYPE"];
      
      NSString *userNo = [msgDict objectForKey:@"USER_NO"];
      CustomHeaderViewController *destination = [[CustomHeaderViewController alloc] initwithUserNo:userNo];
      destination.userNo = userNo;
      destination.fromSegue = @"CHAT_PROFILE_MODAL";
      destination.chatRoomTy = roomType;
      
      destination.modalTransitionStyle = UIModalTransitionStyleCrossDissolve;
      [self presentViewController:destination animated:YES completion:nil];
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
   
}

- (void)chatImgTapGesture:(id)sender{
   UITapGestureRecognizer *gesture = sender;
   UIImageView *imageView = (UIImageView *)gesture.view;
   self.imageDictionary = [NSMutableDictionary dictionary];
   
   @try{
      //오리지널파일 경로를 이미지딕셔너리에 저장
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:(long)imageView.tag];
      NSString *contentType = [msgDict objectForKey:@"CONTENT_TY"];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      NSString *decodeContent = [NSString urlDecodeString:content];
      NSString *fileName = [msgDict objectForKey:@"FILE_NM"];
      NSString *aditInfo = [msgDict objectForKey:@"ADIT_INFO"];
      NSString *pushType = [msgDict objectForKey:@"TYPE"];
      NSString *userName = [NSString urlDecodeString:[msgDict objectForKey:@"USER_NM"]];
      NSString *date = [msgDict objectForKey:@"DATE"];
      //NSLog(@"msgDict : %@", msgDict);
      
      self.tabImgUser = userName;
      self.tabImgDate = date;
      
      //NSString *result = [self checkDataNetwork];
      //if([result isEqualToString:@"Cellular"] || [result isEqualToString:@"WIFI"]){
      if([contentType isEqualToString:@"IMG"]){
         if([pushType isEqualToString:@"MISSED"]){
            //NSLog(@"missed");
            NSLog(@"aditInfo : %@", aditInfo);
            NSData *originData = [NSData dataWithContentsOfFile:aditInfo];
            UIImage *originImage = [UIImage imageWithData:originData];
            NSLog(@"aditInfo data : %@", originData);
            NSLog(@"aditInfo image : %@", originImage);
            
            
            [self.imageDictionary setObject:originImage forKey:[NSString stringWithFormat:@"%ld", (long)imageView.tag]];
         } else {
            NSString *originValue = [NSString urlDecodeString:decodeContent];
            
            if([originValue rangeOfString:originValue].location != NSNotFound){
               originValue = [originValue stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@" "] withString:@"+"];
            }
            
            UIImage *originImage = [UIImage imageWithData:[NSData dataWithContentsOfURL:[NSURL URLWithString:[originValue stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]]]];
            //NSLog(@"originValue : %@", originValue);
            //NSLog(@"originImage : %@", originImage);
            if(originImage!=nil){
               [self.imageDictionary setObject:originImage forKey:[NSString stringWithFormat:@"%ld", (long)imageView.tag]];
            } else {
               //NSLog(@"Image is null :(");
               UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"이미지를 불러올 수 없습니다." preferredStyle:UIAlertControllerStyleAlert];
               UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                handler:^(UIAlertAction * action) {
                                                                   [alert dismissViewControllerAnimated:YES completion:nil];
                                                                }];
               [alert addAction:okButton];
               [self presentViewController:alert animated:YES completion:nil];
            }
         }
      }
      
      UIImage *image = [self.imageDictionary objectForKey:[NSString stringWithFormat:@"%ld", (long)imageView.tag]];
      
      UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
      ImgDownloadViewController *destination = (ImgDownloadViewController *)[storyboard instantiateViewControllerWithIdentifier:@"ImgDownloadViewController"];
      UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:destination];
      
      destination.img = image;
      destination.writer = self.tabImgUser;
      destination.writeDate = self.tabImgDate;
      destination.fromSegue = @"CHAT_IMG_DOWN_MODAL";
      
      navController.modalTransitionStyle = UIModalPresentationNone;
      [self presentViewController:navController animated:YES completion:nil];
      
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (void)tapOnToastView:(id)sender{
   @try{
      for(UIView *subview in [self.view subviews]) {
         if([subview isKindOfClass:[self.toastView class]]) {
            [subview removeFromSuperview];
         }
      }
      
      NSIndexPath *lastCell = [NSIndexPath indexPathForItem:self.msgData.chatArray.count-1 inSection:0];
      [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (void)tapMoreButton:(UIButton *)sender{
   NSInteger tag = sender.tag;
   [self boardMoreInfo:tag];
}

-(void)tapMoreHandler:(UITapGestureRecognizer *)tap{
   NSLog(@"tap : %@", tap);
   NSInteger tag = tap.view.tag;
   [self boardMoreInfo:tag];
}

-(void)boardMoreInfo:(NSInteger)tag{
   NSLog(@"tag : %ld", (long)tag);
   @try{
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:tag];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      NSString *userNo = [msgDict objectForKey:@"USER_NO"];
      
      NSData *jsonData = [content dataUsingEncoding:NSUTF8StringEncoding];
      NSError *error;
      NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
      
      NSString *snsNo = [dict objectForKey:@"SNS_NO"];
      NSString *snsNm = [dict objectForKey:@"SNS_NM"];
      NSString *snsDesc = [dict objectForKey:@"SNS_DESC"];
      NSString *snsLeader = [dict objectForKey:@"SNS_CREATE_USER_NM"];
      NSString *snsType = [dict objectForKey:@"SNS_TY"];
      NSString *snsAllow = [dict objectForKey:@"SNS_NEED_ALLOW"];
      NSString *snsMemCnt = [dict objectForKey:@"SNS_MEMBER_COUNT"];
      NSString *snsCreateDate = [dict objectForKey:@"SNS_CREATE_DATE"];
      
      if([snsType isEqualToString:@"Public"]) snsType = @"공개";
      else if([snsType isEqualToString:@"Closed"]) snsType = @"이름 공개";
      else snsType = @"비공개";
      
      if([snsAllow isEqualToString:@"0"]) snsAllow = @"비승인";
      else snsAllow = @"승인";
      
      NSRange range = [snsCreateDate rangeOfString:@" " options:NSBackwardsSearch];
      snsCreateDate = [snsCreateDate substringToIndex:range.location+1];
      
      UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"게시판 정보" message:nil preferredStyle:UIAlertControllerStyleAlert];
      
      NSMutableParagraphStyle *paraStyle = [[NSMutableParagraphStyle alloc] init];
      paraStyle.alignment = NSTextAlignmentLeft;
      
      NSString *str = [NSString stringWithFormat:@"이름 : %@ \n게시판 설명 : %@ \n\n리더 : %@ \n공개 여부 : %@ \n가입시 승인 여부 : %@ \n멤버수 : %@ \n게시판 생성일자 : %@", snsNm, snsDesc, snsLeader, snsType, snsAllow, snsMemCnt, snsCreateDate];
      
      NSMutableAttributedString *atrStr = [[NSMutableAttributedString alloc] initWithString:str attributes:@{NSParagraphStyleAttributeName:paraStyle,NSFontAttributeName:[UIFont systemFontOfSize:15.0]}];
      [alert setValue:atrStr forKey:@"attributedMessage"];
      
      
      UIAlertAction* closeButton = [UIAlertAction actionWithTitle:@"닫기" style:UIAlertActionStyleDefault
                                                          handler:^(UIAlertAction * action) {
                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                             
                                                          }];
      
      [alert addAction:closeButton];
      
      if(![[NSString stringWithFormat:@"%@", userNo] isEqualToString:[NSString stringWithFormat:@"%@", _myUserNo]]){
         UIAlertAction* joinButton = [UIAlertAction actionWithTitle:@"가입하기" style:UIAlertActionStyleDefault
                                                            handler:^(UIAlertAction * action) {
                                                               [alert dismissViewControllerAnimated:YES completion:nil];
                                                               
                                                               UIAlertController *alert2 = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"join_sns_toast0", @"join_sns_toast0"), snsNm] message:nil preferredStyle:UIAlertControllerStyleAlert];
                                                               
                                                               UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                                                                    handler:^(UIAlertAction * action) {
                                                                                                                       [alert2 dismissViewControllerAnimated:YES completion:nil];
                                                                                                                       
                                                                                                                    }];
                                                               UIAlertAction *okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                                                                handler:^(UIAlertAction * action) {
                                                                                                                   [alert2 dismissViewControllerAnimated:YES completion:nil];
                                                                                                                   [self callJoinSns:snsNo];
                                                                                                                }];
                                                               [alert2 addAction:cancelButton];
                                                               [alert2 addAction:okButton];
                                                               [self presentViewController:alert2 animated:YES completion:nil];
                                                               
                                                            }];
         [alert addAction:joinButton];
      }
      [self presentViewController:alert animated:YES completion:nil];
      
   } @catch(NSException *exception){
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (void)tapJoinButton:(UIButton *)sender{
   @try {
      NSInteger tag = sender.tag;
      NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:tag];
      NSString *content = [msgDict objectForKey:@"CONTENT"];
      
      NSData *jsonData = [content dataUsingEncoding:NSUTF8StringEncoding];
      NSError *error;
      NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
      
      NSString *snsNo = [dict objectForKey:@"SNS_NO"];
      NSString *snsNm = [dict objectForKey:@"SNS_NM"];
      
      UIAlertController *alert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"join_sns_toast0", @"join_sns_toast0"), snsNm] message:nil preferredStyle:UIAlertControllerStyleAlert];
      
      UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                           handler:^(UIAlertAction * action) {
                                                              [alert dismissViewControllerAnimated:YES completion:nil];
                                                              
                                                           }];
      UIAlertAction *okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                       handler:^(UIAlertAction * action) {
                                                          [alert dismissViewControllerAnimated:YES completion:nil];
                                                          [self callJoinSns:snsNo];
                                                       }];
      [alert addAction:cancelButton];
      [alert addAction:okButton];
      [self presentViewController:alert animated:YES completion:nil];
      
   } @catch(NSException *exception){
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (void)tapChatMoreButton:(UIButton *)sender{
   NSInteger chatNo = sender.tag;
   NSLog(@"tapChatMore chatNo : %ld", (long)chatNo);
   
   UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
   LongChatViewController *destination = (LongChatViewController *)[storyboard instantiateViewControllerWithIdentifier:@"LongChatViewController"];
   
   destination.roomNo = self.roomNo;
   destination.chatNo = [NSString stringWithFormat:@"%lu", chatNo];
   
   UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:destination];
   navController.modalTransitionStyle = UIModalPresentationNone;
   [self presentViewController:navController animated:YES completion:nil];
}

#pragma mark - pushNotification
- (void)noti_NewChatPush:(NSNotification *)notification {
   NSLog(@"%s", __func__);
}

- (void)noti_ChatDetailView:(NSNotification *)notification{
   NSLog(@"%s", __func__);
   
   @try{
      NSArray *dataSet = [notification.userInfo objectForKey:@"DATASET"];
      NSString *roomNo = [[dataSet objectAtIndex:0] objectForKey:@"ROOM_NO"];
      if([[NSString stringWithFormat:@"%@", roomNo] isEqualToString:[NSString stringWithFormat:@"%@", self.roomNo]]){
         [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_Flag" object:nil userInfo:nil];
      } else {
         [self.navigationController popViewControllerAnimated:YES];
      }
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (void)noti_Chat:(NSNotification *)notification {
   NSLog(@"========================================================");
   NSLog(@"1.푸시수신");
   NSDictionary *userInfo = notification.userInfo;
   int count = missedCnt + tmpMissedCnt;
   NSUInteger msgDataCnt = self.msgData.chatArray.count;
   
   @try{
      NSLog(@"%s, userInfo : %@", __func__, userInfo);
      //NSLog(@"self.msgData.chatArray : %@", self.msgData.chatArray);
      
      NSArray *dataSet = [userInfo objectForKey:@"DATASET"];
      NSDictionary *aditInfoDic = [[dataSet objectAtIndex:0] objectForKey:@"ADITINFO"];
      NSString *chatNo = [[dataSet objectAtIndex:0] objectForKey:@"CHAT_NO"];
      NSString *userNo = [[dataSet objectAtIndex:0] objectForKey:@"CUSER_NO"];
      NSString *pushType = [userInfo objectForKey:@"TYPE"];
      NSString *content = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"CONTENT"]];
      NSString *contentType = [[dataSet objectAtIndex:0] objectForKey:@"CONTENT_TY"];
      NSString *chatDate = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"CHAT_DATE"]];
      NSString *fileName = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"FILE_NM"]];
      NSString *fileThumb = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"FILE_THUMB"]];
      NSString *profileImg = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"PROFILE_IMG"]];
      NSString *userName = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"USER_NM"]];
      NSString *roomNo = [[dataSet objectAtIndex:0] objectForKey:@"ROOM_NO"];
      NSString *unRead = [[dataSet objectAtIndex:0] objectForKey:@"UNREAD_COUNT"];
      
      if([contentType isEqualToString:@"INVITE"]){
         content = [NSString urlDecodeString:content];
      }
      
      NSString *tmpNo = [aditInfoDic objectForKey:@"TMP_NO"];
      NSString *tmpLocal = [aditInfoDic objectForKey:@"LOCAL_CONTENT"];
      
      NSInteger tmpIdx = [[aditInfoDic objectForKey:@"TMP_IDX"] intValue];
      //NSLog(@"push changeIdx : %ld", (long)tmpIdx);
      
      NSMutableDictionary *userInfoDic = [[NSMutableDictionary alloc]init];
      [userInfoDic setObject:[[dataSet objectAtIndex:0] objectForKey:@"CHAT_NO"] forKey:@"CHAT_NO"];
      //[userInfoDic setObject:content forKey:@"CONTENT"];
      [userInfoDic setObject:contentType forKey:@"CONTENT_TY"];
      [userInfoDic setObject:chatDate forKey:@"DATE"];
      [userInfoDic setObject:roomNo forKey:@"ROOM_NO"];
      [userInfoDic setObject:pushType forKey:@"TYPE"];
      [userInfoDic setObject:userName forKey:@"USER_NM"];
      [userInfoDic setObject:userNo forKey:@"USER_NO"];
      [userInfoDic setObject:unRead forKey:@"UNREAD_COUNT"];
      
      if([fileName isEqualToString:@""]) [userInfoDic setObject:@"" forKey:@"FILE_NM"];
      else [userInfoDic setObject:fileName forKey:@"FILE_NM"];
      
      if([fileThumb isEqualToString:@""]) [userInfoDic setObject:@"" forKey:@"FILE_THUMB"];
      else [userInfoDic setObject:fileThumb forKey:@"FILE_THUMB"];
      
      if([profileImg isEqualToString:@""]) [userInfoDic setObject:@"" forKey:@"USER_IMG"];
      else [userInfoDic setObject:profileImg forKey:@"USER_IMG"];
      
      //NSLog(@"userInfoDic : %@", userInfoDic);
      
      //해당 채팅방 보고있는 경우
      if([[NSString stringWithFormat:@"%@", roomNo] isEqualToString:[NSString stringWithFormat:@"%@", _roomNo]]){
         [HDNotificationView hideNotificationView];
         
         if(![contentType isEqualToString:@"SYS"]){
            if([contentType isEqualToString:@"LONG_TEXT"]){
               [userInfoDic setObject:@"" forKey:@"CONTENT"];
               [userInfoDic setObject:content forKey:@"CONTENT_PREV"];
            } else {
               [userInfoDic setObject:content forKey:@"CONTENT"];
               [userInfoDic setObject:@"" forKey:@"CONTENT_PREV"];
            }
            
            if(![[NSString stringWithFormat:@"%@", userNo] isEqualToString:[NSString stringWithFormat:@"%@", _myUserNo]]){
               NSString *sqlString2 = [NSString stringWithFormat:@"UPDATE CHAT_ROOMS SET NEW_CHAT = 0 WHERE ROOM_NO=%@;",  roomNo];
               [self crudStatement:self.DBPath :sqlString2];
            }
         } else {
            //NSMutableString * contentStr = nil;
            NSString *sender = [NSString urlDecodeString:[aditInfoDic objectForKey:@"SENDER"]];
            //NSLog(@"rmq sender : %@", sender);
            NSString *sysMsgType = [aditInfoDic objectForKey:@"SYS_MSG_TY"];
            //NSLog(@"rmq sysMsgType : %@", sysMsgType);
            
            if([sysMsgType isEqualToString:@"ADD_USER"]){
               NSString *addSysMsg = [NSString stringWithFormat:@"%@님이 %@님을 초대했습니다.", sender, content];
               if([addSysMsg rangeOfString:@","].location != NSNotFound){
                  addSysMsg = [addSysMsg stringByReplacingOccurrencesOfString:@"," withString:@"님과 "];
               }
               //contentStr = [[NSMutableString alloc]initWithString:addSysMsg];
               content = [[NSMutableString alloc]initWithString:addSysMsg];
            } else {
               //DELETE_USER
               NSString *deleteSysMsg = [NSString stringWithFormat:@"%@님이 나갔습니다.", content];
               //contentStr = [[NSMutableString alloc]initWithString:deleteSysMsg];
               content = [[NSMutableString alloc]initWithString:deleteSysMsg];
            }
            //[userInfoDic setObject:contentStr forKey:@"CONTENT"];
            [userInfoDic setObject:content forKey:@"CONTENT"];
            
         }
         
         content = [content stringByReplacingOccurrencesOfString:@"'" withString:@"''"];
         
         //내가 보낸 메시지
         if([[NSString stringWithFormat:@"%@", userNo] isEqualToString:[NSString stringWithFormat:@"%@", _myUserNo]]){
            //선등록메시지(SENDING) 교체(SUCCEED)
            NSMutableDictionary *tmpDic = [NSMutableDictionary dictionary];
            [tmpDic setValue:tmpNo forKey:@"TMP_NO"];
            [tmpDic setValue:[NSNumber numberWithInteger:tmpIdx] forKey:@"TMP_IDX"];
            [tmpDic setValue:@"SUCCEED" forKey:@"TYPE"];
            [tmpDic setValue:tmpLocal forKey:@"LOCAL_CONTENT"];
            
            NSError *error;
            NSData *jsonData = [NSJSONSerialization dataWithJSONObject:tmpDic options:0 error:&error];
            NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
            
            [userInfoDic setObject:jsonString forKey:@"ADIT_INFO"];
            
            if([pushType isEqualToString:@"ADD_CHAT"]){
               if([contentType isEqualToString:@"LONG_TEXT"]){
                  NSString *sqlString = [NSString stringWithFormat:@"INSERT OR REPLACE INTO CHATS(CHAT_NO,ROOM_NO,USER_NO,CONTENT_TY,CONTENT,LOCAL_CONTENT,DATE,FILE_NM,ADIT_INFO,IS_READ,UNREAD_COUNT,CONTENT_PREV) VALUES (%@, %@, %@, '%@', '', '', '%@', '%@', '%@', 0, %@, '%@');", chatNo, roomNo, userNo, contentType, chatDate, fileName, jsonString, unRead, content];
                  [self crudStatement:self.DBPath :sqlString];
                  
               } else {
                  NSString *sqlString = [NSString stringWithFormat:@"INSERT OR REPLACE INTO CHATS(CHAT_NO,ROOM_NO,USER_NO,CONTENT_TY,CONTENT,LOCAL_CONTENT,DATE,FILE_NM,ADIT_INFO,IS_READ,UNREAD_COUNT,CONTENT_PREV) VALUES (%@, %@, %@, '%@', '%@', '', '%@', '%@', '%@', 0, %@, '');", chatNo, roomNo, userNo, contentType, content, chatDate, fileName, jsonString, unRead];
                  [self crudStatement:self.DBPath :sqlString];
               }
               
               NSDictionary *msgEditDic = [NSDictionary dictionary];
               int sendingArrIdx=0;
               //RMQ푸시받아서 선등록한 메시지 교체
               if(msgDataCnt > 0){
                  for(int i=0; i<self.sendingMsgArr.count; i++){
                     NSString *editInfo = [[self.sendingMsgArr objectAtIndex:i] objectForKey:@"ADIT_INFO"]; //메시지 데이터는 ADIT_INFO, 푸시 받은건 ADITINFO
                     NSData *jsonData = [editInfo dataUsingEncoding:NSUTF8StringEncoding];
                     NSDictionary *editDic = [NSJSONSerialization JSONObjectWithData:jsonData options:0 error:&error];
                     
                     NSString *editIdx = [editDic objectForKey:@"TMP_IDX"];
                     
                     //sendingMsgArr의 TMP_IDX와 푸시받은 데이터의 TMP_IDX가 같은지 비교
                     if(tmpIdx == [editIdx integerValue]){
                        //같으면 전체Array에서 TMP_IDX번째 데이터를 저장
                        msgEditDic = [self.msgData.chatArray objectAtIndex:[editIdx integerValue]];
                        sendingArrIdx = i;
                     }
                  }
                  
                  //전체Array의 TMP_IDX번째 데이터
                  NSString *msgEditInfo = [msgEditDic objectForKey:@"ADIT_INFO"];
                  if(msgEditInfo!=nil){
                     NSData *msgJsonData = [msgEditInfo dataUsingEncoding:NSUTF8StringEncoding];
                     NSDictionary *msgEditDic2 = [NSJSONSerialization JSONObjectWithData:msgJsonData options:0 error:&error];
                     NSString *msgEditIdx = [msgEditDic2 objectForKey:@"TMP_IDX"];
                     
                     //푸시 TMP_IDX와 전체Array의 TMP_IDX번째 데이터의 TMP_IDX가 같은지 비교
                     if(tmpIdx == [msgEditIdx integerValue]) {
                        NSString *logUserNo = [[self.msgData.chatArray objectAtIndex:[msgEditIdx integerValue]] objectForKey:@"USER_NO"];
                        
                        //전체Array의 TMP_IDX번째 데이터의 userNo, 내 userNo가 같은지 비교
                        if([[NSString stringWithFormat:@"%@", logUserNo] isEqualToString:[NSString stringWithFormat:@"%@", _myUserNo]]){
                           [self.msgData.chatArray replaceObjectAtIndex:[msgEditIdx integerValue] withObject:userInfoDic];
                           
                           NSIndexPath *reloadCell = [NSIndexPath indexPathForItem:[msgEditIdx integerValue] inSection:0];
                           [self.tableView beginUpdates];
                           [self.tableView reloadRowsAtIndexPaths:@[reloadCell] withRowAnimation:UITableViewRowAnimationNone];
                           [self.tableView endUpdates];
                           
                           NSLog(@"4.테이블 갱신");
                           
                           [self.msgData.chatArray removeObjectAtIndex:[msgEditIdx integerValue]];
                           [self.msgData.chatArray insertObject:userInfoDic atIndex:(msgDataCnt-1)-(count+self.sendingMsgArr.count-1)];
                           
                           [self scrollToBottomAnimated:YES]; //채팅 빨리 보냈을 때 위로 올라가는게 완화됨
                           
                           //NSIndexPath *lastCell = [NSIndexPath indexPathForItem:(msgDataCnt-1)-(count+self.sendingMsgArr.count-1) inSection:0];
                           //[self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:YES];
                           
                        } else {
                           for(int i=(int)msgDataCnt-1; i>=0; i--){
                              NSString *msgEditInfo = [[self.msgData.chatArray objectAtIndex:i] objectForKey:@"ADIT_INFO"];
                              NSData *msgJsonData = [msgEditInfo dataUsingEncoding:NSUTF8StringEncoding];
                              NSDictionary *msgEditDic = [NSJSONSerialization JSONObjectWithData:msgJsonData options:0 error:&error];
                              NSString *msgEditTy = [msgEditDic objectForKey:@"TYPE"];
                              NSString *msgTmpIdx = [msgEditDic objectForKey:@"TMP_IDX"];
                              
                              //전체 Array 역순으로 돌면서 SENDING이고 푸시 TMP_IDX와 전체Array의 TMP_IDX가 같은것을 찾음
                              if([msgEditTy isEqualToString:@"SENDING"] && tmpIdx == [msgTmpIdx integerValue]){
                                 NSString *logUserNo = [[self.msgData.chatArray objectAtIndex:i] objectForKey:@"USER_NO"];
                                 
                                 //찾은 Array의 userNo, 내 userNo가 같은지 비교
                                 if([[NSString stringWithFormat:@"%@", logUserNo] isEqualToString:[NSString stringWithFormat:@"%@", _myUserNo]]){
                                    [self.msgData.chatArray replaceObjectAtIndex:i withObject:userInfoDic];
                                    
                                    NSIndexPath *reloadCell = [NSIndexPath indexPathForItem:i inSection:0];
                                    [self.tableView beginUpdates];
                                    [self.tableView reloadRowsAtIndexPaths:@[reloadCell] withRowAnimation:UITableViewRowAnimationNone];
                                    [self.tableView endUpdates];
                                    NSLog(@"4.테이블 갱신(전체)");
                                    
                                    [self scrollToBottomAnimated:YES];
                                    
                                    //NSLog(@"5.데이터 삭제(전체) : %@ / %@ / %@ / %@ / %@ ", logUserNo, logConTy, logCon, logDate, logAdit);
                                    [self.msgData.chatArray removeObjectAtIndex:i];
                                    [self.msgData.chatArray insertObject:userInfoDic atIndex:(msgDataCnt-1)-(count+self.sendingMsgArr.count-1)];
                                    
                                 }
                                 break;
                              }
                           }
                        }
                        
                     } else {
                        //푸시 TMP_IDX와 전체Array의 TMP_IDX번째 데이터의 TMP_IDX가 다르면
                        for(int i=(int)msgDataCnt-1; i>=0; i--){
                           NSString *msgEditInfo = [[self.msgData.chatArray objectAtIndex:i] objectForKey:@"ADIT_INFO"];
                           NSData *msgJsonData = [msgEditInfo dataUsingEncoding:NSUTF8StringEncoding];
                           NSDictionary *msgEditDic = [NSJSONSerialization JSONObjectWithData:msgJsonData options:0 error:&error];
                           NSString *msgEditTy = [msgEditDic objectForKey:@"TYPE"];
                           NSString *msgTmpIdx = [msgEditDic objectForKey:@"TMP_IDX"];
                           
                           //전체 Array 역순으로 돌면서 SENDING이고 푸시 TMP_IDX와 전체Array의 TMP_IDX가 같은것을 찾음
                           if([msgEditTy isEqualToString:@"SENDING"] && tmpIdx == [msgTmpIdx integerValue]){
                              NSString *logUserNo = [[self.msgData.chatArray objectAtIndex:i] objectForKey:@"USER_NO"];
                              
                              //찾은 Array의 userNo, 내 userNo가 같은지 비교
                              if([[NSString stringWithFormat:@"%@", logUserNo] isEqualToString:[NSString stringWithFormat:@"%@", _myUserNo]]){
                                 [self.msgData.chatArray replaceObjectAtIndex:i withObject:userInfoDic];
                                 //NSLog(@"3.데이터 교체(전체) (%d) : %@", i, userInfoDic);
                                 
                                 NSIndexPath *reloadCell = [NSIndexPath indexPathForItem:i inSection:0];
                                 [self.tableView beginUpdates];
                                 [self.tableView reloadRowsAtIndexPaths:@[reloadCell] withRowAnimation:UITableViewRowAnimationNone];
                                 [self.tableView endUpdates];
                                 NSLog(@"4.테이블 갱신(전체)");
                                 
                                 [self scrollToBottomAnimated:YES];
                                 
                                 //NSLog(@"5.데이터 삭제(전체) : %@ / %@ / %@ / %@ / %@ ", logUserNo, logConTy, logCon, logDate, logAdit);
                                 [self.msgData.chatArray removeObjectAtIndex:i];
                                 [self.msgData.chatArray insertObject:userInfoDic atIndex:(msgDataCnt-1)-(count+self.sendingMsgArr.count-1)];
                              }
                              break;
                           }
                        }
                     }
                     
                     
                     
                     //NSLog(@"9.SendingArr 삭제 : %@", [self.sendingMsgArr objectAtIndex:sendingArrIdx]);
                     [self.sendingMsgArr removeObjectAtIndex:sendingArrIdx];
                     
                     NSLog(@"========================================================");
                  }
                  
               } else {
                  [self.msgData.chatArray addObject:userInfoDic];
               }
               
            } else if([pushType isEqualToString:@"ADD_CHAT_USER"]){
               NSLog(@"[noti_Chat] : ADD_CHAT_USER");
               
            } else if([pushType isEqualToString:@"CREATE_CHAT_ROOM"]){
               NSLog(@"[noti_Chat] : CREATE_CHAT_ROOM");
               
            } else{
               
            }
            
            if(appDelegate.isChatViewing) [self callChatReadStatus];
            
         } else {
            //받은 메시지
            
            if([contentType isEqualToString:@"LONG_TEXT"]){
               NSString *sqlString = [NSString stringWithFormat:@"INSERT OR REPLACE INTO CHATS(CHAT_NO,ROOM_NO,USER_NO,CONTENT_TY,CONTENT,LOCAL_CONTENT,DATE,FILE_NM,ADIT_INFO,IS_READ,UNREAD_COUNT,CONTENT_PREV) VALUES (%@, %@, %@, '%@', '', '', '%@', '%@', '%@', 0, %@, '%@');", chatNo, roomNo, userNo, contentType, chatDate, fileName, fileThumb, unRead, content];
               [self crudStatement:self.DBPath :sqlString];
               
            } else {
               NSString *sqlString = [NSString stringWithFormat:@"INSERT OR REPLACE INTO CHATS(CHAT_NO,ROOM_NO,USER_NO,CONTENT_TY,CONTENT,LOCAL_CONTENT,DATE,FILE_NM,ADIT_INFO,IS_READ,UNREAD_COUNT,CONTENT_PREV) VALUES (%@, %@, %@, '%@', '%@', '', '%@', '%@', '%@', 0, %@, '');", chatNo, roomNo, userNo, contentType, content, chatDate, fileName, fileThumb, unRead];
               [self crudStatement:self.DBPath :sqlString];
            }
            NSLog(@"2.받은메시지 DB저장 : %@ / %@", content, chatDate);
            
            NSError *error;
            NSData *jsonData = [NSJSONSerialization dataWithJSONObject:aditInfoDic options:0 error:&error];
            NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
            [userInfoDic setObject:jsonString forKey:@"ADIT_INFO"];
            
            [self.msgData.chatArray insertObject:userInfoDic atIndex:msgDataCnt-(count+self.sendingMsgArr.count)];
            NSLog(@"3.받은메시지 데이터 추가 (%lu) : %@ ", msgDataCnt-(count+self.sendingMsgArr.count), userInfoDic);
            
            NSIndexPath *lastCell = [NSIndexPath indexPathForItem:msgDataCnt inSection:0];
            [self.tableView beginUpdates];
            [self.tableView insertRowsAtIndexPaths:@[lastCell] withRowAnimation:UITableViewRowAnimationNone];
            [self.tableView endUpdates];
            
            NSLog(@"4.받은메시지 테이블 갱신");
            NSLog(@"========================================================");
            
            //받은메시지 등록될 때 읽음처리
            if(appDelegate.isChatViewing) [self callChatReadStatus];
            
            CGRect rectOfCellInTableView = [self.tableView rectForRowAtIndexPath:lastCell];
            CGRect rectOfCellInSuperview = [self.tableView convertRect: rectOfCellInTableView toView: self.tableView.superview];
            
            int rectSuperview = rectOfCellInSuperview.origin.y;
            int toolbarY = self.inputToolbar.frame.origin.y;
            
            if(rectSuperview > toolbarY){
               NSArray *subviewArray = [[NSBundle mainBundle] loadNibNamed:@"ChatToastView" owner:self options:nil];
               self.toastView = [subviewArray objectAtIndex:0];
               [self.toastView setFrame:CGRectMake(0, self.inputToolbar.frame.origin.y-60, self.tableView.frame.size.width, 60)];
               
               self.dbHelper = [[MFDBHelper alloc]init];
               UIImage *image = [self imageByScalingAndCroppingForSize:CGSizeMake(50, 50) :[self.dbHelper saveThumbImage:@"profile" :profileImg]];
               
               self.toastView.imgView.image = image; //[UIImage imageNamed:@"profile_default.png"];
               if([contentType isEqualToString:@"TEXT"]||[contentType isEqualToString:@"LONG_TEXT"]){
                  self.toastView.contentLabel.text = content;
               } else if([contentType isEqualToString:@"IMG"]){
                  NSRange range = [content rangeOfString:@"." options:NSBackwardsSearch];
                  NSString *fileExt = [[content substringFromIndex:range.location+1] lowercaseString];
                  
                  if([fileExt isEqualToString:@"png"] || [fileExt isEqualToString:@"jpg"] || [fileExt isEqualToString:@"jpeg"]||[fileExt isEqualToString:@"heic"]){
                     self.toastView.contentLabel.text = @"사진";
                  } else{
                     self.toastView.contentLabel.text = @"동영상";
                  }
               } else if([contentType isEqualToString:@"FILE"]){
                  self.toastView.contentLabel.text = @"파일";
                  
               } else if([contentType isEqualToString:@"INVITE"]){
                  self.toastView.contentLabel.text = @"초대";
               } else {
                  self.toastView.contentLabel.text = content;
               }
               
               self.toastView.userLabel.text = userName;
               
               UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapOnToastView:)];
               [self.toastView addGestureRecognizer:tap];
               [self.toastView setUserInteractionEnabled:YES];
               
               for(UIView *subview in [self.view subviews]) {
                  if([subview isKindOfClass:[self.toastView class]]) {
                     [subview removeFromSuperview];
                  }
               }
               [self.view addSubview:self.toastView];
               
            } else {
               
               NSIndexPath *lastCell2 = [NSIndexPath indexPathForRow:([self.tableView numberOfRowsInSection:0]-1) inSection:0];
               [self.tableView scrollToRowAtIndexPath:lastCell2 atScrollPosition:UITableViewScrollPositionBottom animated:YES];
               
               
            }
         }
         
      } else {
         NSLog(@"다른방메시지도착2");
         
         if(![[NSString stringWithFormat:@"%@", userNo] isEqualToString:[NSString stringWithFormat:@"%@", _myUserNo]]){
            //NSLog(@"userNo : %@, _myUserNo :%@", userNo, _myUserNo);
            if([contentType isEqualToString:@"LONG_TEXT"]){
               NSString *sqlString = [NSString stringWithFormat:@"INSERT INTO CHATS(CHAT_NO,ROOM_NO,USER_NO,CONTENT_TY,CONTENT,LOCAL_CONTENT,DATE,FILE_NM,ADIT_INFO,IS_READ,UNREAD_COUNT,CONTENT_PREV) VALUES (%@, %@, %@, '%@', '', '', '%@', '%@', '%@', 0, %@, '%@');", chatNo, roomNo, userNo, contentType, chatDate, fileName, fileThumb, unRead, content];
               [self crudStatement:self.DBPath :sqlString];
               
            } else {
               NSString *sqlString = [NSString stringWithFormat:@"INSERT INTO CHATS(CHAT_NO,ROOM_NO,USER_NO,CONTENT_TY,CONTENT,LOCAL_CONTENT,DATE,FILE_NM,ADIT_INFO,IS_READ,UNREAD_COUNT,CONTENT_PREV) VALUES (%@, %@, %@, '%@', '%@', '', '%@', '%@', '%@', 0, %@, '');", chatNo, roomNo, userNo, contentType, content, chatDate, fileName, fileThumb, unRead];
               [self crudStatement:self.DBPath :sqlString];
            }
            
            if(![contentType isEqualToString:@"SYS"]){
               NSString *sqlString2 = [NSString stringWithFormat:@"UPDATE CHAT_ROOMS SET NEW_CHAT = 1 WHERE ROOM_NO=%@;", roomNo];
               [self crudStatement:self.DBPath :sqlString2];
            }
         } else {
            if([contentType isEqualToString:@"LONG_TEXT"]){
               NSString *sqlString = [NSString stringWithFormat:@"INSERT INTO CHATS(CHAT_NO,ROOM_NO,USER_NO,CONTENT_TY,CONTENT,LOCAL_CONTENT,DATE,FILE_NM,ADIT_INFO,IS_READ,UNREAD_COUNT,CONTENT_PREV) VALUES (%@, %@, %@, '%@', '', '', '%@', '%@', '%@', 1, %@, '%@');", chatNo, roomNo, userNo, contentType, chatDate, fileName, fileThumb, unRead, content];
               [self crudStatement:self.DBPath :sqlString];
               
            } else {
               NSString *sqlString = [NSString stringWithFormat:@"INSERT INTO CHATS(CHAT_NO,ROOM_NO,USER_NO,CONTENT_TY,CONTENT,LOCAL_CONTENT,DATE,FILE_NM,ADIT_INFO,IS_READ,UNREAD_COUNT,CONTENT_PREV) VALUES (%@, %@, %@, '%@', '%@', '', '%@', '%@', '%@', 1, %@, '');", chatNo, roomNo, userNo, contentType, content, chatDate, fileName, fileThumb, unRead];
               [self crudStatement:self.DBPath :sqlString];
            }
         }
      }
      //[self scrollToBottomAnimated:YES];
      
      //NSLog(@"isViewing : %d", isViewing);
      //NSLog(@"chatviewcontroller ischatviewing : %d", appDelegate.isChatViewing);
      //if(appDelegate.isChatViewing) [self callChatReadStatus];
      
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
   
}

- (void)noti_APNS_ChatReadPush:(NSNotification *)notification {
   NSLog(@"noti_APNS_ChatReadPush userInfo : %@", notification.userInfo);
   NSUInteger msgDataCnt = self.msgData.chatArray.count;
   
   @try{
      NSString *roomNo = [notification.userInfo objectForKey:@"ROOM_NO"];
      NSArray *dataSet = [notification.userInfo objectForKey:@"DATASET"];
      self.roomNo = roomNo;
      
      for(int i=0; i<dataSet.count; i++){
         NSString *chatNoList = [NSString urlDecodeString:[[dataSet objectAtIndex:i] objectForKey:@"CHAT_NO_LIST"]];
         NSNumber *unreadCnt = [[dataSet objectAtIndex:i] objectForKey:@"UNREAD_COUNT"];
         
         NSMutableArray *chatNoArr = [NSMutableArray array];
         if([chatNoList rangeOfString:@","].location != NSNotFound){
            chatNoArr = [[chatNoList componentsSeparatedByString:@","] mutableCopy];
         } else {
            [chatNoArr addObject:chatNoList];
         }
         
         NSLog(@"noti_APNS_ChatReadPush chatNoArr : %@", chatNoArr);
         if([[NSString stringWithFormat:@"%@", roomNo] isEqualToString:[NSString stringWithFormat:@"%@", self.roomNo]]){
            for(int i=0; i<msgDataCnt; i++){
               NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:i];
               NSString *chatNo = [msgDict objectForKey:@"CHAT_NO"];
               
               for(int j=0; j<chatNoArr.count; j++){
                  NSString *chatNo2 = [chatNoArr objectAtIndex:j];
                  if([chatNo integerValue] == [chatNo2 integerValue]){
                     [msgDict setValue:unreadCnt forKey:@"UNREAD_COUNT"];
                     
                     //NSLog(@"unRead msgDict : %@", msgDict);
                     NSIndexPath *replaceCell = [NSIndexPath indexPathForItem:i inSection:0];
                     [self.tableView beginUpdates];
                     [self.tableView reloadRowsAtIndexPaths:@[replaceCell] withRowAnimation:UITableViewRowAnimationNone];
                     [self.tableView endUpdates];
                  }
               }
            }
         }
      }
      [[NSNotificationCenter defaultCenter] removeObserver:self name:@"noti_APNS_ChatReadPush" object:nil];
      
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (void)noti_ChatReadPush:(NSNotification *)notification {
   NSLog(@"noti_ChatReadPush userInfo : %@", notification.userInfo);
   NSUInteger msgDataCnt = self.msgData.chatArray.count;
   
   @try{
      NSString *roomNo = [notification.userInfo objectForKey:@"ROOM_NO"];
      NSArray *dataSet = [notification.userInfo objectForKey:@"DATASET"];
      self.roomNo = roomNo;
      
      for(int i=0; i<dataSet.count; i++){
         NSString *chatNoList = [NSString urlDecodeString:[[dataSet objectAtIndex:i] objectForKey:@"CHAT_NO_LIST"]];
         NSNumber *unreadCnt = [[dataSet objectAtIndex:i] objectForKey:@"UNREAD_COUNT"];
         
         //NSString *sqlString = [NSString stringWithFormat:@"UPDATE CHATS SET UNREAD_COUNT = %@ WHERE ROOM_NO=%@ AND CHAT_NO IN (%@);", unreadCnt, roomNo, chatNoList];
         //[self crudStatement:self.DBPath :sqlString];
         
         NSMutableArray *chatNoArr = [NSMutableArray array];
         if([chatNoList rangeOfString:@","].location != NSNotFound){
            chatNoArr = [[chatNoList componentsSeparatedByString:@","] mutableCopy];
         } else {
            [chatNoArr addObject:chatNoList];
         }
         
         NSLog(@"chatNoArr : %@", chatNoArr);
         if([[NSString stringWithFormat:@"%@", roomNo] isEqualToString:[NSString stringWithFormat:@"%@", self.roomNo]]){
            for(int i=0; i<msgDataCnt; i++){
               NSDictionary *msgDict = [self.msgData.chatArray objectAtIndex:i];
               NSString *chatNo = [msgDict objectForKey:@"CHAT_NO"];
               
               for(int j=0; j<chatNoArr.count; j++){
                  NSString *chatNo2 = [chatNoArr objectAtIndex:j];
                  if([chatNo integerValue] == [chatNo2 integerValue]){
                     [msgDict setValue:unreadCnt forKey:@"UNREAD_COUNT"];
                     
                     //NSLog(@"unRead msgDict : %@", msgDict);
                     NSIndexPath *replaceCell = [NSIndexPath indexPathForItem:i inSection:0];
                     [self.tableView beginUpdates];
                     [self.tableView reloadRowsAtIndexPaths:@[replaceCell] withRowAnimation:UITableViewRowAnimationNone];
                     [self.tableView endUpdates];
                  }
               }
            }
            
            [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_ChangeChatBadge" object:nil userInfo:nil];
         }
      }
      
   } @catch (NSException *exception) {
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

-(void)chatReadTest{
   NSLog(@"chatReadTest self.msgData.chatArray.count : %lu", (unsigned long)self.msgData.chatArray.count);
}

- (void)applicationDidBecomeActive:(NSNotification *)notification {
   NSLog(@"%s",__func__);
   isViewing = YES;
   appDelegate.isChatViewing = YES;
}

- (void)applicationDidEnterBackground:(NSNotification *)notification {
   NSLog(@"%s",__func__);
   isViewing = NO;
   appDelegate.isChatViewing = NO;
}

- (void)getImageNotification:(NSNotification *)notification {
   //NSLog(@"%s", __func__);
   self.imageArray = [notification.userInfo objectForKey:@"IMG_LIST"];
   //NSLog(@"self.imageArray : %@", self.imageArray);
   isViewing = YES;
   [[NSNotificationCenter defaultCenter] removeObserver:self name:@"getImageNotification" object:nil];
   [self saveAttachedFile:notification.userInfo];
}

#pragma mark - MediaButton events
- (void)cameraAccessCheck {
   //NSLog(@"%s", __func__);
   int osVer = [[UIDevice currentDevice].systemVersion floatValue];
   //NSLog(@"OS VER : %d", osVer);
   [self photoAccessCheck:@"CAMERA"];
   
   AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];
   if(status == AVAuthorizationStatusAuthorized) {
      //NSLog(@"AVAuthorizationStatusAuthorized status : %ld", (long)status);
      NSLog(@"카메라 접근 허용일 경우");
      dispatch_async(dispatch_get_main_queue(), ^{
         UIViewController *top = [UIApplication sharedApplication].keyWindow.rootViewController;
         self.attachView.picker = [[UIImagePickerController alloc] init];
         self.attachView.picker.delegate = self;
         self.attachView.picker.sourceType = UIImagePickerControllerSourceTypeCamera;
         
         /*
          비디오촬영
          NSArray *availableMediaTypes = [UIImagePickerController availableMediaTypesForSourceType: UIImagePickerControllerSourceTypeCamera];
          NSMutableArray *mediaTypes = [NSMutableArray arrayWithArray:availableMediaTypes];
          if (_maximumNumberOfSelectionMedia == 0) {
          if (_maximumNumberOfSelectionPhoto == 0)
          [mediaTypes removeObject:@"public.image"];
          else if (_maximumNumberOfSelectionVideo == 0)
          [mediaTypes removeObject:@"public.movie"];
          }
          self.attachView.picker.mediaTypes = mediaTypes;
          */
         
         [top presentViewController:self.attachView.picker animated:YES completion:NULL];
      });
      
   } else if(status == AVAuthorizationStatusDenied) {
      //NSLog(@"AVAuthorizationStatusDenied status : %ld", (long)status);
      NSLog(@"카메라 접근 허용되지않았을 경우");
      if(osVer >= 8){
         UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 카메라]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
         UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                          handler:^(UIAlertAction * action) {
                                                             NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                             [[UIApplication sharedApplication] openURL:url];
                                                             
                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                          }];
         
         UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                              handler:^(UIAlertAction * action) {
                                                                 [alert dismissViewControllerAnimated:YES completion:nil];
                                                              }];
         [alert addAction:okButton];
         [alert addAction:cancelButton];
         [self presentViewController:alert animated:YES completion:nil];
         
      } else {
         UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 카메라]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
         UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                          handler:^(UIAlertAction * action) {
                                                             NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                             [[UIApplication sharedApplication] openURL:url];
                                                             
                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                          }];
         
         UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                              handler:^(UIAlertAction * action) {
                                                                 [alert dismissViewControllerAnimated:YES completion:nil];
                                                              }];
         [alert addAction:okButton];
         [alert addAction:cancelButton];
         [self presentViewController:alert animated:YES completion:nil];
      }
      
   } else if(status == AVAuthorizationStatusNotDetermined){ // not determined
      //NSLog(@"AVAuthorizationStatusNotDetermined status : %ld", (long)status);
      [AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted) {
         if(granted){ // Access has been granted ..do something
            dispatch_async(dispatch_get_main_queue(), ^{
               UIViewController *top = [UIApplication sharedApplication].keyWindow.rootViewController;
               self.attachView.picker = [[UIImagePickerController alloc] init];
               self.attachView.picker.delegate = self;
               self.attachView.picker.sourceType = UIImagePickerControllerSourceTypeCamera;
               [top presentViewController:self.attachView.picker animated:YES completion:NULL];
            });
            
         } else { // Access denied ..do something
            NSLog(@"허용안함?");
            if(osVer >= 8){
               UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 카메라]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
               UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                handler:^(UIAlertAction * action) {
                                                                   NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                   [[UIApplication sharedApplication] openURL:url];
                                                                   
                                                                   [alert dismissViewControllerAnimated:YES completion:nil];
                                                                }];
               
               UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                    handler:^(UIAlertAction * action) {
                                                                       [alert dismissViewControllerAnimated:YES completion:nil];
                                                                    }];
               [alert addAction:okButton];
               [alert addAction:cancelButton];
               [self presentViewController:alert animated:YES completion:nil];
               
            } else {
               UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 카메라]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
               UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                handler:^(UIAlertAction * action) {
                                                                   NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                   [[UIApplication sharedApplication] openURL:url];
                                                                   
                                                                   [alert dismissViewControllerAnimated:YES completion:nil];
                                                                }];
               
               UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                    handler:^(UIAlertAction * action) {
                                                                       [alert dismissViewControllerAnimated:YES completion:nil];
                                                                    }];
               [alert addAction:okButton];
               [alert addAction:cancelButton];
               [self presentViewController:alert animated:YES completion:nil];
            }
            
         }
      }];
   } else {
      NSLog(@"status : %ld", (long)status);
   }
}

- (void)photoAccessCheck :(NSString *)mediaType{
   //NSLog(@"%s", __func__);
   int osVer = [[UIDevice currentDevice].systemVersion floatValue];
   PHAuthorizationStatus photoStatus = [PHPhotoLibrary authorizationStatus];
   
   if (photoStatus == PHAuthorizationStatusAuthorized) {
      //NSLog(@"Access has been granted.");
      if([mediaType isEqualToString:@"PHOTO"]){
         imgCnt=0;
         [self performSegueWithIdentifier:@"CHAT_PHLIB_MODAL" sender:@"PHOTO"];
      }
      
   } else if (photoStatus == PHAuthorizationStatusDenied) {
      //NSLog(@"Access has been denied.");
      if(osVer >= 8){
         UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 사진]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
         UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                          handler:^(UIAlertAction * action) {
                                                             NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                             [[UIApplication sharedApplication] openURL:url];
                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                          }];
         
         UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                              handler:^(UIAlertAction * action) {
                                                                 [alert dismissViewControllerAnimated:YES completion:nil];
                                                              }];
         [alert addAction:okButton];
         [alert addAction:cancelButton];
         [self presentViewController:alert animated:YES completion:nil];
         
      } else {
         UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 사진]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
         UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                          handler:^(UIAlertAction * action) {
                                                             NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                             [[UIApplication sharedApplication] openURL:url];
                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                          }];
         
         UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                              handler:^(UIAlertAction * action) {
                                                                 [alert dismissViewControllerAnimated:YES completion:nil];
                                                              }];
         [alert addAction:okButton];
         [alert addAction:cancelButton];
         [self presentViewController:alert animated:YES completion:nil];
      }
      
   } else if (photoStatus == PHAuthorizationStatusNotDetermined) {
      [PHPhotoLibrary requestAuthorization:^(PHAuthorizationStatus status) {
         if (status == PHAuthorizationStatusAuthorized) {
            NSLog(@"1 StatusNotDetermined Access has been granted.");
            if([mediaType isEqualToString:@"PHOTO"]){
               dispatch_async(dispatch_get_main_queue(), ^{
                  [self performSegueWithIdentifier:@"CHAT_PHLIB_MODAL" sender:@"PHOTO"];
               });
            }
            
         } else {
            NSLog(@"2 StatusNotDetermined Access has been granted.");
         }
      }];
   } else if (photoStatus == PHAuthorizationStatusRestricted) {
      NSLog(@"Restricted access - normally won't happen.");
   }
   
   return;
}

- (void)cameraButtonPressed:(id)sender
{
   [self cameraAccessCheck];
   if(_isFlag){ //미디어버튼
      UIImage *accessoryImage = [UIImage imageNamed:@"btn_add.png"];
      UIImage *normalImage = [accessoryImage jsq_imageMaskedWithColor:[UIColor lightGrayColor]];
      [_mediaButton setImage:normalImage forState:UIControlStateNormal];
      
      _mediaButton.contentMode = UIViewContentModeScaleAspectFit;
      _mediaButton.backgroundColor = [UIColor clearColor];
      
      self.inputToolbar.contentView.textView.inputView = nil;
      //[self.inputToolbar.contentView.textView reloadInputViews];
      
      _isFlag = false;
   }
}

- (void)photoButtonPressed:(id)sender
{
   [self photoAccessCheck:@"PHOTO"];
   if(_isFlag){ //미디어버튼
      UIImage *accessoryImage = [UIImage imageNamed:@"btn_add.png"];
      UIImage *normalImage = [accessoryImage jsq_imageMaskedWithColor:[UIColor lightGrayColor]];
      [_mediaButton setImage:normalImage forState:UIControlStateNormal];
      
      _mediaButton.contentMode = UIViewContentModeScaleAspectFit;
      _mediaButton.backgroundColor = [UIColor clearColor];
      
      self.inputToolbar.contentView.textView.inputView = nil;
      //[self.inputToolbar.contentView.textView reloadInputViews];
      
      _isFlag = false;
   }
}

- (void)videoButtonPressed:(id)sender
{
   UIAlertController * alert = [UIAlertController alertControllerWithTitle:@"" message:@"개발중인 기능입니다." preferredStyle:UIAlertControllerStyleAlert];
   
   [self presentViewController:alert animated:YES completion:nil];
   dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
      [alert dismissViewControllerAnimated:YES completion:nil];
   });
}

#pragma mark - UIImagePickerController Delegate
- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker{
   [picker dismissViewControllerAnimated:YES completion:nil];
}

- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *,id> *)info{
   //NSLog(@"imagePickerController info : %@",info);
   //NSLog(@"UIImagePickerControllerMediaMetadata : %@",[info objectForKey:UIImagePickerControllerMediaMetadata]);
   if ([[info objectForKey:UIImagePickerControllerMediaType] isEqualToString:@"public.movie"]) {
      NSURL *mediaUrl = [info objectForKey:UIImagePickerControllerMediaURL];
      [picker dismissViewControllerAnimated:YES completion:nil];
      UISaveVideoAtPathToSavedPhotosAlbum([mediaUrl path], self,
                                          @selector(video:didFinishSavingWithError:contextInfo:), nil);
   }else{
      UIImage *image = [info objectForKey:UIImagePickerControllerOriginalImage];
      [picker dismissViewControllerAnimated:YES completion:nil];
      
      //현중 촬영이미지 저장 X
      if([appDelegate.legacy_name isEqualToString:@"NONE"]){
         UIImageWriteToSavedPhotosAlbum(image, self, @selector(image:didFinishSavingWithError:contextInfo:), nil);
         
      } else if([appDelegate.legacy_name isEqualToString:@"ANYMATE"]){
         UIImageWriteToSavedPhotosAlbum(image, self, @selector(image:didFinishSavingWithError:contextInfo:), nil);
         
      } else if([appDelegate.legacy_name isEqualToString:@"HHI"]){
         [self image:image didFinishSavingWithError:nil contextInfo:nil];
      }
   }
}

- (void)video:(NSString *)videoPath didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo {
   if (error) {
      NSLog(@"error: %@", [error localizedDescription]);
   } else {
      NSLog(@"saved video videoPath");
   }
}

- (void)image:(UIImage *)image didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo{
   //NSLog(@"%s : %f %f",__FUNCTION__,image.size.width,image.size.height);
   if (error) {
      NSLog(@"error: %@", [error localizedDescription]);
   } else {
      NSLog(@"saved photo image : %@", image);
      isViewing = YES;
      appDelegate.isChatViewing = YES;
      
      //NSLog(@"image size w : %f, h : %f", image.size.width, image.size.height);
      
      UIImage *rotateImg = nil;
      if(image.size.width>image.size.height){
         rotateImg = [self rotateImage:image byOrientationFlag:image.imageOrientation];
      } else {
         rotateImg = [self rotateImage90:image];
      }
      
      NSString *getFileName = [self createFileName];
      //NSLog(@"getFileName : %@", getFileName);
      
      NSData *imageData = UIImageJPEGRepresentation(rotateImg, 0.1);
      
      NSString *tmpPath = NSTemporaryDirectory();
      NSString *imagePath = [tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"/%@",getFileName]];
      //NSLog(@"imagePath : %@", imagePath);
      [imageData writeToFile:imagePath atomically:YES];
      //NSLog(@"사진촬영 원본이미지 : %@", imagePath);
      
      NSMutableDictionary *imageInfoDic = [NSMutableDictionary dictionary];
      [imageInfoDic setObject:imagePath forKey:@"ADIT_INFO"];
      [imageInfoDic setObject:getFileName forKey:@"FILE_NM"];
      
      [self saveAttachedFile:imageInfoDic];
   }
}

#pragma mark - Image Library
- (NSArray *)getImageFilesInTextView{
   NSMutableArray *imagesArray = [[NSMutableArray alloc] init];
   [self.inputToolbar.contentView.textView.attributedText enumerateAttribute:NSAttachmentAttributeName
                                                                     inRange:NSMakeRange(0, [self.inputToolbar.contentView.textView.attributedText length])
                                                                     options:0
                                                                  usingBlock:^(id value, NSRange range, BOOL *stop)
    {
       if ([value isKindOfClass:[NSTextAttachment class]])
       {
          NSTextAttachment *attachment = (NSTextAttachment *)value;
          UIImage *image = nil;
          if ([attachment image])
             image = [attachment image];
          else
             image = [attachment imageForBounds:[attachment bounds]
                                  textContainer:nil
                                 characterIndex:range.location];
          
          if (image)
             [imagesArray addObject:image];
       }
    }];
   
   for (int i=0; i<self.contentImageArray.count; i++) {
      for (int j=0; j<imagesArray.count; j++) {
         if ([self.contentImageArray[i] isEqual:imagesArray[j]]) {
            [self.imageIndexArray addObject:[NSNumber numberWithInt:i]];
         }
      }
   }
   return self.imageIndexArray;
}

- (UIImage*)imageByScalingAndCroppingForSize:(CGSize)targetSize :(UIImage *)image
{
   UIImage *sourceImage = image;
   UIImage *newImage = nil;
   CGSize imageSize = sourceImage.size;
   CGFloat width = imageSize.width;
   CGFloat height = imageSize.height;
   CGFloat targetWidth = targetSize.width;
   CGFloat targetHeight = targetSize.height;
   CGFloat scaleFactor = 0.0;
   CGFloat scaledWidth = targetWidth;
   CGFloat scaledHeight = targetHeight;
   CGPoint thumbnailPoint = CGPointMake(0.0,0.0);
   
   if (CGSizeEqualToSize(imageSize, targetSize) == NO)
   {
      CGFloat widthFactor = targetWidth / width;
      CGFloat heightFactor = targetHeight / height;
      
      if (widthFactor > heightFactor)
         scaleFactor = widthFactor; // scale to fit height
      else
         scaleFactor = heightFactor; // scale to fit width
      scaledWidth  = width * scaleFactor;
      scaledHeight = height * scaleFactor;
      
      // center the image
      if (widthFactor > heightFactor)
      {
         thumbnailPoint.y = (targetHeight - scaledHeight) * 0.5;
      }
      else
         if (widthFactor < heightFactor)
         {
            thumbnailPoint.x = (targetWidth - scaledWidth) * 0.5;
         }
   }
   
   //UIGraphicsBeginImageContext(targetSize); // this will crop
   UIGraphicsBeginImageContextWithOptions(targetSize, NO, [UIScreen mainScreen].scale);
   
   CGRect thumbnailRect = CGRectZero;
   thumbnailRect.origin = thumbnailPoint;
   thumbnailRect.size.width  = scaledWidth;
   thumbnailRect.size.height = scaledHeight;
   
   [sourceImage drawInRect:thumbnailRect];
   
   newImage = UIGraphicsGetImageFromCurrentImageContext();
   if(newImage == nil)
      NSLog(@"could not scale image");
   
   //pop the context to get back to the default
   UIGraphicsEndImageContext();
   
   return newImage;
}

- (CGSize)targetSize {
   CGFloat scale = [UIScreen mainScreen].scale;
   CGSize targetSize = CGSizeMake(CGRectGetWidth(self.view.bounds) * scale, CGRectGetHeight(self.view.bounds) * scale);
   return targetSize;
}

- (UIImage *)getScaledImage:(UIImage *)image scaledToMaxWidth:(CGFloat)width {
   CGFloat oldWidth = image.size.width;
   CGFloat oldHeight = image.size.height;
   
   CGFloat scaleFactor=1;
   
   //if (oldWidth > width) {
   scaleFactor = width / oldWidth;
   //} else  //oldWidth<width and height==0이면, scale하지 않음.
   //    return image;
   
   CGFloat newHeight = oldHeight * scaleFactor;
   CGFloat newWidth = oldWidth * scaleFactor;
   CGSize newSize = CGSizeMake(newWidth, newHeight);
   
   //NSLog(@"oldWidth : %f, oldHeight : %f", oldWidth, oldHeight);
   //NSLog(@"newWidth : %f, newHeight : %f", newWidth, newHeight);
   
   UIGraphicsBeginImageContext(newSize);
   //UIGraphicsBeginImageContextWithOptions(newSize, NO, [UIScreen mainScreen].scale);
   [image drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)];
   UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
   UIGraphicsEndImageContext();
   
   return newImage;
}

- (UIImage *)getScaledImage:(UIImage *)image scaledToMaxWidth:(CGFloat)width maxHeight:(CGFloat)height {
   CGFloat oldWidth = image.size.width;
   CGFloat oldHeight = image.size.height;
   
   if (oldWidth < width && oldHeight < height)
      return image;
   
   CGFloat scaleFactorW =1;
   CGFloat scaleFactorH =1;
   
   if (oldWidth > width)
      scaleFactorW = width / oldWidth;
   if(oldHeight > height)
      scaleFactorH = height / oldHeight;
   
   CGFloat scaleFactor = (scaleFactorW<scaleFactorH)?scaleFactorW:scaleFactorH;
   
   
   CGFloat newHeight = oldHeight * scaleFactor;
   //CGFloat newWidth = oldWidth * scaleFactor;
   CGSize newSize = CGSizeMake(width, newHeight);
   
   UIGraphicsBeginImageContext(newSize);
   [image drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)];
   UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
   UIGraphicsEndImageContext();
   
   return newImage;
}


- (UIImage *)rotateImage90:(UIImage *)img
{
   //NSLog(@"rotateImage90:");
   
   CGImageRef          imgRef = img.CGImage;
   CGFloat             width = CGImageGetWidth(imgRef);
   CGFloat             height = CGImageGetHeight(imgRef);
   CGRect              bounds = CGRectMake(0, 0, width, height);
   CGFloat             boundHeight;
   
   boundHeight = bounds.size.height;
   bounds.size.height = bounds.size.width;
   bounds.size.width = boundHeight;
   
   CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
   NSUInteger bytesPerPixel = 4;
   NSUInteger bytesPerRow = bytesPerPixel * bounds.size.width;
   NSUInteger bitsPerComponent = 8;
   CGContextRef context = CGBitmapContextCreate(nil, bounds.size.width, bounds.size.height,
                                                bitsPerComponent, bytesPerRow, colorSpace,
                                                kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big);
   CGColorSpaceRelease(colorSpace);
   
   
   CGContextRotateCTM (context, DEGREES_TO_RADIANS(270));
   CGContextTranslateCTM (context, -width, 0);
   
   CGContextDrawImage(context, CGRectMake(0, 0, width, height), imgRef);
   CGImageRef newImage = CGBitmapContextCreateImage(context);
   CGContextRelease(context);
   UIImage *imageCopy = [UIImage imageWithCGImage:newImage];
   CFRelease(newImage);
   return imageCopy;
}

- (UIImage *)rotateImageReverse90:(UIImage *)img
{
   NSLog(@"rotateImageReverse90:");
   
   CGImageRef          imgRef = img.CGImage;
   CGFloat             width = CGImageGetWidth(imgRef);
   CGFloat             height = CGImageGetHeight(imgRef);
   CGRect              bounds = CGRectMake(0, 0, width, height);
   CGFloat             boundHeight;
   
   boundHeight = bounds.size.height;
   bounds.size.height = bounds.size.width;
   bounds.size.width = boundHeight;
   
   CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
   NSUInteger bytesPerPixel = 4;
   NSUInteger bytesPerRow = bytesPerPixel * bounds.size.width;
   NSUInteger bitsPerComponent = 8;
   CGContextRef context = CGBitmapContextCreate(nil, bounds.size.width, bounds.size.height,
                                                bitsPerComponent, bytesPerRow, colorSpace,
                                                kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big);
   CGColorSpaceRelease(colorSpace);
   
   CGContextRotateCTM (context, DEGREES_TO_RADIANS(90));
   CGContextTranslateCTM (context, 0, -height);
   
   CGContextDrawImage(context, CGRectMake(0, 0, width, height), imgRef);
   CGImageRef newImage = CGBitmapContextCreateImage(context);
   CGContextRelease(context);
   UIImage *imageCopy = [UIImage imageWithCGImage:newImage];
   CFRelease(newImage);
   return imageCopy;
}

#define DEGREES_TO_RADIANS(angle) ((angle) / 180.0 * M_PI)
- (UIImage *)rotateImage:(UIImage *)img byOrientationFlag:(UIImageOrientation)orient
{
   NSLog(@"ImageProcessUtil rotateImage");
   
   CGImageRef          imgRef = img.CGImage;
   CGFloat             width = CGImageGetWidth(imgRef);
   CGFloat             height = CGImageGetHeight(imgRef);
   CGRect              bounds = CGRectMake(0, 0, width, height);
   CGFloat             boundHeight;
   NSLog(@"rotate image size width=%f, height=%f, orientation=%ld", width, height, (long)orient);
   
   switch(orient) {
         
      case UIImageOrientationUp:
         break;
         
      case UIImageOrientationDown:
         break;
         
      case UIImageOrientationLeft:
         boundHeight = bounds.size.height;
         bounds.size.height = bounds.size.width;
         bounds.size.width = boundHeight;
         break;
         
      case UIImageOrientationRight:
         boundHeight = bounds.size.height;
         bounds.size.height = bounds.size.width;
         bounds.size.width = boundHeight;
         break;
         
      default:
         break;
   }
   CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
   NSUInteger bytesPerPixel = 4;
   NSUInteger bytesPerRow = bytesPerPixel * bounds.size.width;
   NSUInteger bitsPerComponent = 8;
   CGContextRef context = CGBitmapContextCreate(nil, bounds.size.width, bounds.size.height,
                                                bitsPerComponent, bytesPerRow, colorSpace,
                                                kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big);
   CGColorSpaceRelease(colorSpace);
   if (orient == UIImageOrientationRight) {
      CGContextRotateCTM (context, DEGREES_TO_RADIANS(270));
      CGContextTranslateCTM (context, -width, 0);
   }
   else if (orient == UIImageOrientationLeft) {
      CGContextRotateCTM (context, DEGREES_TO_RADIANS(90));
      CGContextTranslateCTM (context, 0, -height);
   }
   else if (orient == UIImageOrientationDown) {
      CGContextRotateCTM (context, DEGREES_TO_RADIANS(180));
      CGContextTranslateCTM (context, -width, -height);
   }
   else if (orient == UIImageOrientationUp) {
      // NOTHING
   }
   
   CGContextDrawImage(context, CGRectMake(0, 0, width, height), imgRef);
   CGImageRef newImage = CGBitmapContextCreateImage(context);
   CGContextRelease(context);
   UIImage *imageCopy = [UIImage imageWithCGImage:newImage];
   CFRelease(newImage);
   return imageCopy;
}


#pragma mark - Search Chat Content
- (void)searchChatContent:(NSString *)text{
   //NSLog(@"%s, text : %@", __func__, text);
   int searchCnt=0;
   NSUInteger msgDataCnt = self.msgData.chatArray.count;
   
   if(text!=nil && ![text isEqualToString:@""]){
      self.searchText = text;
      
      for(int i=0; i<msgDataCnt; i++){
         NSString *content = [NSString urlDecodeString:[[self.msgData.chatArray objectAtIndex:i] objectForKey:@"CONTENT"]];
         //if([text isEqualToString:content]){
         if([content rangeOfString:[NSString stringWithFormat:@"%@", text]].location != NSNotFound){
            searchCnt++;
         }
      }
      
      //NSLog(@"searchCnt : %d", searchCnt);
      if(searchCnt<1){
         UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"검색결과가 없습니다." preferredStyle:UIAlertControllerStyleAlert];
         UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                          handler:^(UIAlertAction * action) {
                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                             [self resignFirstResponder];
                                                          }];
         [alert addAction:okButton];
         [self presentViewController:alert animated:YES completion:nil];
      }
      [self.tableView reloadData];
   }
}

- (void)closeSearchChat{
   if(self.searchText!=nil && ![self.searchText isEqualToString:@""]){
      self.searchText = nil;
      [self.tableView reloadData];
   }
}

- (BOOL)isIphoneX {
   if (CGRectEqualToRect([UIScreen mainScreen].bounds,CGRectMake(0, 0, 375, 812))) {
      return YES;
   } else {
      return NO;
   }
}

#pragma mark - Keyboard events
- (void)keyboardWillAnimate:(NSNotification *)notification{
   CGRect keyboardBounds;
   [[notification.userInfo valueForKey:UIKeyboardFrameEndUserInfoKey] getValue:&keyboardBounds];
   NSNumber *duration = [notification.userInfo objectForKey:UIKeyboardAnimationDurationUserInfoKey];
   NSNumber *curve = [notification.userInfo objectForKey:UIKeyboardAnimationCurveUserInfoKey];
   
   keyboardBounds = [self.view convertRect:keyboardBounds toView:nil];
   [UIView beginAnimations:nil context:NULL];
   [UIView setAnimationDuration:[duration doubleValue]];
   [UIView setAnimationCurve:[curve intValue]];
   NSDictionary* info = [notification userInfo];
   //CGSize kbSize = [[info objectForKey:UIKeyboardFrameBeginUserInfoKey] CGRectValue].size;
   CGSize kbSize = [[info objectForKey:UIKeyboardFrameEndUserInfoKey] CGRectValue].size;
   //NSLog(@"kbSize : %f", kbSize.height);
   
   if (@available(iOS 11.0, *)) {
      kbSize.height = kbSize.height - self.view.safeAreaInsets.bottom;
   } else {
      kbSize.height = kbSize.height;
   }
   
   if(kbSize.height==199) kbSize.height = 257; //아이폰X에서만 키보드 이슈가 생겨서
   
   //NSLog(@"fromSegue : %@", self.fromSegue);
   if([self.fromSegue isEqualToString:@"SIDE_MENU_SEARCH"]) self.inputToolbar.hidden = YES;
   else self.inputToolbar.hidden = NO;
   
   if ([notification name]==UIKeyboardWillShowNotification) {
      self.keyboardHeight.constant = kbSize.height;
      
      //NSLog(@"self.tableView.contentOffset.y : %f", self.tableView.contentOffset.y);
      //NSLog(@"tableBottom : %f", tableBottom);
      
      if(msgDataCnt>0){
         if((int)self.tableView.contentOffset.y >= (int)tableBottom){
            //아래코드는 스크롤이 하단일 경우에만 사용, 스크롤 중간일때는 화면 내리지 않음
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
               NSInteger row = [self.tableView numberOfRowsInSection:0];
               NSIndexPath *indexPath = [NSIndexPath indexPathForRow:row-1 inSection:0];
               [self.tableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionBottom animated:YES];
            });
         }
      }
      [self.view layoutIfNeeded];
      
   } else if([notification name]==UIKeyboardWillHideNotification){
      self.keyboardHeight.constant = 0;
      
      if(msgDataCnt>0){
         if(self.tableView.contentOffset.y > tableBottom){
            //아래코드는 스크롤이 하단일 경우에만 사용, 스크롤 중간일때는 화면 내리지 않음
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
               NSInteger row = [self.tableView numberOfRowsInSection:0];
               NSIndexPath *indexPath = [NSIndexPath indexPathForRow:row-1 inSection:0];
               [self.tableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionBottom animated:YES];
            });
         }
      }
      [self.view layoutIfNeeded];
   }
   
   [UIView commitAnimations];
   self.fromSegue=nil;
}


- (void)scrollToBottomAnimated:(BOOL)animated {
   @try{
      if(self.msgData.chatArray.count > 0){
         //         NSInteger lastSection = [self.tableView numberOfSections]-1;
         //         NSInteger lastRow = [self.tableView numberOfRowsInSection:lastSection]-1;
         //         NSIndexPath *lastRowIndexPath =[NSIndexPath indexPathForRow:lastRow inSection:lastSection];
         //         [self.tableView selectRowAtIndexPath:lastRowIndexPath animated:YES scrollPosition:UITableViewScrollPositionBottom];
         //
         NSInteger row = [self.tableView numberOfRowsInSection:0];
         NSIndexPath *indexPath = [NSIndexPath indexPathForRow:row-1 inSection:0];
         //NSLog(@"indx : %@", indexPath);
         [self.tableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionBottom animated:YES];
         
      } else {
         return;
      }
   } @catch(NSException *exception){
      //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

//- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text {
//   NSUInteger textViewByte = [textView.text lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
//   NSUInteger textByte = [text lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
//
//   if (textViewByte + textByte > 5000){
//      NSLog(@"채팅 5000자 제한");
//      return NO;
//   }
//   return YES;
//}

#pragma mark - UIScrollView Delegate
- (NSMutableArray *) loadMessage{
   rowCnt += 20;
   return [self.msgData readFromDatabase:rowCnt];
}

- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate{
   /*if (scrollView.contentSize.height-scrollView.contentOffset.y>self.view.frame.size.height) {
    CGPoint offset = scrollView.contentOffset;
    
    if(offset.y < 0) {
    //데이터로드
    //NSLog(@"loadMessage : %@", [self loadMessage]);
    
    NSLog(@"tmpArr : %@", self.tmpArr);
    [self.tmpArr insertObject:[self loadMessage] atIndex:0];
    NSLog(@"self.tmpArr2 : %@", self.tmpArr);
    }
    }*/
   
   @try{
      CGRect screen = [[UIScreen mainScreen]bounds];
      CGFloat screenWidth = screen.size.width;
      CGFloat screenHeight = screen.size.height;
      if ([MFUtil retinaDisplayCapable]) {
         screenHeight = screenHeight*2;
         screenWidth = screenWidth*2;
      }
      int height = 270;
      
      NSArray *tmp = [MODEL_NAME componentsSeparatedByString:@" "];
      //NSLog(@"tmp : %@", tmp);
      if ([tmp[1] hasPrefix:@"5"]) {
         height = 370;
      }else if ([tmp[1] hasPrefix:@"6"] || [tmp[1] hasPrefix:@"7"] || [tmp[1] hasPrefix:@"8"] || [tmp[1] hasPrefix:@"X"]) {
         if (tmp.count==2) {
            height = 570;
         }else{
            height = 470;
         }
      }
      
      //      NSLog(@"scrollView.contentSize.height : %f", scrollView.contentSize.height);
      //      NSLog(@"scrollView.contentOffset.y : %f", scrollView.contentOffset.y);
      //      NSLog(@"self.tableView.frame.size.height : %f", self.tableView.frame.size.height);
      //      NSLog(@"self.toolbar : %f", self.inputToolbar.frame.origin.y);
      
      if (scrollView.contentSize.height-scrollView.contentOffset.y<self.tableView.frame.size.height) {
         for(UIView *subview in [self.view subviews]) {
            if([subview isKindOfClass:[self.toastView class]]) {
               [subview removeFromSuperview];
            }
         }
         
      } else {
         
      }
      
   } @catch(NSException *exception){
      [self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}

- (void)scrollViewDidScroll:(UIScrollView *)scrollView{
   @try{
      CGFloat scrollOffsetY = scrollView.contentOffset.y;
      //NSLog(@"scrollOffsetY : %f", scrollOffsetY);
      
      BOOL scOffset;
      if(@available(iOS 11, *)) {
         if(scrollOffsetY <= -REFRESH_HEADER_DEFAULT_HEIGHT) scOffset=true;
         else scOffset=false;
      } else {
         if(scrollOffsetY < -REFRESH_HEADER_DEFAULT_HEIGHT) scOffset=true;
         else scOffset=false;
      }
      
      if(scOffset){
         //if(scrollOffsetY == -REFRESH_HEADER_DEFAULT_HEIGHT) {
         //NSLog(@"chatArr Cnt : %lu", self.msgData.chatArray.count);
         //NSLog(@"loadMessage : %lu", (unsigned long)[self loadMessage].count);
         //[self loadMessage];
         
         loadMsgCnt = (int)[self loadMessage].count;
         //NSLog(@"loadMsgCnt : %d, rowCnt : %d", loadMsgCnt, rowCnt);
         scOffset = false;
         
         //이전메시지가 있을 때만 로드
         if(rowCnt < loadMsgCnt){
            //메시지로드 후 데이터사이즈에 맞게 스크롤위치 조정
            CGSize beforeContentSize = self.tableView.contentSize;
            [self.tableView reloadData];
            CGSize afterContentSize = self.tableView.contentSize;
            
            //NSLog(@"beforeContentSize : %f / afterContentSize : %f", beforeContentSize.height, afterContentSize.height);
            
            CGPoint afterContentOffset = self.tableView.contentOffset;
            CGPoint newContentOffset = CGPointMake(afterContentOffset.x, afterContentOffset.y + afterContentSize.height - beforeContentSize.height);
            self.tableView.contentOffset = newContentOffset;
         }
         
      } else {
         
      }
      
   } @catch(NSException *exception){
      [self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
   }
}


// 테이블뷰를 드래깅 할 때 호출
- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView
{
   if(isRefresh) {
      return ;
   }
   isDragging = YES;
}

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
   [[NSNotificationCenter defaultCenter] addObserver:self
                                            selector:@selector(getImageNotification:)
                                                name:@"getImageNotification"
                                              object:nil];
   
   if ([[segue identifier] isEqualToString:@"CHAT_PHLIB_MODAL"]) {
      UINavigationController *destination = segue.destinationViewController;
      PHLibListViewController *vc = [[destination childViewControllers] objectAtIndex:0];
      vc.fromSegue = segue.identifier;
      
   } /*else if ([segue.identifier isEqualToString:@"CHAT_PROFILE_MODAL"]) {
      self.dbHelper = [[MFDBHelper alloc]init];
      NSString *sqlString = [NSString stringWithFormat:@"SELECT ROOM_TYPE FROM CHAT_ROOMS WHERE ROOM_NO = %@", self.roomNo];
      NSMutableArray *selectArr = [self.dbHelper selectQuery:sqlString];
      NSString *roomType = [[selectArr objectAtIndex:0]objectForKey:@"ROOM_TYPE"];
      NSLog(@"roomType : %@", roomType);
      
      ProfileViewController *destination = segue.destinationViewController;
      destination.modalTransitionStyle = UIModalTransitionStyleCrossDissolve;
      
      NSDictionary *chatDic = sender;
      NSString *userNo = [chatDic objectForKey:@"USER_NO"];
      destination.userNo = userNo;
      destination.fromSegue = segue.identifier;
      destination.chatRoomTy = roomType;
      
      }*/ else if([segue.identifier isEqualToString:@"CHAT_FILE_OPEN_MODAL"]){
         //NSLog(@"sender : %@", sender);
         UINavigationController *destination = segue.destinationViewController;
         WebViewController *vc = [[destination childViewControllers] objectAtIndex:0];
         vc.fileUrl = sender;
         
      }
}

-(NSMutableAttributedString *)textGetRanges:(NSString *)text keyword:(NSString *)keyword {
   NSDictionary *attrs = @{ NSBackgroundColorAttributeName : [UIColor redColor], NSForegroundColorAttributeName : [UIColor whiteColor], NSFontAttributeName : [UIFont systemFontOfSize:13] };
   NSMutableAttributedString *rangeStr = [[NSMutableAttributedString alloc] initWithString:text];
   
   NSRange searchRange = NSMakeRange(0,text.length);
   NSRange foundRange;
   
   while (searchRange.location < text.length) {
      searchRange.length = text.length-searchRange.location;
      foundRange = [text rangeOfString:keyword options:NSCaseInsensitiveSearch range:searchRange];
      if (foundRange.location != NSNotFound) {
         searchRange.location = foundRange.location+foundRange.length;
         //[rangeStr addAttribute:NSBackgroundColorAttributeName value:[UIColor redColor] range:foundRange];
         [rangeStr addAttributes:attrs range:foundRange];
      } else {
         break;
      }
   }
   
   return rangeStr;
   
}

-(NSString *)checkDataNetwork{
   NSString *result;
   
   NSNumber *dataNetworkItemView = nil;
   NSArray *subviews = nil;
   id statusBar = [[UIApplication sharedApplication] valueForKey:@"statusBar"];
   
   if ([statusBar isKindOfClass:NSClassFromString(@"UIStatusBar_Modern")]) {
      subviews = [[[statusBar valueForKey:@"statusBar"] valueForKey:@"foregroundView"] subviews];
   } else {
      subviews = [[statusBar valueForKey:@"foregroundView"] subviews];
   }
   
   for (id subview in subviews) {
      if([subview isKindOfClass:[NSClassFromString(@"UIStatusBarDataNetworkItemView") class]]) {
         dataNetworkItemView = subview;
         break;
      }
   }
   
   switch ([[dataNetworkItemView valueForKey:@"dataNetworkType"]integerValue]) {
      case 0:
         NSLog(@"No wifi or cellular");
         break;
      case 1:
         NSLog(@"Cellular");
         result = @"Cellular";
         break;
      case 2:
         NSLog(@"Cellular");
         result = @"Cellular";
         break;
      case 3:
         NSLog(@"Cellular");
         result = @"Cellular";
         break;
      case 4:
         NSLog(@"Cellular");
         result = @"Cellular";
         break;
      case 5:
         NSLog(@"WIFI");
         result = @"WIFI";
         break;
      default:
         break;
   }
   
   return result;
}

-(void)checkDataNetwork:(int)type{
   [[AFNetworkReachabilityManager sharedManager] startMonitoring];
   [[AFNetworkReachabilityManager sharedManager] setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {
      if (status == AFNetworkReachabilityStatusNotReachable) {
         NSLog(@"네트워크 사용 할 수 없음");
         network = @"No wifi or cellular";
      } else if (status == AFNetworkReachabilityStatusUnknown){
         NSLog(@"네트워크 상태 알 수 없음");
         network = @"No wifi or cellular";
      } else {
         if (status == AFNetworkReachabilityStatusReachableViaWiFi) {
            NSLog(@"와이파이");
            network = @"WIFI";
         } else if (status == AFNetworkReachabilityStatusReachableViaWWAN){
            NSLog(@"3G/LTE 등 셀룰러 네트워크");
            network = @"Cellular";
         }
      }
   }];
}

-(void)sendToHilee:(NSString *)func :(NSException *)exception{
   UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:NSLocalizedString(@"exception_msg_exception", @"exception_msg_exception") preferredStyle:UIAlertControllerStyleAlert];
   UIAlertAction* sendButton = [UIAlertAction actionWithTitle:@"관리자에게 전송" style:UIAlertActionStyleDefault
                                                      handler:^(UIAlertAction * action) {
                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                         
                                                         UIDevice *device = [UIDevice currentDevice];
                                                         NSString *myUserNo = [[NSUserDefaults standardUserDefaults] objectForKey:@"CUSER_NO"];
                                                         NSString *dvcKind = [device modelName];
                                                         NSString *dvcVer = device.systemVersion;
                                                         
                                                         MFMessageComposeViewController *controller = [[MFMessageComposeViewController alloc] init];
                                                         if([MFMessageComposeViewController canSendText])
                                                         {
                                                            controller.body = [NSString stringWithFormat:@"%@ / %@ / %@ \n%@ \n\n%@", dvcKind, dvcVer, myUserNo, func, exception];
                                                            controller.recipients = [NSArray arrayWithObject:@"01093917822"];
                                                            controller.messageComposeDelegate = self;
                                                            [self presentViewController:controller animated:YES completion:nil];
                                                         }
                                                      }];
   
   UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                    handler:^(UIAlertAction * action) {
                                                       [alert dismissViewControllerAnimated:YES completion:nil];
                                                    }];
   
   [alert addAction:sendButton];
   [alert addAction:okButton];
   [self presentViewController:alert animated:YES completion:nil];
}

- (void)messageComposeViewController:(nonnull MFMessageComposeViewController *)controller didFinishWithResult:(MessageComposeResult)result {
   NSString *resultString;
   switch (result) {
      case MessageComposeResultCancelled:
         resultString = NSLocalizedString(@"cancel", @"");
         break;
         
      case MessageComposeResultFailed:
      {
         resultString = NSLocalizedString(@"fail", @"");
         break;
      }
         
      case MessageComposeResultSent:
         resultString = NSLocalizedString(@"success", @"");
         break;
         
      default:
         break;
   }
   [self dismissViewControllerAnimated:YES completion:^{
      NSLog(@"%s resultString : %@",__FUNCTION__,resultString);
   }];
}
@end


