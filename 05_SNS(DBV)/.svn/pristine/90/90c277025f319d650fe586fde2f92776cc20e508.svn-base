//  PostWriteTableViewController.m
//  mfinity_sns
//
//  Created by hilee on 2018. 10. 25..
//  Copyright © 2018년 com.dbvalley. All rights reserved.
//

#import "PostWriteTableViewController.h"
#import "PHLibListViewController.h"
#import "TeamListViewController.h"
#import "PostDetailViewController.h"
#import "MFStyle.h"
#import "SDImageCache.h"
#import "TextTableViewCell.h"
#import "ImageTableViewCell.h"

@interface PostWriteTableViewController () {
    UIImage *thumImage;
    AppDelegate *appDelegate;
    
    NSMutableArray *dataArr;
    
    float cursor;
    NSRange textRange;
    UITextView *currTextView;
    NSString *firstText;
    NSString *secondText;
    
    BOOL isSplit;
    BOOL isFirst;
    BOOL isSetScroll;
    
    int fileNameCnt;
}

@end

@implementation PostWriteTableViewController
#define DEGREES_TO_RADIANS(angle) ((angle) / 180.0 * M_PI)

- (void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:animated];
    
    appDelegate = (AppDelegate *)[UIApplication sharedApplication].delegate;
    
    NSLog(@"PostWriteTableViewController fromSegue : %@", self.fromSegue);
    
    self.navigationController.navigationBar.translucent = NO;
    self.navigationController.navigationBar.barTintColor = [MFUtil myRGBfromHex:@"1D4696"];
    self.navigationController.navigationBar.tintColor = [UIColor whiteColor];
    self.navigationItem.titleView = [MFStyle navigationTitleStyle1:self.snsName];
    
    if (self.navigationController.childViewControllers.count==1) {
        self.navigationItem.leftBarButtonItem =[[UIBarButtonItem alloc]initWithTitle:NSLocalizedString(@"msg24", @"")
                                                                               style:UIBarButtonItemStylePlain
                                                                              target:self
                                                                              action:@selector(leftSideMenuButtonPressed:)];
    }
    
    self.navigationItem.rightBarButtonItem =[[UIBarButtonItem alloc]initWithTitle:NSLocalizedString(@"msg25", @"")
                                                                            style:UIBarButtonItemStylePlain
                                                                           target:self
                                                                           action:@selector(rightSideMenuButtonPressed:)];
    
    self.navigationItem.leftBarButtonItem =[[UIBarButtonItem alloc]initWithTitle:NSLocalizedString(@"msg24", @"")
                                                                           style:UIBarButtonItemStylePlain
                                                                          target:self
                                                                          action:@selector(leftBackButtonPressed:)];
    self.tableView.rowHeight = UITableViewAutomaticDimension;
    self.tableView.estimatedRowHeight = 50;
    
    isSetScroll = YES;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    appDelegate = (AppDelegate *)[UIApplication sharedApplication].delegate;
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillAnimate:) name:UIKeyboardWillShowNotification object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillAnimate:) name:UIKeyboardWillHideNotification object:nil];
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_NewPostPush:) name:@"noti_NewPostPush" object:nil];
    
    UIButton *right1 = [[UIButton alloc]initWithFrame:CGRectMake(0, 0, 35, 35)];
    [right1 setImage:[self getScaledImage:[UIImage imageNamed:@"menu_camera.png"] scaledToMaxWidth:35] forState:UIControlStateNormal];
    [right1 addTarget:self action:@selector(photo:) forControlEvents:UIControlEventTouchUpInside];
    UIBarButtonItem *rightBtn1 = [[UIBarButtonItem alloc]initWithCustomView:right1];
    
    UIBarButtonItem *flexibleSpace = [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil];
    NSArray *barButtonArr = [[NSArray alloc] initWithObjects:rightBtn1, flexibleSpace, flexibleSpace, nil];
    self.toolBar.items = barButtonArr;
    
    self.contentImageArray = [NSMutableArray array];
    self.imageFilePathArray = [NSMutableArray array];
    self.fileNameArray = [NSMutableArray array];
    
    uploadCount = 0;
    cursor = 0;
    fileNameCnt = 0;
    
    isFirst = YES;
    
    dataArr = [NSMutableArray array];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    [dict setObject:@"TEXT" forKey:@"TYPE"];
    [dict setObject:@"" forKey:@"VALUE"];
    [dataArr addObject:dict];
    
    NSLog(@"dataArr !!  : %@", dataArr);
    
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(tapHandler:)];
    [self.tableView addGestureRecognizer:tap];
    
}

- (void)keyboardWillAnimate:(NSNotification *)notification{
    @try{
        CGRect keyboardBounds;
        [[notification.userInfo valueForKey:UIKeyboardFrameEndUserInfoKey] getValue:&keyboardBounds];
        NSNumber *duration = [notification.userInfo objectForKey:UIKeyboardAnimationDurationUserInfoKey];
        NSNumber *curve = [notification.userInfo objectForKey:UIKeyboardAnimationCurveUserInfoKey];
        
        keyboardBounds = [self.view convertRect:keyboardBounds toView:nil];
        [UIView beginAnimations:nil context:NULL];
        [UIView setAnimationDuration:[duration doubleValue]];
        [UIView setAnimationCurve:[curve intValue]];
        NSDictionary* info = [notification userInfo];
        //CGSize kbSize = [[info objectForKey:UIKeyboardFrameBeginUserInfoKey] CGRectValue].size;
        CGSize kbSize = [[info objectForKey:UIKeyboardFrameEndUserInfoKey] CGRectValue].size;
        //NSLog(@"kbSize : %f, %f",kbSize.width, kbSize.height);
        
        if (@available(iOS 11.0, *)) {
            kbSize.height = kbSize.height - self.view.safeAreaInsets.bottom;
        } else {
            kbSize.height = kbSize.height;
        }
        
        //NSLog(@"[notification name] : %@",[notification name]);
        if ([notification name]==UIKeyboardWillShowNotification) {
            self.navigationItem.rightBarButtonItem =[[UIBarButtonItem alloc]initWithTitle:NSLocalizedString(@"msg25", @"")
                                                                                    style:UIBarButtonItemStylePlain
                                                                                   target:self
                                                                                   action:@selector(rightSideMenuButtonPressed:)];
            NSLog(@"kbSize.height : %f", kbSize.height);
            self.keyboardHeight.constant = kbSize.height;
            [self.view layoutIfNeeded];
            
        }else if([notification name]==UIKeyboardWillHideNotification){
            self.keyboardHeight.constant = 0;
            [self.view layoutIfNeeded];
            
        }
        [UIView commitAnimations];
        
    } @catch(NSException *exception){
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}

#pragma mark - UINavigationBar Button Action
- (void)leftSideMenuButtonPressed:(id)sender {
    NSLog(@"%s", __func__);
    [self dismissViewControllerAnimated:YES completion:nil];
}

- (void)leftBackButtonPressed:(id)sender {
    NSLog(@"%s", __func__);
    
    @try{
        if(dataArr.count==1){
            NSString *type = [[dataArr objectAtIndex:0] objectForKey:@"TYPE"];
            NSString *value = [[dataArr objectAtIndex:0] objectForKey:@"VALUE"];
            
            if([type isEqualToString:@"TEXT"]&&[value isEqualToString:@""]){
                [self dismissViewControllerAnimated:YES completion:nil];
                
            } else {
                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:nil message:@"이 화면을 나가시겠습니까?\n작성중인 내용은 모두 삭제됩니다." delegate:self cancelButtonTitle:@"취소" otherButtonTitles:@"확인", nil];
                alert.tag = 3;
                [alert show];
            }
        } else {
            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:nil message:@"이 화면을 나가시겠습니까?\n작성중인 내용은 모두 삭제됩니다." delegate:self cancelButtonTitle:@"취소" otherButtonTitles:@"확인", nil];
            alert.tag = 3;
            [alert show];
        }
        
        
    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}

- (void)rightSideMenuButtonPressed:(id)sender {
    
    @try{
        NSLog(@"result dataArr : %@", dataArr);
        [self.view endEditing:YES];
        
        int count = (int)dataArr.count;
        for(int i=0; i<count; i++){
            NSString *type = [[dataArr objectAtIndex:i] objectForKey:@"TYPE"];
            
            if([type isEqualToString:@"IMG"]){
                UIImage *value = [[dataArr objectAtIndex:i] objectForKey:@"VALUE"];
                //NSString *value = [NSString stringWithFormat:@"%@", [[dataArr objectAtIndex:i] objectForKey:@"VALUE"]];
                
                [self.contentImageArray addObject:value];
            }
        }
        
        if(count==1){
            NSString *type = [[dataArr objectAtIndex:0] objectForKey:@"TYPE"];
            NSString *value = [[dataArr objectAtIndex:0] objectForKey:@"VALUE"];
            
            if([type isEqualToString:@"TEXT"]&&[value isEqualToString:@""]){
                UIAlertController * alert = [UIAlertController alertControllerWithTitle:@"" message:@"저장된 내용이 없습니다." preferredStyle:UIAlertControllerStyleAlert];
                [self presentViewController:alert animated:YES completion:nil];
                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                    [alert dismissViewControllerAnimated:YES completion:nil];
                });
            } else {
                self.navigationItem.rightBarButtonItem =[[UIBarButtonItem alloc]initWithTitle:NSLocalizedString(@"저장", @"저장")
                                                                                        style:UIBarButtonItemStylePlain
                                                                                       target:self
                                                                                       action:@selector(saveButtonPressed:)];
            }
        } else {
            self.navigationItem.rightBarButtonItem =[[UIBarButtonItem alloc]initWithTitle:NSLocalizedString(@"저장", @"저장")
                                                                                 style:UIBarButtonItemStylePlain
                                                                                target:self
                                                                                action:@selector(saveButtonPressed:)];
        }
        
    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}

- (void)saveButtonPressed:(id)sender {
//    NSLog(@"snsNo : %@", self.snsNo);
//    NSLog(@"postNo : %@", self.postNo);

    @try{
        [self callWebService:@"getPostNo" WithParameter:nil];

    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}

- (void)cameraAccessCheck {
    //NSLog(@"%s", __func__);
    @try{
        int osVer = [[UIDevice currentDevice].systemVersion floatValue];
        //NSLog(@"OS VER : %d", osVer);
        [self photoAccessCheck:@"CAMERA"];
        
        AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];
        if(status == AVAuthorizationStatusAuthorized) {
            //NSLog(@"AVAuthorizationStatusAuthorized status : %ld", (long)status);
            NSLog(@"카메라 접근 허용일 경우");
            dispatch_async(dispatch_get_main_queue(), ^{
                self.picker = [[UIImagePickerController alloc] init];
                self.picker.delegate = self;
                self.picker.sourceType = UIImagePickerControllerSourceTypeCamera;
                [self presentViewController:self.picker animated:YES completion:nil];
            });
            
        } else if(status == AVAuthorizationStatusDenied) {
            //NSLog(@"AVAuthorizationStatusDenied status : %ld", (long)status);
            NSLog(@"카메라 접근 허용되지않았을 경우");
            if(osVer >= 8){
                UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 카메라]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction * action) {
                                                                     NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                     [[UIApplication sharedApplication] openURL:url];
                                                                     
                                                                     [alert dismissViewControllerAnimated:YES completion:nil];
                                                                 }];
                
                UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * action) {
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                     }];
                [alert addAction:okButton];
                [alert addAction:cancelButton];
                [self presentViewController:alert animated:YES completion:nil];
                
            } else {
                UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 카메라]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction * action) {
                                                                     NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                     [[UIApplication sharedApplication] openURL:url];
                                                                     
                                                                     [alert dismissViewControllerAnimated:YES completion:nil];
                                                                 }];
                
                UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * action) {
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                     }];
                [alert addAction:okButton];
                [alert addAction:cancelButton];
                [self presentViewController:alert animated:YES completion:nil];
            }
            
        } else if(status == AVAuthorizationStatusNotDetermined){ // not determined
            //NSLog(@"AVAuthorizationStatusNotDetermined status : %ld", (long)status);
            [AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted) {
                if(granted){ // Access has been granted ..do something
                    dispatch_async(dispatch_get_main_queue(), ^{
                        self.picker = [[UIImagePickerController alloc] init];
                        self.picker.delegate = self;
                        self.picker.sourceType = UIImagePickerControllerSourceTypeCamera;
                        [self presentViewController:self.picker animated:YES completion:nil];
                    });
                    
                } else { // Access denied ..do something
                    if(osVer >= 8){
                        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 카메라]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
                        UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                         handler:^(UIAlertAction * action) {
                                                                             NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                             [[UIApplication sharedApplication] openURL:url];
                                                                             
                                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                                         }];
                        
                        UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                             handler:^(UIAlertAction * action) {
                                                                                 [alert dismissViewControllerAnimated:YES completion:nil];
                                                                             }];
                        [alert addAction:okButton];
                        [alert addAction:cancelButton];
                        [self presentViewController:alert animated:YES completion:nil];
                        
                    } else {
                        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 카메라]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
                        UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                         handler:^(UIAlertAction * action) {
                                                                             NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                             [[UIApplication sharedApplication] openURL:url];
                                                                             
                                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                                         }];
                        
                        UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                             handler:^(UIAlertAction * action) {
                                                                                 [alert dismissViewControllerAnimated:YES completion:nil];
                                                                             }];
                        [alert addAction:okButton];
                        [alert addAction:cancelButton];
                        [self presentViewController:alert animated:YES completion:nil];
                    }
                    
                }
            }];
        } else {
            NSLog(@"status : %ld", (long)status);
        }
        
    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}

- (void)photoAccessCheck :(NSString *)mediaType{
    //NSLog(@"%s", __func__);
    @try{
        int osVer = [[UIDevice currentDevice].systemVersion floatValue];
        PHAuthorizationStatus photoStatus = [PHPhotoLibrary authorizationStatus];
        
        if (photoStatus == PHAuthorizationStatusAuthorized) {
            //NSLog(@"Access has been granted.");
            if([mediaType isEqualToString:@"PHOTO"]){
                [self performSegueWithIdentifier:@"POST_PHLIB_MODAL" sender:@"PHOTO"];
            }
            
        } else if (photoStatus == PHAuthorizationStatusDenied) {
            //NSLog(@"Access has been denied.");
            if(osVer >= 8){
                UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 사진]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction * action) {
                                                                     NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                     [[UIApplication sharedApplication] openURL:url];
                                                                     
                                                                     [alert dismissViewControllerAnimated:YES completion:nil];
                                                                 }];
                
                UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * action) {
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                     }];
                [alert addAction:okButton];
                [alert addAction:cancelButton];
                [self presentViewController:alert animated:YES completion:nil];
                
            } else {
                UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 사진]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction * action) {
                                                                     NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                     [[UIApplication sharedApplication] openURL:url];
                                                                     
                                                                     [alert dismissViewControllerAnimated:YES completion:nil];
                                                                 }];
                
                UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * action) {
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                     }];
                [alert addAction:okButton];
                [alert addAction:cancelButton];
                [self presentViewController:alert animated:YES completion:nil];
            }
            
        } else if (photoStatus == PHAuthorizationStatusNotDetermined) {
            [PHPhotoLibrary requestAuthorization:^(PHAuthorizationStatus status) {
                if (status == PHAuthorizationStatusAuthorized) {
                    NSLog(@"1 StatusNotDetermined Access has been granted.");
                    if([mediaType isEqualToString:@"PHOTO"]){
                        dispatch_async(dispatch_get_main_queue(), ^{
                            [self performSegueWithIdentifier:@"POST_PHLIB_MODAL" sender:@"PHOTO"];
                        });
                    }
                    
                } else {
                    NSLog(@"2 StatusNotDetermined Access has been granted.");
                }
            }];
        } else if (photoStatus == PHAuthorizationStatusRestricted) {
            NSLog(@"Restricted access - normally won't happen.");
        }
        return;
        
    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}

- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {
    if(buttonIndex == 1 && alertView.tag != 3){
        NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
        [[UIApplication sharedApplication] openURL:url];
    } else if(buttonIndex == 1 && alertView.tag == 3) {
        NSLog(@"### fromSegue : %@", self.fromSegue);
        if([self.fromSegue isEqualToString:@"POST_WRITE_PUSH"] || [self.fromSegue isEqualToString:@"BOARD_POST_WRITE_MODAL"]){
            [self dismissViewControllerAnimated:YES completion:nil];
        } else{
            [self.navigationController popViewControllerAnimated:YES];
        }
        
    } else {
        
    }
}

#pragma mark - Post write
- (void)tapHandler:(UITapGestureRecognizer *)recognizer {
    //[self.view endEditing:YES];
    
    //텍스트 뷰 추가하기 위한 로직
    NSIndexPath *tapPath = [self.tableView indexPathForRowAtPoint:[recognizer locationInView:self.tableView]];
    NSLog(@"tapPath row : %ld", (long)tapPath.row);
    NSLog(@"dataArr zzzz : %@", dataArr);
    isSplit = NO;
    
    @try {
        NSString *currDataType = [[dataArr objectAtIndex:tapPath.row] objectForKey:@"TYPE"];
        
        if(tapPath.row==0&&[currDataType isEqualToString:@"IMG"]){
            NSLog(@"이미지 위에 텍스트 추가");
            NSMutableDictionary *dict = [NSMutableDictionary dictionary];
            [dict setObject:@"TEXT" forKey:@"TYPE"];
            [dict setObject:@"" forKey:@"VALUE"];
            [dataArr insertObject:dict atIndex:tapPath.row];
            
            isFirst = NO;
            
            [UIView performWithoutAnimation:^{
                [self.tableView reloadData];
            }];
            
        } else {
            //텍스트뷰 추가는 탭한 곳이 이미지고(이미지가 있는 로우의 하단 1/4정도라면), 다음 로우도 이미지 일때 (탭한 곳 밑에 추가)
            //탭한 곳이 이미지고(이미지가 있는 로우의 상단단 1/4정도라면), 이전 로우도 이미지 일때 (탭한 곳 위에 추가)
            //-> 이렇게 하지말고, 기준은 항상 뷰의 아래! 무조건 아래에 추가하는 걸로.
            
            NSString *nextDataType = [[dataArr objectAtIndex:tapPath.row+1] objectForKey:@"TYPE"];
            if([currDataType isEqualToString:@"IMG"] && [nextDataType isEqualToString:@"IMG"]){
                NSLog(@"1/4 : %f", [self.tableView rectForRowAtIndexPath:tapPath].size.height/4);
                NSLog(@"y : %f", [self.tableView rectForRowAtIndexPath:tapPath].origin.y);
                NSLog(@"recognize : %f", [recognizer locationInView:self.tableView].y);
                
                int rowY = [self.tableView rectForRowAtIndexPath:tapPath].origin.y;
                int rowHeight = [self.tableView rectForRowAtIndexPath:tapPath].size.height;
                int rowQuater = [self.tableView rectForRowAtIndexPath:tapPath].size.height/4;
                int myPosition = [recognizer locationInView:self.tableView].y;
                
                int startLoc = rowY + rowHeight - rowQuater ;
                int endLoc = startLoc + rowQuater;
                
                if(startLoc<=myPosition && myPosition<=endLoc){
                    NSLog(@"아래에 추가");
                    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
                    [dict setObject:@"TEXT" forKey:@"TYPE"];
                    [dict setObject:@"" forKey:@"VALUE"];
                    [dataArr insertObject:dict atIndex:tapPath.row+1];
                    
                    isSetScroll = NO;
                    
                    [UIView performWithoutAnimation:^{
                        [self.tableView reloadData];
                    }];
                    
//                    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
//                        //텍스트 추가한 곳에 스크롤을 두기 위해.
//                        NSIndexPath *lastCell = [NSIndexPath indexPathForItem:tapPath.row inSection:0];
//                        [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:NO];
//                    });
                    
                } else {
                    NSLog(@"가만히있으면 됨");
                    //근데 잘 안눌려서..
                }
            }
        }
        
    } @catch (NSException *exception) {
        NSLog(@"%s exception : %@", __func__, exception);
    }
}

-(void)setImageFromNoti :(NSArray *)imgArr{
    NSLog(@"%s", __func__);
    
    //이미지 추가하면 커서가 없어져서 어떤 텍스트뷰인지 모른다. isText값 불필요.
    //isText불필요하긴한데, 커서없을때 이미지 추가하면 마지막으로 텍스트 쓴 뷰 밑에 추가됨.(위에 텍스트뷰 있어도 삭제안됨)
    //사진 추가 하고 밑에 붙는 텍스트뷰에 자동으로 커서를 둬야할 것 같은데.. 어떻게 해야되지ㅠㅠ
    @try {
        UITextRange *range = currTextView.selectedTextRange;
        UITextPosition *beginning = currTextView.beginningOfDocument;
        NSInteger location = [currTextView offsetFromPosition:beginning toPosition:range.start];
        NSInteger length = [currTextView offsetFromPosition:range.start toPosition:range.end];
        textRange = NSMakeRange(location, length);
        
        firstText = [currTextView.text substringToIndex:textRange.location];
        secondText = [currTextView.text substringFromIndex:textRange.location];
        
        NSLog(@"firstText : %@, secondText : %@", firstText, secondText);
        NSLog(@"location : %ld", (long)location);
        //firstText : , secondText : ㅇ ㄹㄹㄹㄹㄹ -> 텍스트 제일앞에 커서두고 이미지 추가했을때
        //그리고 로케이션은 0
        //텍스트를 쓰고 중간에 나눴을 때 second가 있고 안나눴을땐 없음
        
        if(location==0&&[secondText isEqualToString:@""]){
            //텍스트 아예 없을때
            //텍스트 뷰 지우고 이미지뷰 추가
            NSLog(@"텍스트 아예 없을때 dataArr : %@", dataArr);
            NSLog(@"currTextView.tag : %ld", (long)currTextView.tag);
            
            [dataArr removeObjectAtIndex:currTextView.tag];
            NSLog(@"지우고 난 후  dataArr : %@", dataArr);
            
            //문제점 : 로우 업데이트가 안됨. reload는 됨. 근데 reload하면 텍스트 써놓은게 없어짐. 위에 데이터를 공백으로 넣어서 그럼.
            //->완료
            
            [self addImageView:imgArr :currTextView.tag :NO];
            
        } else if(location==0&&![secondText isEqualToString:@""]){
            //텍스트있고, 제일 앞에 커서 두고 이미지 등록했을 때. (텍스트뷰 위에 등록되어야함)
            NSLog(@"텍스트있고, 제일 앞에 커서 두고 이미지 등록했을 때");
            [self addImageView:imgArr :currTextView.tag];
            
            
        } else if(location!=0&&[secondText isEqualToString:@""]){
            //일반적으로 텍스트 썼을 때
            NSLog(@"일반적으로 텍스트 썼을 때 currTextView.tag : %ld", (long)currTextView.tag);
            
            [self addImageView:imgArr :currTextView.tag+1 :NO];
            
        } else if(location!=0&&![secondText isEqualToString:@""]){
            //텍스트 중간에 커서 두고 이미지 눌렀을 때(텍스트 분리)
            NSLog(@"텍스트 중간에 커서 두고 이미지 눌렀을 때(텍스트 분리) currTextView.tag : %ld", (long)currTextView.tag);
            
            currTextView.text = firstText;
            
            //NSLog(@"firstText : %@, secondText : %@", firstText, secondText);
            
            NSMutableDictionary *dict = [NSMutableDictionary dictionary];
            [dict setObject:@"TEXT" forKey:@"TYPE"];
            [dict setObject:firstText forKey:@"VALUE"];
            [dataArr replaceObjectAtIndex:currTextView.tag withObject:dict];
            
            [self addImageView:imgArr :currTextView.tag+1 :YES];
        }
    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}

-(void)addImageView :(NSArray *)imgArr :(NSInteger)index{
    @try {
        NSLog(@"텍스트뷰 앞에 커서 두고 이미지 추가");
        int lastIdx = 0;
        for(int i=0; i<imgArr.count; i++){
            UIImage *image = [self getScaledImage:[imgArr objectAtIndex:i] scaledToMaxWidth:self.view.frame.size.width-10];
            
            NSMutableDictionary *dict = [NSMutableDictionary dictionary];
            [dict setObject:@"IMG" forKey:@"TYPE"];
            [dict setObject:image forKey:@"VALUE"];
            
            [dataArr insertObject:dict atIndex:index+i];
            lastIdx = (int)index+i;
        }
        
        [UIView performWithoutAnimation:^{
            [self.tableView reloadData];
        }];
        
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            //이미지 추가한 곳에 스크롤을 두기 위해.
            NSIndexPath *lastCell = [NSIndexPath indexPathForItem:index inSection:0];
            [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:NO];
        });
    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}

-(void)addImageView :(NSArray *)imgArr :(NSInteger)index :(BOOL)isSplit{
    NSLog(@"%s",__func__);
    @try {
        //텍스트뷰 앞에 커서두고 이미지 추가하면 텍스트 뷰 없어야 되는데.
        int lastIdx = 0;
        for(int i=0; i<imgArr.count; i++){
            UIImage *image = [self getScaledImage:[imgArr objectAtIndex:i] scaledToMaxWidth:self.view.frame.size.width-10];
            
            NSMutableDictionary *dict = [NSMutableDictionary dictionary];
            [dict setObject:@"IMG" forKey:@"TYPE"];
            [dict setObject:image forKey:@"VALUE"];
            [dataArr insertObject:dict atIndex:index+i];
            lastIdx = (int)index+i;
        }
        
        NSMutableDictionary *dict2 = [NSMutableDictionary dictionary];
        [dict2 setObject:@"TEXT" forKey:@"TYPE"];
        
        if(isSplit){
            [dict2 setObject:secondText forKey:@"VALUE"];
        } else {
            [dict2 setObject:@"" forKey:@"VALUE"];
        }
        [dataArr insertObject:dict2 atIndex:lastIdx+1];
        
        [UIView performWithoutAnimation:^{
            [self.tableView reloadData];
        }];
        
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            //이미지 추가 후 생긴 텍스트에 스크롤을 두기 위해.
            NSIndexPath *lastCell = [NSIndexPath indexPathForItem:lastIdx+1 inSection:0];
            [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:NO];
        });
    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}

- (void)imgTapHandler:(UITapGestureRecognizer *)recognizer {
    NSLog(@"%s", __func__);
    
    @try {
        NSInteger index = recognizer.view.tag;
        
        UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:nil message:nil preferredStyle:UIAlertControllerStyleActionSheet];
        UIAlertAction *deleteAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"삭제", @"삭제")
                                                               style:UIAlertActionStyleDefault
                                                             handler:^(UIAlertAction * action){
                                                                 [self deleteImageClick:index];
                                                                 [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                                 
                                                             }];
        [actionSheet addAction:deleteAction];
        
        if([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad){
            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"취소", @"취소")
                                                                   style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction * action){
                                                                     [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                                 }];
            [actionSheet addAction:cancelAction];
            
            [actionSheet.popoverPresentationController setPermittedArrowDirections:0];
            CGRect rect = self.view.frame;
            rect.origin.x = (self.view.frame.size.width/2)-(actionSheet.view.frame.size.width/2);
            rect.origin.y = (self.view.frame.size.height/2)-(actionSheet.view.frame.size.height/2);
            actionSheet.popoverPresentationController.sourceView = self.view;
            actionSheet.popoverPresentationController.sourceRect = rect;
        } else {
            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"취소", @"취소")
                                                                   style:UIAlertActionStyleCancel
                                                                 handler:^(UIAlertAction * action){
                                                                     [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                                 }];
            [actionSheet addAction:cancelAction];
        }
        
        [self presentViewController:actionSheet animated:YES completion:nil];
    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}

- (void)deleteImageClick:(NSInteger)index{
    NSLog(@"이미지 삭제 인덱스 : %ld", (long)index);
  
    @try {
        if(index!=0){
            NSString *prevType = [[dataArr objectAtIndex:index-1] objectForKey:@"TYPE"];
            NSString *nextType = [[dataArr objectAtIndex:index+1] objectForKey: @"TYPE"];
            
            if([prevType isEqualToString:@"TEXT"] && [nextType isEqualToString:@"TEXT"]){
                NSString *prevVal = [[dataArr objectAtIndex:index-1] objectForKey:@"VALUE"];
                NSString *nextVal = [[dataArr objectAtIndex:index+1] objectForKey:@"VALUE"];
                
                NSMutableDictionary *dict = [NSMutableDictionary dictionary];
                [dict setObject:@"TEXT" forKey:@"TYPE"];
                
                if([nextVal isEqualToString:@""]){
                    [dict setObject:[NSString stringWithFormat:@"%@",prevVal] forKey:@"VALUE"];
                } else {
                    [dict setObject:[NSString stringWithFormat:@"%@\n%@",prevVal,nextVal] forKey:@"VALUE"];
                }
                
                [dataArr replaceObjectAtIndex:index-1 withObject:dict];
                [dataArr removeObjectAtIndex:index+1];
            }
        }
        
        [dataArr removeObjectAtIndex:index];
        NSLog(@"이미지지우고 dataArr : %@", dataArr);
        
        [UIView performWithoutAnimation:^{
            [self.tableView reloadData];
        }];
        
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            //이미지 삭제한 곳에 스크롤을 두기 위해.
            NSIndexPath *lastCell = [NSIndexPath indexPathForItem:index-1 inSection:0];
            [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:NO];
        });
        
    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}

#pragma mark - UITableViewDelegate UITableViewDataSource
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
    return 1;
}

-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return dataArr.count;
}

-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    [self.tableView setSeparatorStyle:UITableViewCellSeparatorStyleNone];
    
    TextTableViewCell *textCell = (TextTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"TextTableViewCell"];
    ImageTableViewCell *imgCell = (ImageTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"ImageTableViewCell"];
    
    if (textCell == nil) {
        NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"TextTableViewCell" owner:self options:nil];
        
        for (id currentObject in topLevelObject) {
            if ([currentObject isKindOfClass:[TextTableViewCell class]]) {
                textCell = (TextTableViewCell *) currentObject;
                [textCell setSelectionStyle:UITableViewCellSelectionStyleNone];
            }
        }
    }
    
    if (imgCell == nil) {
        NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"ImageTableViewCell" owner:self options:nil];
        
        for (id currentObject in topLevelObject) {
            if ([currentObject isKindOfClass:[ImageTableViewCell class]]) {
                imgCell = (ImageTableViewCell *) currentObject;
                [imgCell setSelectionStyle:UITableViewCellSelectionStyleNone];
            }
        }
    }
    
    NSString *type = [[dataArr objectAtIndex:indexPath.row] objectForKey:@"TYPE"];
    if([type isEqualToString:@"TEXT"]){
        textCell.textView.text = nil;
        
        [self setTextView:textCell.textView];
        
        NSString *textValue = [[dataArr objectAtIndex:indexPath.row] objectForKey:@"VALUE"];
        
        textCell.textView.delegate = self;
        textCell.textView.tag = indexPath.row;
        textCell.textView.text = textValue;
        
        NSMutableDictionary *dict = [dataArr objectAtIndex:indexPath.row];
        [dataArr replaceObjectAtIndex:indexPath.row withObject:dict];
       
        if(indexPath.row==0){
            if(isFirst){
                textCell.textView.placeholder = @"글을 입력하세요.";
                [textCell.textView becomeFirstResponder];
                isFirst = NO;
            }
        } else {
            textCell.textView.placeholder = nil;
        }
        //마지막 텍스트 뷰에 커서
        //NSLog(@"TEXT : %@", textValue);
        //[textCell.textView becomeFirstResponder];
        //currTextView = textCell.textView;
        
        return textCell;
        
        //사진등록하고 아래쪽 탭 하면 텍스트뷰에 커서 및 키보드 올라오게 할 수 없을까!
        //사진 사이에 텍스트 뷰 누르면 텍스트 추가되고 키보드 올라오게!!!
        //->방법이 없네ㅠ
        
    } else if([type isEqualToString:@"IMG"]){
        imgCell.imgView.image = nil;
        
        UIImage *imgValue = [[dataArr objectAtIndex:indexPath.row] objectForKey:@"VALUE"];
        //imgValue = [self getScaledImage:imgValue scaledToMaxWidth:self.view.frame.size.width-10];
        
        [imgCell.imgView setUserInteractionEnabled:YES];
        imgCell.imgView.image = imgValue;
        imgCell.imgView.tag = indexPath.row;
        
        UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(imgTapHandler:)];
        [imgCell.imgView addGestureRecognizer:tap];
        
        return imgCell;
    }
    
    return nil;
}

//-(void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath{
//    NSLog(@"%s", __func__);
//    [currTextView becomeFirstResponder];
//}

-(void)setTextView:(UITextView *)textView {
    @try {
        NSLog(@"setTextView tag : %ld", (long)textView.tag);
        CGFloat fixedWidth = textView.frame.size.width;
        CGSize newSize = [textView sizeThatFits:CGSizeMake(fixedWidth, MAXFLOAT)];
        CGRect newFrame = textView.frame;
        newFrame.size = CGSizeMake(fmaxf(newSize.width, fixedWidth), newSize.height);
        textView.frame = newFrame;
        textView.scrollEnabled = NO;
        
        //    NSLog(@"contentSize : %f", self.tableView.contentSize.height);
        //    NSLog(@"offset : %f", self.tableView.contentOffset.y);
        //    NSLog(@"keyboard : %f",_keyboardHeight.constant);
        //    NSLog(@"table height : %f", self.tableView.frame.size.height);
        
        if(isSetScroll){
            //int height = self.tableView.contentSize.height-_keyboardHeight.constant-self.tableView.contentOffset.y;
            
            int height1 = self.tableView.contentSize.height-_keyboardHeight.constant-self.tableView.contentOffset.y;
            int height2 = self.tableView.frame.size.height-_keyboardHeight.constant;
            
            if((height1-height2)>-10&&(height1-height2)<20){
                NSLog(@"스크롤이 하단에 있다");
                //스크롤이 하단에 있을 때만. 텍스트뷰에 맞춰서 스크롤을 내려주기 위해.
                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                    NSIndexPath *lastCell = [NSIndexPath indexPathForItem:(dataArr.count-1) inSection:0];
                    [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:NO];
                });
            }
        }
        
        [UIView performWithoutAnimation:^{
            [self.tableView beginUpdates];
            [self.tableView endUpdates];
        }];
    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}

#pragma mark - TextView Delegate
-(void)textViewDidChange:(UITextView *)textView{
    //NSLog(@"%s", __func__);
    @try {
        currTextView = textView;
        
        //텍스트 뷰 커서에 따라 스크롤 위치 변경해주기 위해.
        NSIndexPath *currentCell = [NSIndexPath indexPathForItem:textView.tag inSection:0];
        CGPoint cursorPosition2 = [textView caretRectForPosition:textView.selectedTextRange.start].origin;
        NSLog(@"결론 스크롤 위치 : %f", cursorPosition2.y+[self.tableView rectForRowAtIndexPath:currentCell].origin.y);
        float scrollPosition = cursorPosition2.y+[self.tableView rectForRowAtIndexPath:currentCell].origin.y+35;
        [self.tableView scrollRectToVisible:CGRectMake(0, scrollPosition, 1, 1) animated:NO];
        
        //텍스트를 입력할때마다 데이터 변경.
        NSMutableDictionary *dict = [NSMutableDictionary dictionary];
        [dict setObject:@"TEXT" forKey:@"TYPE"];
        [dict setObject:textView.text forKey:@"VALUE"];
        [dataArr replaceObjectAtIndex:textView.tag withObject:dict];
        
        [self setTextView:textView];
        
    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}

-(void)textViewDidBeginEditing:(UITextView *)textView{
    NSLog(@"%s", __func__);
    currTextView = textView;
    
    isSetScroll = YES;
    
    NSLog(@"textview tag : %ld", textView.tag);
}

//-(void)textViewDidEndEditing:(UITextView *)textView{
//    NSLog(@"%s", __func__);
//
//    //이거 쓰면 테이블 리로드할때 위에 있던 텍스트가 사라짐.. 텍스트 쓸 때마다 dataArr에 넣을순 없을까ㅠ
//    //아니면 완료 눌렀을때 dataArr에 저장/ 테이블 리로드 사용하지말고 rowupdate만 사용하면 될 것 같기도하고..
//    //->완료
//    //    if(dataArr.count>0){
//    //        NSMutableDictionary *dict = [NSMutableDictionary dictionary];
//    //        [dict setObject:@"TEXT" forKey:@"TYPE"];
//    //        [dict setObject:textView.text forKey:@"VALUE"];
//    //        [dict setObject:[NSString stringWithFormat:@"%lu",textView.tag] forKey:@"TAG"];
//    //        [dataArr replaceObjectAtIndex:textView.tag withObject:dict];
//    //    }
//}


-(BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text{
    const char * _char = [text cStringUsingEncoding:NSUTF8StringEncoding];
    
    int isBackSpace = strcmp(_char, "\b");
    
    if(isBackSpace == -8){//백스페이스
        NSLog(@"backspace");
        if(dataArr.count>2){
            if([textView.text isEqualToString:@""]){
                //텍스트 없으면 텍스트뷰를 지우는데
                //이미지와 이미지 사이에 있는 텍스트 일 때 만 지운다.
                NSLog(@"텍스트 없음! 그리고 텍스트 뷰 태그는 : %ld", (long)textView.tag);
                
                @try{
                    if((textView.tag==0&&[[[dataArr objectAtIndex:textView.tag] objectForKey:@"TYPE"] isEqualToString:@"TEXT"])||([[[dataArr objectAtIndex:textView.tag-1] objectForKey:@"TYPE"] isEqualToString:@"IMG"] && [[[dataArr objectAtIndex:textView.tag+1] objectForKey:@"TYPE"] isEqualToString:@"IMG"])){
                        NSLog(@"위아래 이미지 일 때 텍스트 지워야지");
                        
                        [dataArr removeObjectAtIndex:textView.tag];
                        NSLog(@"텍스트지우고 dataArr : %@", dataArr);
                        
                        [UIView performWithoutAnimation:^{
                            [self.tableView reloadData];
                        }];
                        
                        if(self.tableView.contentSize.height > self.tableView.frame.size.height){
                            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                                //텍스트 삭제한 곳에 스크롤을 두기 위해.
                                NSIndexPath *lastCell = [NSIndexPath indexPathForItem:textView.tag inSection:0];
                                [self.tableView scrollToRowAtIndexPath:lastCell atScrollPosition:UITableViewScrollPositionBottom animated:NO];
                            });
                        }
                    }
                } @catch(NSException* exception){
                    NSLog(@"%s Exception : %@", __func__, exception);
                }
                
            }
        }
        
    }
    
    return YES;
}

#pragma mark - ScrollView
-(void)scrollViewWillBeginDragging:(UIScrollView *)scrollView{
    //스크롤 시 여기로 들어옴
}

-(void)scrollViewDidEndScrollingAnimation:(UIScrollView *)scrollView{
    //키보드 내려간 상태에서 텍스트 뷰(마지막에 있는 텍스트뷰) 클릭하면 여기로 들어옴(키보드 올라온것만큼 뷰 올리기 위해)
}

#pragma mark - UIToolbar Button Action
- (IBAction)photo:(id)sender{
    @try {
        UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:nil message:nil preferredStyle:UIAlertControllerStyleActionSheet];
        UIAlertAction *takePictureAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"사진촬영", @"사진촬영")
                                                                    style:UIAlertActionStyleDefault
                                                                  handler:^(UIAlertAction * action){
                                                                      if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera]) {
                                                                          [self cameraAccessCheck];
                                                                      }else{
                                                                          [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                                      }
                                                                  }];
        UIAlertAction *selectPhotoAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"사진선택", @"사진선택")
                                                                    style:UIAlertActionStyleDefault
                                                                  handler:^(UIAlertAction * action){
                                                                      [self photoAccessCheck:@"PHOTO"];
                                                                      [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                                  }];
        [actionSheet addAction:takePictureAction];
        [actionSheet addAction:selectPhotoAction];
        
        if([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad){
            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"취소", @"취소")
                                                                   style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction * action){
                                                                     [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                                 }];
            [actionSheet addAction:cancelAction];
            
            [actionSheet.popoverPresentationController setPermittedArrowDirections:0];
            CGRect rect = self.view.frame;
            rect.origin.x = (self.view.frame.size.width/2)-(actionSheet.view.frame.size.width/2);
            rect.origin.y = (self.view.frame.size.height/2)-(actionSheet.view.frame.size.height/2);
            actionSheet.popoverPresentationController.sourceView = self.view;
            actionSheet.popoverPresentationController.sourceRect = rect;
        } else {
            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"취소", @"취소")
                                                                   style:UIAlertActionStyleCancel
                                                                 handler:^(UIAlertAction * action){
                                                                     [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                                 }];
            [actionSheet addAction:cancelAction];
        }
        
        [self presentViewController:actionSheet animated:YES completion:nil];
    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}


- (IBAction)video:(id)sender{
    @try {
        UIAlertController * alert = [UIAlertController alertControllerWithTitle:@"" message:@"개발중인 기능입니다." preferredStyle:UIAlertControllerStyleAlert];
        [self presentViewController:alert animated:YES completion:nil];
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            [alert dismissViewControllerAnimated:YES completion:nil];
        });
    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}

- (void)getImageNotification:(NSNotification *)notification {
    @try {
        NSLog(@"postwrite getImageNotification userInfo : %@", notification.userInfo);
        
        NSArray *imageArray = [notification.userInfo objectForKey:@"IMG_LIST"];
        [self setImageFromNoti :imageArray];
        
        [[NSNotificationCenter defaultCenter] removeObserver:self name:@"getImageNotification" object:nil];
    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}


#pragma mark - UIImagePickerController Delegate
-(void)imagePickerControllerDidCancel:(UIImagePickerController *)picker{
    [picker dismissViewControllerAnimated:YES completion:nil];
}
-(void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *,id> *)info{
    if ([[info objectForKey:UIImagePickerControllerMediaType] isEqualToString:@"public.movie"]) {
        NSURL *mediaUrl = [info objectForKey:UIImagePickerControllerMediaURL];
        [picker dismissViewControllerAnimated:YES completion:nil];
        
        thumImage = [self imageFromMovie:mediaUrl atTime:0.0];
        
        UISaveVideoAtPathToSavedPhotosAlbum([mediaUrl path], self, @selector(video:didFinishSavingWithError:contextInfo:), nil);
        
    } else{
        UIImage *image = [info objectForKey:UIImagePickerControllerOriginalImage];
        [picker dismissViewControllerAnimated:YES completion:nil];
        UIImageWriteToSavedPhotosAlbum(image, self, @selector(image:didFinishSavingWithError:contextInfo:), nil);
    }
}

- (UIImage *)imageFromMovie:(NSURL *)movieURL atTime:(NSTimeInterval)time{
    MPMoviePlayerController *mp = [[MPMoviePlayerController alloc]initWithContentURL:movieURL];
    mp.shouldAutoplay = NO;
    mp.initialPlaybackTime = time;
    mp.currentPlaybackTime = time;
    UIImage *thumnail = [mp thumbnailImageAtTime:time timeOption:MPMovieTimeOptionNearestKeyFrame];
    [mp stop];
    
    return thumnail;
}

-(UIImage *) resizedImage:(UIImage *)img inRect:(CGRect)frameRect {
    UIGraphicsBeginImageContext(frameRect.size);
    [img drawInRect:frameRect];
    return UIGraphicsGetImageFromCurrentImageContext();
}


- (void)video:(NSString *)videoPath didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo {
    if (error) {
        NSLog(@"error: %@", [error localizedDescription]);
    } else {
        NSLog(@"video saved");
    }
}

-(void)image:(UIImage *)image didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo{
    NSLog(@"%s : %f %f",__FUNCTION__,image.size.width,image.size.height);
    if (error) {
        NSLog(@"error: %@", [error localizedDescription]);
    } else {
        NSLog(@"photo saved");
        NSArray *imageArray = [[NSArray alloc] initWithObjects:image, nil];
        [self setImageFromNoti :imageArray];
    }
}
- (UIImage *)rotateImage90:(UIImage *)img
{
    NSLog(@"rotateImage90:");
    
    CGImageRef          imgRef = img.CGImage;
    CGFloat             width = CGImageGetWidth(imgRef);
    CGFloat             height = CGImageGetHeight(imgRef);
    CGRect              bounds = CGRectMake(0, 0, width, height);
    CGFloat             boundHeight;
    
    boundHeight = bounds.size.height;
    bounds.size.height = bounds.size.width;
    bounds.size.width = boundHeight;
    
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    NSUInteger bytesPerPixel = 4;
    NSUInteger bytesPerRow = bytesPerPixel * bounds.size.width;
    NSUInteger bitsPerComponent = 8;
    CGContextRef context = CGBitmapContextCreate(nil, bounds.size.width, bounds.size.height,
                                                 bitsPerComponent, bytesPerRow, colorSpace,
                                                 kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big);
    CGColorSpaceRelease(colorSpace);
    
    
    CGContextRotateCTM (context, DEGREES_TO_RADIANS(270));
    CGContextTranslateCTM (context, -width, 0);
    
    CGContextDrawImage(context, CGRectMake(0, 0, width, height), imgRef);
    CGImageRef newImage = CGBitmapContextCreateImage(context);
    CGContextRelease(context);
    UIImage *imageCopy = [UIImage imageWithCGImage:newImage];
    CFRelease(newImage);
    return imageCopy;
}
- (UIImage *)rotateImageReverse90:(UIImage *)img
{
    NSLog(@"rotateImageReverse90:");
    
    CGImageRef          imgRef = img.CGImage;
    CGFloat             width = CGImageGetWidth(imgRef);
    CGFloat             height = CGImageGetHeight(imgRef);
    CGRect              bounds = CGRectMake(0, 0, width, height);
    CGFloat             boundHeight;
    
    boundHeight = bounds.size.height;
    bounds.size.height = bounds.size.width;
    bounds.size.width = boundHeight;
    
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    NSUInteger bytesPerPixel = 4;
    NSUInteger bytesPerRow = bytesPerPixel * bounds.size.width;
    NSUInteger bitsPerComponent = 8;
    CGContextRef context = CGBitmapContextCreate(nil, bounds.size.width, bounds.size.height,
                                                 bitsPerComponent, bytesPerRow, colorSpace,
                                                 kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big);
    CGColorSpaceRelease(colorSpace);
    
    CGContextRotateCTM (context, DEGREES_TO_RADIANS(90));
    CGContextTranslateCTM (context, 0, -height);
    
    CGContextDrawImage(context, CGRectMake(0, 0, width, height), imgRef);
    CGImageRef newImage = CGBitmapContextCreateImage(context);
    CGContextRelease(context);
    UIImage *imageCopy = [UIImage imageWithCGImage:newImage];
    CFRelease(newImage);
    return imageCopy;
}

#define DEGREES_TO_RADIANS(angle) ((angle) / 180.0 * M_PI)
- (UIImage *)rotateImage:(UIImage *)img byOrientationFlag:(UIImageOrientation)orient
{
    NSLog(@"ImageProcessUtil rotateImage");
    
    CGImageRef          imgRef = img.CGImage;
    CGFloat             width = CGImageGetWidth(imgRef);
    CGFloat             height = CGImageGetHeight(imgRef);
    CGRect              bounds = CGRectMake(0, 0, width, height);
    CGFloat             boundHeight;
    NSLog(@"rotate image size width=%f, height=%f, orientation=%ld", width, height, (long)orient);
    
    switch(orient) {
            
        case UIImageOrientationUp:
            break;
            
        case UIImageOrientationDown:
            break;
            
        case UIImageOrientationLeft:
            boundHeight = bounds.size.height;
            bounds.size.height = bounds.size.width;
            bounds.size.width = boundHeight;
            break;
            
        case UIImageOrientationRight:
            boundHeight = bounds.size.height;
            bounds.size.height = bounds.size.width;
            bounds.size.width = boundHeight;
            break;
            
        default:
            break;
    }
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    NSUInteger bytesPerPixel = 4;
    NSUInteger bytesPerRow = bytesPerPixel * bounds.size.width;
    NSUInteger bitsPerComponent = 8;
    CGContextRef context = CGBitmapContextCreate(nil, bounds.size.width, bounds.size.height,
                                                 bitsPerComponent, bytesPerRow, colorSpace,
                                                 kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big);
    CGColorSpaceRelease(colorSpace);
    if (orient == UIImageOrientationRight) {
        CGContextRotateCTM (context, DEGREES_TO_RADIANS(270));
        CGContextTranslateCTM (context, -width, 0);
    }
    else if (orient == UIImageOrientationLeft) {
        CGContextRotateCTM (context, DEGREES_TO_RADIANS(90));
        CGContextTranslateCTM (context, 0, -height);
    }
    else if (orient == UIImageOrientationDown) {
        CGContextRotateCTM (context, DEGREES_TO_RADIANS(180));
        CGContextTranslateCTM (context, -width, -height);
    }
    else if (orient == UIImageOrientationUp) {
        // NOTHING
    }
    
    CGContextDrawImage(context, CGRectMake(0, 0, width, height), imgRef);
    CGImageRef newImage = CGBitmapContextCreateImage(context);
    CGContextRelease(context);
    UIImage *imageCopy = [UIImage imageWithCGImage:newImage];
    CFRelease(newImage);
    return imageCopy;
}

- (UIImage *)getScaledImage:(UIImage *)image scaledToMaxWidth:(CGFloat)width {
    CGFloat oldWidth = image.size.width;
    CGFloat oldHeight = image.size.height;
    
    CGFloat scaleFactor=1;
    
    //if (oldWidth > width) {
    scaleFactor = width / oldWidth;
    //} else  //oldWidth<width and height==0이면, scale하지 않음.
    //    return image;
    
    CGFloat newHeight = oldHeight * scaleFactor;
    CGFloat newWidth = oldWidth * scaleFactor;
    CGSize newSize = CGSizeMake(newWidth, newHeight);
    
    //NSLog(@"oldWidth : %f, oldHeight : %f", oldWidth, oldHeight);
    //NSLog(@"newWidth : %f, newHeight : %f", newWidth, newHeight);
    
    //UIGraphicsBeginImageContext(newSize);
    UIGraphicsBeginImageContextWithOptions(newSize, NO, [UIScreen mainScreen].scale);
    [image drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)];
    UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return newImage;
}

- (UIImage *)getScaledImage:(UIImage *)image scaledToMaxWidth:(CGFloat)width maxHeight:(CGFloat)height {
    CGFloat oldWidth = image.size.width;
    CGFloat oldHeight = image.size.height;
    
    if (oldWidth < width && oldHeight < height)
        return image;
    
    CGFloat scaleFactorW =1;
    CGFloat scaleFactorH =1;
    
    if (oldWidth > width)
        scaleFactorW = width / oldWidth;
    if(oldHeight > height)
        scaleFactorH = height / oldHeight;
    
    CGFloat scaleFactor = (scaleFactorW<scaleFactorH)?scaleFactorW:scaleFactorH;
    
    
    CGFloat newHeight = oldHeight * scaleFactor;
    //CGFloat newWidth = oldWidth * scaleFactor;
    CGSize newSize = CGSizeMake(width, newHeight);
    
    UIGraphicsBeginImageContext(newSize);
    [image drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)];
    UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return newImage;
}

#pragma mark - Notification
- (void)noti_NewPostPush:(NSNotification *)notification {
    @try{
        if(notification.userInfo!=nil){
            NSString *message = [notification.userInfo objectForKey:@"MESSAGE"];
            NSDictionary *dict = [NSDictionary dictionary];
            if(message!=nil){
                NSData *jsonData = [message dataUsingEncoding:NSUTF8StringEncoding];
                NSError *error;
                dict = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
            } else {
                dict = notification.userInfo;
            }
            
            UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
            PostDetailViewController *vc = (PostDetailViewController *)[storyboard instantiateViewControllerWithIdentifier:@"PostDetailViewController"];
            UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:vc];
            
            vc.fromSegue = @"NOTI_POST_DETAIL";
            vc.notiPostDic = dict;
            [self presentViewController:nav animated:YES completion:nil];
        }
        
    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}

#pragma mark - Web Service
- (void)callWebService:(NSString *)serviceName WithParameter:(NSString *)paramString{
    NSString *urlString = appDelegate.main_url;
    NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:serviceName]];
    MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
    session.delegate = self;
    
    if ([session start]) {
        [SVProgressHUD show];
    }
}

- (void)saveAttachedFile{
    NSLog(@"self.contentImageArray : %@", self.contentImageArray);
    @try{
        
        for (int i=0; i<self.contentImageArray.count; i++) {
            NSString *fileName = [self createFileName];
            [self.fileNameArray addObject:fileName];
            
//            UIImage *image = [self.contentImageArray objectAtIndex:i];
//
//            NSData * data = UIImageJPEGRepresentation(image, 0.1);
//            NSLog(@"File size is : %.2f MB",(float)data.length/1024.0f/1024.0f);
//            [self saveAttachedFile:data AndFileName:fileName];
        }
        
        
        //처음 이미지 먼저 업로드 후 완료되면 순차적으로 업로드 하기 위해.
        UIImage *image = [self.contentImageArray objectAtIndex:0];
        
        NSData * data = UIImageJPEGRepresentation(image, 0.1);
        NSLog(@"File size is : %.2f MB",(float)data.length/1024.0f/1024.0f);
        [self saveAttachedFile:data AndFileName:[self.fileNameArray objectAtIndex:0]];
        
    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}

- (void)saveAttachedFile:(NSData *)data AndFileName:(NSString *)fileName{
    @try{
        if (self.postNo==nil) {
            NSLog(@"postNo is nil");
        }else{
            //ADIT_INFO : {"TMP_NO":Long,"LOCAL_CONTENT":String}
            NSMutableDictionary *aditDic = [NSMutableDictionary dictionary];
            [aditDic setObject:@"1" forKey:@"TMP_NO"];
            [aditDic setObject:@"" forKey:@"LOCAL_CONTENT"];
            
            NSData* aditData = [NSJSONSerialization dataWithJSONObject:aditDic options:0 error:nil];
            NSString* aditJsonData = [[NSString alloc] initWithData:aditData encoding:NSUTF8StringEncoding];
            
            NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
            NSString *myUserNo = [prefs objectForKey:@"CUSER_NO"];
            
            NSMutableDictionary *sendFileParam = [NSMutableDictionary dictionary];
            [sendFileParam setObject:self.snsNo forKey:@"snsNo"];
            [sendFileParam setObject:[[NSUserDefaults standardUserDefaults] objectForKey:@"USER_ID"] forKey:@"usrId"];
            [sendFileParam setObject:myUserNo forKey:@"usrNo"];
            [sendFileParam setObject:@"1" forKey:@"refTy"];
            [sendFileParam setObject:self.postNo forKey:@"refNo"];
            [sendFileParam setObject:aditJsonData forKey:@"aditInfo"];
            
            NSString *urlString = appDelegate.main_url;
            urlString = [urlString stringByAppendingPathComponent:@"saveAttachedFile"];

            [self sessionFileUpload:urlString :sendFileParam :data :fileName];
        }
        
    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}

- (NSString *)createFileName{
    @try{
        NSString *fileName = nil;
        NSDate *today = [NSDate date];
        NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
        //[dateFormatter setDateFormat:@"yyMMdd-HHmmss.SSS"];
        [dateFormatter setDateFormat:@"yyMMdd-HHmmssSSS"];
        NSString *currentTime = [dateFormatter stringFromDate:today];
        NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"USER_ID"];
        fileName = [NSString stringWithFormat:@"%@(%@).png",userID,currentTime];
        return fileName;
        
    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}

-(void)sessionFileUpload :(NSString *)urlString :(NSMutableDictionary *)sendFileParam :(NSData *)data :(NSString *)fileName{
    MFURLSessionUpload *sessionUpload = [[MFURLSessionUpload alloc]initWithURL:[NSURL URLWithString:urlString] option:sendFileParam WithData:data AndFileName:fileName];
    sessionUpload.delegate = self;
    if ([sessionUpload start]) {
        [SVProgressHUD show];
    }
}
    

#pragma mark - MFURLSession Delegate
- (void)returnDataWithObject:(MFURLSession *)session error:(NSString *)error{
    if (error != nil) {
        NSString *errorMsg = [NSString stringWithFormat:@"%@\n%@",session.url,error];
        
        UIAlertView *alert = [[UIAlertView alloc]initWithTitle:NSLocalizedString(@"msg18", @"") message:errorMsg delegate:self cancelButtonTitle:NSLocalizedString(@"msg3", @"") otherButtonTitles:nil, nil];
        [alert show];
    }else{
        NSLog(@"dic : %@",session.returnDictionary);
        NSString *wsName = [[session.url absoluteString] lastPathComponent];
        NSString *result = [session.returnDictionary objectForKey:@"RESULT"];
        //NSLog(@"wsName : %@",wsName);
        if ([result isEqualToString:@"SUCCESS"]) {
            if ([wsName isEqualToString:@"getPostNo"]) {
                
                @try {
                    NSLog(@"result dataArr : %@", dataArr);
                    self.postNo = [[[session.returnDictionary objectForKey:@"DATASET"] objectAtIndex:0] objectForKey:@"SEQ"];
                    if(self.contentImageArray.count>0){
                        [self saveAttachedFile];
                    } else {
                        NSError *error;
                        NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dataArr options:0 error:&error];
                        NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
                        
                        NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
                        NSString *myUserNo = [prefs objectForKey:@"CUSER_NO"];
                        
                        NSString *paramString = [NSString stringWithFormat:@"usrNo=%@&snsNo=%@&postNo=%@&content=%@",myUserNo, self.snsNo, self.postNo, jsonString];
                        [self callWebService:@"savePost" WithParameter:paramString];
                    }
                } @catch (NSException *exception) {
                    NSLog(@"%s Exception : %@", __func__, exception);
                }
                
            }else if ([wsName isEqualToString:@"savePost"]) {
                @try {
                    NSString *affected = [session.returnDictionary objectForKey:@"AFFECTED"];
                    if ([affected intValue]>0) {
                        [self dismissViewControllerAnimated:YES completion:^(void){
                            [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_SavePost" object:nil userInfo:@{@"RESULT":@"SUCCESS"}];
                            [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_PostModify" object:nil];
                        }];
                        
                    }
                } @catch (NSException *exception) {
                    NSLog(@"%s Exception : %@", __func__, exception);
                }
            }
        }else{
            NSString *errorMsg = [NSString stringWithFormat:@"%@\n%@",session.url,error];
            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:NSLocalizedString(@"msg18", @"") message:errorMsg delegate:self cancelButtonTitle:NSLocalizedString(@"msg3", @"") otherButtonTitles:nil, nil];
            [alert show];
        }
    }
    [SVProgressHUD dismiss];
}

- (void)returnError:(MFURLSession *)session error:(NSError *)error{
    NSLog(@"error : %@", error);
}

-(void)imageToUrlString{
    int changeCnt = 0;
    
    @try {
        for(int i=0; i<dataArr.count; i++){
            NSString *type = [[dataArr objectAtIndex:i] objectForKey:@"TYPE"];
            
            if([type isEqualToString:@"IMG"]){
                NSString *imagePath = [self.imageFilePathArray objectAtIndex:changeCnt];
                if(changeCnt<=fileNameCnt){
                    [[dataArr objectAtIndex:i] setObject:imagePath forKey:@"VALUE"];
                }
                changeCnt++;
            }
        }
    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
}

#pragma mark - MFURLSession Upload Delegate
-(void)returnDictionary:(NSDictionary *)dictionary WithError:(NSString *)error{
    @try{
        uploadCount++;
        if (error != nil) {
//            SCLAlertView *alert = [[SCLAlertView alloc] init];
//            [alert showError:self title:NSLocalizedString(@"오류", @"오류")
//                    subTitle:error
//            closeButtonTitle:NSLocalizedString(@"확인", @"확인") duration:0.0f];
            UIAlertController *alert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"오류", @"오류") message:error preferredStyle:UIAlertControllerStyleAlert];
            UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                             handler:^(UIAlertAction * action) {
                                                                 [alert dismissViewControllerAnimated:YES completion:nil];
                                                             }];
            [alert addAction:okButton];
            [self presentViewController:alert animated:YES completion:nil];
            
        }else{
            [SVProgressHUD show];
            NSLog(@"dictionary : %@", dictionary);
            
            NSString *result = [dictionary objectForKey:@"RESULT"];
            if ([result isEqualToString:@"SUCCESS"]) {
                if ([dictionary objectForKey:@"FILE_URL"]==nil) {
                    NSLog(@"error");
                    
                }else{
                    NSLog(@"uploadCount : %d, contentImageArray.count : %lu", uploadCount, (unsigned long)self.contentImageArray.count);
                    
                    [self.imageFilePathArray addObject:[dictionary objectForKey:@"FILE_URL"]];
                    fileNameCnt++;
                    
                    if(uploadCount<self.contentImageArray.count){
                        //첫번째 파일 먼저 올리고, 순차적으로 업로드 하기 위해 재호출.
                        UIImage *image = [self.contentImageArray objectAtIndex:uploadCount];
                        NSData * data = UIImageJPEGRepresentation(image, 0.1);
                        NSString *fileName = [self.fileNameArray objectAtIndex:uploadCount];
                        [self saveAttachedFile:data AndFileName:fileName];
                    
                    } else if (uploadCount==self.contentImageArray.count) {
                        //dataArr에 있는 이미지데이터를 URL String으로 바꾸기위해.
                        [self imageToUrlString];
                        
                        NSError *error;
                        NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dataArr options:0 error:&error];
                        NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
                        
                        NSLog(@"jsonString : %@", jsonString);
                        
                        NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
                        NSString *myUserNo = [prefs objectForKey:@"CUSER_NO"];
                        
                        [SVProgressHUD dismiss];
                        NSString *paramString = [NSString stringWithFormat:@"usrNo=%@&snsNo=%@&postNo=%@&content=%@", myUserNo, self.snsNo, self.postNo, jsonString];
                        [self callWebService:@"savePost" WithParameter:paramString];
                    }
                }
                
            } else {
                NSLog(@"업로드실패");
                
                uploadCount = 0;
                fileNameCnt = 0;
                
                UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"업로드실패" message:@"재시도 하시겠습니까?" preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction * action) {
                                                                     [alert dismissViewControllerAnimated:YES completion:nil];
                                                                     [self saveButtonPressed:nil];
                                                                 }];
                
                UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * action) {
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                     }];
                
                [alert addAction:okButton];
                [alert addAction:cancelButton];
                [self presentViewController:alert animated:YES completion:nil];
            }
        }
    } @catch (NSException *exception) {
        NSLog(@"%s Exception : %@", __func__, exception);
    }
    
    [SVProgressHUD dismiss];
}

- (void)returnResponse:(NSURLResponse *)response WithError:(NSString *)error{
    NSLog(@"%s, %@", __func__, error);
}


#pragma mark - Navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(getImageNotification:)
                                                 name:@"getImageNotification"
                                               object:nil];
    
    if ([[segue identifier] isEqualToString:@"POST_PHLIB_MODAL"]) {
        UINavigationController *destination = segue.destinationViewController;
        PHLibListViewController *vc = [[destination childViewControllers] objectAtIndex:0];
        vc.fromSegue = segue.identifier;
    }
}


@end
