//
//  BoardCreateViewController.m
//  mfinity_sns
//
//  Created by hilee on 2018. 1. 2..
//  Copyright © 2018년 com.dbvalley. All rights reserved.
//

#import "BoardCreateViewController.h"
#import "BoardCreateViewCell.h"
#import "MyMessageViewController.h"
#import "MFStyle.h"
#import "MFDBHelper.h"
#import "UIViewController+MJPopupViewController.h"
#import "BoardTypeViewController.h"
#import "ChangeLeaderViewController.h"
#import "PHLibListViewController.h"

#define DEGREES_TO_RADIANS(angle) ((angle) / 180.0 * M_PI)

@interface BoardCreateViewController () {
    NSString *currCover;
    NSString *snsName;
    NSString *snsLeader;
    NSString *snsLeaderNo;
    NSString *snsKind;
    NSString *snsType;
    NSString *snsAllow;
    NSString *snsDesc;
    
    NSDictionary *snsKindDic;
    NSDictionary *snsTypeDic;
    NSDictionary *snsAllowDic;
    
    NSData *coverImgData;
    UIImage *coverImg;
    NSString *coverUrl;
    
    NSString *myUserNo;
    NSString *compNo;
    
    BOOL isChangeCover;
    
    NSMutableDictionary *editSnsInfo;
    AppDelegate *appDelegate;
}

@end

@implementation BoardCreateViewController

-(void)viewWillAppear:(BOOL)animated{
    NSLog(@"BoardCreateViewController fromSegue : %@", self.fromSegue);
    
    appDelegate = (AppDelegate *)[UIApplication sharedApplication].delegate;

    self.navigationController.navigationBar.translucent = NO;
    self.navigationController.navigationBar.barTintColor = [MFUtil myRGBfromHex:@"1D4696"];
//    UIView *statusBar = [[[UIApplication sharedApplication] valueForKey:@"statusBarWindow"] valueForKey:@"statusBar"];
//    statusBar.backgroundColor = [MFUtil myRGBfromHex:@"1D4696"];
//    self.navigationController.navigationBar.backgroundColor = [MFUtil myRGBfromHex:@"1D4696"];
    self.navigationController.navigationBar.tintColor = [UIColor whiteColor];
    
    if([self.fromSegue isEqualToString:@"BOARD_MODIFY_PUSH"]){
        self.navigationItem.titleView = [MFStyle navigationTitleStyle1:NSLocalizedString(@"게시판 설정 변경", @"게시판 설정 변경")];
        self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]initWithTitle:NSLocalizedString(@"저장", @"저장")
                                                                                 style:UIBarButtonItemStylePlain
                                                                                target:self
                                                                                action:@selector(rightSideMenuButtonPressed:)];
    } else {
        self.navigationItem.titleView = [MFStyle navigationTitleStyle1:NSLocalizedString(@"게시판 만들기", @"게시판 만들기")];
        self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]initWithTitle:NSLocalizedString(@"msg3", @"")
                                                                                 style:UIBarButtonItemStylePlain
                                                                                target:self
                                                                                action:@selector(rightSideMenuButtonPressed:)];
        self.navigationItem.leftBarButtonItem =[[UIBarButtonItem alloc]initWithImage:[self getScaledImage:[UIImage imageNamed:@"btn_close.png"] scaledToMaxWidth:20] style:UIBarButtonItemStylePlain target:self action:@selector(closeButtonClick)];
    }
    
}

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    appDelegate = (AppDelegate *)[UIApplication sharedApplication].delegate;
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_ChangeSubInfo1:) name:@"noti_ChangeSubInfo1" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_ChangeSubInfo2:) name:@"noti_ChangeSubInfo2" object:nil];
    
    self.snsNo = nil;
    editSnsInfo = [NSMutableDictionary dictionary];
    isChangeCover = NO;
    
    self.imgView.hidden=YES;
    self.coverEditBtn.hidden=YES;
    
    self.iconView.image = [self getScaledImage:[UIImage imageNamed:@"icon_plus.png"] scaledToMaxWidth:30.0f];
    self.descLabel.text = @"대표이미지 추가 \n추가하지 않을 경우 기본 이미지가 적용됩니다.";
    
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapOnCoverImg:)];
    [self.imgView setUserInteractionEnabled:YES];
    [self.imgView addGestureRecognizer:tap];
    [self.view1 setUserInteractionEnabled:YES];
    [self.view1 addGestureRecognizer:tap];
    
    [self.coverEditBtn addTarget:self action:@selector(boardCoverEditClick) forControlEvents:UIControlEventTouchUpInside];
    
    UIView *lineView = [[UIView alloc] initWithFrame:CGRectMake(0, self.view1.frame.size.height, self.view.frame.size.width, 0.5)];
    lineView.backgroundColor = [UIColor lightGrayColor];
    [self.view1 addSubview:lineView];
    
    self.keyArray = [NSArray array];
    
    snsKindDic = [[NSDictionary alloc] initWithObjectsAndKeys:@"일반형",@"1", @"프로젝트형",@"2", nil];
    snsTypeDic = [[NSDictionary alloc] initWithObjectsAndKeys:@"공개",@"3", /*@"이름공개",@"2",*/ @"비공개",@"1", nil];
    snsAllowDic = [[NSDictionary alloc] initWithObjectsAndKeys:@"비승인",@"0", @"승인",@"1", nil];
    
    NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
    myUserNo = [prefs objectForKey:@"CUSER_NO"];
    compNo = [prefs objectForKey:@"COMP_NO"];
    
    [self drawContent];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

-(void)closeButtonClick{
    [self dismissViewControllerAnimated:YES completion:nil];
}

-(void)drawContent {
    @try{
        if([self.fromSegue isEqualToString:@"BOARD_MODIFY_PUSH"]){
            NSLog(@"snsInfoDic : %@", self.snsInfoDic);
            //NSLog(@"_currSnsKind : %d", _currSnsKind);
            
            if(_currSnsKind==1){
                self.keyArray = @[@"이름", @"리더", @"타입", @"공개 여부", @"가입시 승인 여부", @"게시판 설명"];
            } else if(_currSnsKind==2){
                self.keyArray = @[@"이름", @"리더", @"타입", @"게시판 설명"];
            }
            
            self.snsNo = [self.snsInfoDic objectForKey:@"SNS_NO"];
            currCover = [NSString urlDecodeString:[self.snsInfoDic objectForKey:@"COVER_IMG"]];
            snsName = [NSString urlDecodeString:[self.snsInfoDic objectForKey:@"SNS_NM"]];
            snsLeader = [NSString urlDecodeString:[self.snsInfoDic objectForKey:@"CREATE_USER_NM"]];
            snsLeaderNo = [self.snsInfoDic objectForKey:@"CREATE_USER_NO"];
            snsKind = [self.snsInfoDic objectForKey:@"SNS_KIND"];
            snsType = [self.snsInfoDic objectForKey:@"SNS_TY"];
            snsAllow = [self.snsInfoDic objectForKey:@"NEED_ALLOW"];
            snsDesc = [NSString urlDecodeString:[self.snsInfoDic objectForKey:@"SNS_DESC"]];
            
            if([snsKind isEqualToString:@"Normal"]) snsKind = @"1";
            else if([snsKind isEqualToString:@"Project"]) snsKind = @"2";
            
            if([snsType isEqualToString:@"Public"]) snsType = @"3";
            //else if([snsType isEqualToString:@"Closed"]) snsType = @"2";
            else if([snsType isEqualToString:@"Secret"]) snsType = @"1";
            
            if([snsDesc isEqualToString:@"(null)"]) snsDesc = @"";
            
            if(![currCover isEqualToString:@""]&&![currCover isEqualToString:@"null"]&&currCover!=nil){
                MFDBHelper *dbHelper = [[MFDBHelper alloc]init];
                UIImage *image = [dbHelper saveThumbImage:@"cover" :currCover];
                if(image!=nil){
                    UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(self.imgView.frame.size.width, self.imgView.frame.size.height) :[dbHelper saveThumbImage:@"cover" :currCover]];
                    self.imgView.image = postCover;
                } else {
                    UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(self.imgView.frame.size.width, self.imgView.frame.size.height) :[UIImage imageNamed:@"cover2-2.png"]];
                    self.imgView.image = postCover;
                }
                
            } else {
                UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(self.imgView.frame.size.width, self.imgView.frame.size.height) :[UIImage imageNamed:@"cover2-2.png"]];
                self.imgView.image = postCover;
            }
            
            self.imgView.hidden = NO;
            self.coverEditBtn.hidden = NO;
            
        } else {
            self.keyArray = @[@"이름", @"타입", @"공개 여부", @"가입시 승인 여부", @"게시판 설명"];
            
            snsKind = @"1";
            snsType = @"3";
            snsAllow = @"0";
        }
        
        [self.tableView reloadData];
        
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

-(void)rightSideMenuButtonPressed:(id)sender{
    //NSLog(@"Name : %@, Type : %@, Public : %@, Allow : %@, Desc : %@", snsName, snsType, snsPublic, snsAllow, snsDesc);
    @try{
        snsName = [snsName stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
        if(snsName!=nil&&![snsName isEqualToString:@""]){
            if([self.fromSegue isEqualToString:@"BOARD_MODIFY_PUSH"]){
                //NSLog(@"isChangeCover : %d", isChangeCover);
                if(isChangeCover) {
                    [self saveAttachedFile:coverImgData AndFileName:[self createFileName]];
                } else {
                    [self callWebService:@"createSNS"];
                }
                
            } else {
                [self callWebService:@"getSNSNo"];
            }
            
        } else {
            UIAlertController * alert = [UIAlertController alertControllerWithTitle:nil message:@"게시판 이름을 입력해주세요." preferredStyle:UIAlertControllerStyleAlert];
            [self presentViewController:alert animated:YES completion:nil];
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                [alert dismissViewControllerAnimated:YES completion:nil];
            });
        }
        
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}
-(void)closeModal:(id)sender {
    NSLog(@"%s", __func__);
    [self dismissViewControllerAnimated:YES completion:nil];
}

- (void)tapOnCoverImg:(UITapGestureRecognizer*)tap{
    NSLog(@"%s", __func__);
    [self boardCoverEditClick];
}

- (void)boardCoverEditClick {
    UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:nil message:nil preferredStyle:UIAlertControllerStyleActionSheet];
    UIAlertAction *takePictureAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"사진촬영", @"사진촬영")
                                                                style:UIAlertActionStyleDefault
                                                              handler:^(UIAlertAction * action){
                                                                  if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera]) {
                                                                      [self cameraAccessCheck];
                                                                  }else{
                                                                      [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                                  }
                                                                  
                                                              }];
    
    UIAlertAction *selectPhotoAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"사진선택", @"사진선택")
                                                                style:UIAlertActionStyleDefault
                                                              handler:^(UIAlertAction * action){
                                                                  [self photoAccessCheck:@"PHOTO"];
                                                                  [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                              }];
    
    if(coverImg!=nil){
        UIAlertAction *defaultImageAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"기본이미지로 변경", @"기본이미지로 변경")
                                                                     style:UIAlertActionStyleDefault
                                                                   handler:^(UIAlertAction * action){
                                                                       UIAlertView *alert = [[UIAlertView alloc]initWithTitle:nil message:@"기본이미지로 변경하시겠습니까?" delegate:self cancelButtonTitle:@"취소" otherButtonTitles:@"확인", nil];
                                                                       alert.tag = 1;
                                                                       [alert show];
                                                                       
                                                                       [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                                   }];
        
        [actionSheet addAction:defaultImageAction];
    }
    
    [actionSheet addAction:takePictureAction];
    [actionSheet addAction:selectPhotoAction];
    
    if([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad){
        UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"취소", @"취소")
                                                               style:UIAlertActionStyleDefault
                                                             handler:^(UIAlertAction * action){
                                                                 [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                             }];
        [actionSheet addAction:cancelAction];
        
        [actionSheet.popoverPresentationController setPermittedArrowDirections:0];
        CGRect rect = self.view.frame;
        rect.origin.x = (self.view.frame.size.width/2)-(actionSheet.view.frame.size.width/2);
        rect.origin.y = (self.view.frame.size.height/2)-(actionSheet.view.frame.size.height/2);
        actionSheet.popoverPresentationController.sourceView = self.view;
        actionSheet.popoverPresentationController.sourceRect = rect;
        
    } else {
        UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"취소", @"취소")
                                                               style:UIAlertActionStyleCancel
                                                             handler:^(UIAlertAction * action){
                                                                 [actionSheet dismissViewControllerAnimated:YES completion:nil];
                                                             }];
        [actionSheet addAction:cancelAction];
    }
    
    [self presentViewController:actionSheet animated:YES completion:nil];
}

- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {
    if(alertView.tag == 1 && buttonIndex == 1){
        coverImg = nil;
        self.imgView.image = nil;
        self.imgView.hidden = YES;
        self.coverEditBtn.hidden = YES;
        [self.tableView reloadData];
    }
}

- (void)cameraAccessCheck {
    //NSLog(@"%s", __func__);
    @try{
        int osVer = [[UIDevice currentDevice].systemVersion floatValue];
        //NSLog(@"OS VER : %d", osVer);
        [self photoAccessCheck:@"CAMERA"];
        
        AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];
        if(status == AVAuthorizationStatusAuthorized) {
            //NSLog(@"AVAuthorizationStatusAuthorized status : %ld", (long)status);
            NSLog(@"카메라 접근 허용일 경우");
            dispatch_async(dispatch_get_main_queue(), ^{
                self.picker = [[UIImagePickerController alloc] init];
                self.picker.delegate = self;
                self.picker.sourceType = UIImagePickerControllerSourceTypeCamera;
                [self presentViewController:self.picker animated:YES completion:nil];
            });
            
        } else if(status == AVAuthorizationStatusDenied) {
            //NSLog(@"AVAuthorizationStatusDenied status : %ld", (long)status);
            NSLog(@"카메라 접근 허용되지않았을 경우");
            if(osVer >= 8){
                UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 카메라]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction * action) {
                                                                     NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                     [[UIApplication sharedApplication] openURL:url];
                                                                     
                                                                     [alert dismissViewControllerAnimated:YES completion:nil];
                                                                 }];
                
                UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * action) {
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                     }];
                [alert addAction:okButton];
                [alert addAction:cancelButton];
                [self presentViewController:alert animated:YES completion:nil];
                
            } else {
                UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 카메라]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction * action) {
                                                                     NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                     [[UIApplication sharedApplication] openURL:url];
                                                                     
                                                                     [alert dismissViewControllerAnimated:YES completion:nil];
                                                                 }];
                
                UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * action) {
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                     }];
                [alert addAction:okButton];
                [alert addAction:cancelButton];
                [self presentViewController:alert animated:YES completion:nil];
            }
            
        } else if(status == AVAuthorizationStatusNotDetermined){ // not determined
            //NSLog(@"AVAuthorizationStatusNotDetermined status : %ld", (long)status);
            [AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted) {
                if(granted){ // Access has been granted ..do something
                    dispatch_async(dispatch_get_main_queue(), ^{
                        self.picker = [[UIImagePickerController alloc] init];
                        self.picker.delegate = self;
                        self.picker.sourceType = UIImagePickerControllerSourceTypeCamera;
                        [self presentViewController:self.picker animated:YES completion:nil];
                    });
                    
                } else { // Access denied ..do something
                    if(osVer >= 8){
                        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 카메라]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
                        UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                         handler:^(UIAlertAction * action) {
                                                                             NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                             [[UIApplication sharedApplication] openURL:url];
                                                                             
                                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                                         }];
                        
                        UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                             handler:^(UIAlertAction * action) {
                                                                                 [alert dismissViewControllerAnimated:YES completion:nil];
                                                                             }];
                        [alert addAction:okButton];
                        [alert addAction:cancelButton];
                        [self presentViewController:alert animated:YES completion:nil];
                        
                    } else {
                        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 카메라]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
                        UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                         handler:^(UIAlertAction * action) {
                                                                             NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                             [[UIApplication sharedApplication] openURL:url];
                                                                             
                                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                                         }];
                        
                        UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                             handler:^(UIAlertAction * action) {
                                                                                 [alert dismissViewControllerAnimated:YES completion:nil];
                                                                             }];
                        [alert addAction:okButton];
                        [alert addAction:cancelButton];
                        [self presentViewController:alert animated:YES completion:nil];
                    }
                    
                }
            }];
        } else {
            NSLog(@"status : %ld", (long)status);
        }
        
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

- (void)photoAccessCheck :(NSString *)mediaType{
    //NSLog(@"%s", __func__);
    @try{
        int osVer = [[UIDevice currentDevice].systemVersion floatValue];
        PHAuthorizationStatus photoStatus = [PHPhotoLibrary authorizationStatus];
        
        if (photoStatus == PHAuthorizationStatusAuthorized) {
            //NSLog(@"Access has been granted.");
            if([mediaType isEqualToString:@"PHOTO"]){
                [self performSegueWithIdentifier:@"BOARD_PHLIB_MODAL" sender:@"PHOTO"];
            }
            
        } else if (photoStatus == PHAuthorizationStatusDenied) {
            //NSLog(@"Access has been denied.");
            if(osVer >= 8){
                UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 사진]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction * action) {
                                                                     NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                     [[UIApplication sharedApplication] openURL:url];
                                                                     
                                                                     [alert dismissViewControllerAnimated:YES completion:nil];
                                                                 }];
                
                UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * action) {
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                     }];
                [alert addAction:okButton];
                [alert addAction:cancelButton];
                [self presentViewController:alert animated:YES completion:nil];
                
            } else {
                UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:@"기기의 [설정 > 개인정보보호 > 사진]에서 MFINITY_SNS 앱을 켜주세요." preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction * action) {
                                                                     NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                                                                     [[UIApplication sharedApplication] openURL:url];
                                                                     
                                                                     [alert dismissViewControllerAnimated:YES completion:nil];
                                                                 }];
                
                UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * action) {
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                     }];
                [alert addAction:okButton];
                [alert addAction:cancelButton];
                [self presentViewController:alert animated:YES completion:nil];
            }
            
        } else if (photoStatus == PHAuthorizationStatusNotDetermined) {
            [PHPhotoLibrary requestAuthorization:^(PHAuthorizationStatus status) {
                if (status == PHAuthorizationStatusAuthorized) {
                    NSLog(@"1 StatusNotDetermined Access has been granted.");
                    if([mediaType isEqualToString:@"PHOTO"]){
                        dispatch_async(dispatch_get_main_queue(), ^{
                            [self performSegueWithIdentifier:@"BOARD_PHLIB_MODAL" sender:@"PHOTO"];
                        });
                    }
                    
                } else {
                    NSLog(@"2 StatusNotDetermined Access has been granted.");
                }
            }];
        } else if (photoStatus == PHAuthorizationStatusRestricted) {
            NSLog(@"Restricted access - normally won't happen.");
        }
        
        return;
        
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

- (void)saveAttachedFile:(NSDictionary *)userInfo{
    self.imgView.hidden = NO;
    self.coverEditBtn.hidden = NO;
    coverImg = nil;
    
    @try{
        self.assetArray = [userInfo objectForKey:@"ASSET_LIST"];
        
        //사진앨범에서 선택
        if(self.assetArray.count > 0){
            for (int i=0; i<self.imageArray.count; i++) {
                self.asset = [[userInfo objectForKey:@"ASSET_LIST"] objectAtIndex:i];
                
                /*
                 float ver = [[[UIDevice currentDevice] systemVersion] floatValue];
                 if (ver >= 9.0) {
                 NSArray *resources = [PHAssetResource assetResourcesForAsset:self.asset];
                 orgFilename = ((PHAssetResource*)resources[0]).originalFilename;
                 
                 } else {
                 PHImageRequestOptions *option = [PHImageRequestOptions new];
                 option.synchronous = YES;
                 option.networkAccessAllowed = YES;
                 [[PHImageManager defaultManager] requestImageForAsset:self.asset targetSize:[self targetSize] contentMode:PHImageContentModeAspectFill options:option resultHandler:^(UIImage *result, NSDictionary *info) {
                 NSURL* fileURL = [info objectForKey:@"PHImageFileURLKey"];
                 orgFilename = [[NSFileManager defaultManager] displayNameAtPath:[fileURL path]];
                 }];
                 }
                 */
                
                UIImage *image = [self.imageArray objectAtIndex:i];
                NSData * data = UIImageJPEGRepresentation(image, 0.3);
                coverImgData = data;
                
                if(image!=nil){
                    coverImg = [self imageByScalingAndCroppingForSize:CGSizeMake(self.imgView.frame.size.width, self.imgView.frame.size.height):image];
                } else {
                    self.imgView.hidden = YES;
                    self.coverEditBtn.hidden = YES;
                    coverImg = nil;
                }
            }
            
        } else {
            //사진촬영
            NSString *aditInfo = [userInfo objectForKey:@"ADIT_INFO"];
            
            NSData* imgData = [[NSFileManager defaultManager] contentsAtPath:aditInfo];
            UIImage *image = [UIImage imageWithData:imgData];
            NSData * data = UIImageJPEGRepresentation(image, 0.3);
            coverImgData = data;
            
            if(image!=nil){
                coverImg = [self imageByScalingAndCroppingForSize:CGSizeMake(self.imgView.frame.size.width, self.imgView.frame.size.height):image];
            } else {
                self.imgView.hidden = YES;
                self.coverEditBtn.hidden = YES;
                coverImg = nil;
            }
        }
        
        self.imgView.image = coverImg;
        [self.tableView reloadData];
        
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

- (void)saveAttachedFile:(NSData *)data AndFileName:(NSString *)fileName{
    NSLog(@"fileName : %@", fileName);
    @try{
        NSString *dvcID =  [[NSUserDefaults standardUserDefaults] objectForKey:@"DVC_ID"];//[MFUtil getUUID];
        NSMutableDictionary *aditDic = [NSMutableDictionary dictionary];
        [aditDic setObject:@1 forKey:@"TMP_NO"];
        [aditDic setObject:dvcID forKey:@"DEVICE_ID"];
        
        NSData* aditData = [NSJSONSerialization dataWithJSONObject:aditDic options:0 error:nil];
        NSString* aditJsonData = [[NSString alloc] initWithData:aditData encoding:NSUTF8StringEncoding];
        
        NSMutableDictionary *sendFileParam = [NSMutableDictionary dictionary];
        [sendFileParam setObject:[[NSUserDefaults standardUserDefaults] objectForKey:@"USER_ID"] forKey:@"usrId"];
        [sendFileParam setObject:self.snsNo forKey:@"snsNo"];
        [sendFileParam setObject:@"0" forKey:@"refTy"];
        [sendFileParam setObject:myUserNo forKey:@"refNo"];
        [sendFileParam setObject:aditJsonData forKey:@"aditInfo"];
        
        NSString *urlString = appDelegate.main_url;
        urlString = [urlString stringByAppendingPathComponent:@"saveAttachedFile"];
        
        MFURLSessionUpload *sessionUpload = [[MFURLSessionUpload alloc]initWithURL:[NSURL URLWithString:urlString] option:sendFileParam WithData:data AndFileName:fileName];
        sessionUpload.delegate = self;
        if ([sessionUpload start]) {
            [SVProgressHUD show];
        }
        
    } @catch(NSException *exception){
        [self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

- (NSString *)createFileName{
    @try{
        NSString *fileName = nil;
        NSDate *today = [NSDate date];
        NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
        [dateFormatter setDateFormat:@"yyMMdd-HHmmss"];
        NSString *currentTime = [dateFormatter stringFromDate:today];
        NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"USER_ID"];
        fileName = [NSString stringWithFormat:@"%@(%@).png",userID,currentTime];
        return fileName;
        
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

- (void)callWebService:(NSString *)serviceName{
    NSString *urlString = appDelegate.main_url;
    NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:serviceName]];
    NSString *paramString = nil;
    
    @try{
        if([serviceName isEqualToString:@"getSNSNo"]){
            paramString = [NSString stringWithFormat:@"usrNo=%@&compNo=%@&snsKind=%@", myUserNo, compNo, snsKind];
        } else if([serviceName isEqualToString:@"createSNS"]){
            //targetUserNo : 리더위임시 위임된 유저번호, 위임이 아닐경우 usrNo와 같은값
            //isCreateSNS("true":생성 or "false":수정)
            //NSLog(@"snsKind : %@", snsKind);
            
            //if([snsKind isEqualToString:@"1"]) snsKind = @"Normal";
            //else snsKind = @"Project";
            
            //NSString *mfpsId = [NSString stringWithFormat:@"USER.%@.%@", [[NSUserDefaults standardUserDefaults] objectForKey:@"USER_ID"], [MFUtil getUUID]];
            NSString *mfpsId = [NSString stringWithFormat:@"USER.%@.%@", [[NSUserDefaults standardUserDefaults] objectForKey:@"USER_ID"], [[NSUserDefaults standardUserDefaults] objectForKey:@"DVC_ID"]];
            
            if(!isChangeCover) coverUrl = currCover;
            else isChangeCover = NO;
            
            if(snsDesc==nil) snsDesc = @"";
            
            NSString *isCreateSns = nil;
            if([self.fromSegue isEqualToString:@"BOARD_MODIFY_PUSH"]) {
                isCreateSns = @"false";
                
                [editSnsInfo setValue:[self.snsInfoDic objectForKey:@"COMP_NO"] forKey:@"COMP_NO"];
                [editSnsInfo setValue:[self.snsInfoDic objectForKey:@"CREATE_DATE"] forKey:@"CREATE_DATE"];
                [editSnsInfo setValue:snsLeaderNo forKey:@"CREATE_USER_NO"];
                [editSnsInfo setValue:snsLeader forKey:@"CREATE_USER_NM"];
                [editSnsInfo setValue:[self.snsInfoDic objectForKey:@"ITEM_TYPE"] forKey:@"ITEM_TYPE"];
                [editSnsInfo setValue:[self.snsInfoDic objectForKey:@"SNS_NO"]  forKey:@"SNS_NO"];
                [editSnsInfo setValue:[self.snsInfoDic objectForKey:@"SORT_NO"] forKey:@"SORT_NO"];
                [editSnsInfo setValue:[self.snsInfoDic objectForKey:@"USER_COUNT"] forKey:@"USER_COUNT"];
                [editSnsInfo setValue:[self.snsInfoDic objectForKey:@"USER_LIST"] forKey:@"USER_LIST"];
                [editSnsInfo setValue:[self.snsInfoDic objectForKey:@"WAITING_USER_COUNT"] forKey:@"WAITING_USER_COUNT"];
                [editSnsInfo setValue:coverUrl forKey:@"COVER_IMG"];
                [editSnsInfo setValue:snsName forKey:@"SNS_NM"];
                [editSnsInfo setValue:snsType forKey:@"SNS_TY"];
                [editSnsInfo setValue:snsAllow forKey:@"NEED_ALLOW"];
                [editSnsInfo setValue:snsDesc forKey:@"SNS_DESC"];
                [editSnsInfo setValue:[self.snsInfoDic objectForKey:@"SNS_KIND"] forKey:@"SNS_KIND"];
                
            } else {
                isCreateSns = @"true";
            }
            
            paramString = [NSString stringWithFormat:@"usrNo=%@&targetUserNo=%@&snsNo=%@&snsNm=%@&snsTy=%@&snsNeedAllow=%@&snsDesc=%@&snsCoverImg=%@&compNo=%@&isCreateSNS=%@&mfpsId=%@&snsKind=%@", myUserNo, snsLeaderNo, self.snsNo, snsName, snsType, snsAllow, snsDesc, coverUrl, compNo, isCreateSns, mfpsId, snsKind];
        }
        
        MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
        session.delegate = self;
        if ([session start]) {
            [SVProgressHUD show];
        }
        
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

#pragma mark - MFURLSession Delegate
- (void)returnDataWithObject:(MFURLSession *)session error:(NSString *)error{
    [SVProgressHUD dismiss];
    
    @try{
        NSString *wsName = [[session.url absoluteString] lastPathComponent];
        
        if (error!=nil || ![error isEqualToString:@"(null)"]) {
            NSDictionary *dic = session.returnDictionary;
            //NSLog(@"dic: %@", dic);
            
            if ([[dic objectForKey:@"RESULT"]isEqualToString:@"SUCCESS"]) {
                if ([wsName isEqualToString:@"getSNSNo"]) {
                    NSArray *dataSet = [dic objectForKey:@"DATASET"];
                    self.snsNo = [[dataSet objectAtIndex:0] objectForKey:@"SEQ"];
                    if(coverImg!=nil) {
                        [self saveAttachedFile:coverImgData AndFileName:[self createFileName]];
                    } else {
                        [self callWebService:@"createSNS"];
                    }
                    
                } else if([wsName isEqualToString:@"createSNS"]){
                    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
                    [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
                    NSString *today = [dateFormatter stringFromDate:[NSDate date]];
                    
                    MFDBHelper *dbHelper = [[MFDBHelper alloc] init];
                    NSString *sqlString = [NSString stringWithFormat:@"INSERT OR REPLACE INTO SNS(SNS_NO, SNS_NM, SNS_TY, NEED_ALLOW, SNS_DESC, COVER_IMG, CUSER_NO, CREATE_DATE, COMP_NO, SNS_KIND) VALUES(%@, '%@', '%@', '%@', '%@', '%@', %@, '%@', %@, '%@');", self.snsNo, snsName, snsType, snsAllow, snsDesc, coverUrl, snsLeaderNo, today, compNo, snsKind];
                    [dbHelper crudStatement:sqlString];
                    
                    if([self.fromSegue isEqualToString:@"BOARD_MODIFY_PUSH"]){
                        //                    [self dismissViewControllerAnimated:YES completion:^(void){
                        //                        [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_ModifyBoard" object:nil userInfo:editSnsInfo];
                        //                    }];
                        [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_ModifyBoard" object:nil userInfo:editSnsInfo];
                        
                        //[self dismissViewControllerAnimated:YES completion:nil];
                        [self dismissViewControllerAnimated:YES completion:^(void){
                            [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_RefreshTeamSelect"
                                                                                object:nil
                                                                              userInfo:editSnsInfo];
                        }];
                        
                    } else {
                        [self dismissViewControllerAnimated:YES completion:^(void){
                            [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_SaveBoard"
                                                                                object:nil
                                                                              userInfo:@{@"RESULT":@"SUCCESS", @"SNS_KIND":snsKind}];
                        }];
                    }
                    
                    [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_DismissTeamList" object:nil userInfo:nil];
                }
                
            } else {
                UIAlertController* alert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"msg18", @"") message:@"잠시 후 재시도 해주시기 바랍니다." preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction* okAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"msg3", @"") style:UIAlertActionStyleDefault handler:^(UIAlertAction * action) {}];
                [alert addAction:okAction];
                [self presentViewController:alert animated:YES completion:nil];
            }
        }
        
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

#pragma mark - MFURLSessionUpload Delegate
-(void)returnDictionary:(NSDictionary *)dictionary WithError:(NSString *)error{
    NSLog(@"%s, dictionary : %@", __func__, dictionary);
    coverUrl = nil;
    [SVProgressHUD dismiss];
    
    if (error != nil) {
        
    }else{
        if(dictionary != nil){
            [self.imageFileNameArray addObject:[dictionary objectForKey:@"FILE_URL"]];
            
            if ([dictionary objectForKey:@"FILE_URL"]==nil) {
                NSLog(@"error");
            } else{
                coverUrl = [dictionary objectForKey:@"FILE_URL"];
                [self callWebService:@"createSNS"];
            }
        } else {
            //데이터,와이파이 둘 다 꺼져있을경우
            NSLog(@"인터넷 연결이 오프라인으로 나타납니다.");
        }
        
    }
}

- (void)returnResponse:(NSURLResponse *)response WithError:(NSString *)error{
    NSLog(@"%s, %@", __func__, error);
}


#pragma mark - UITableView Delegate & Datasrouce
-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return self.keyArray.count;
}

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    return 45;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    BoardCreateViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"BoardCreateViewCell"];
    if(cell == nil){
        cell = [[BoardCreateViewCell alloc] initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:@"BoardCreateViewCell"];
    }
    
    @try{
        cell.keyLabel.text = [self.keyArray objectAtIndex:indexPath.row];
        
        cell.editButton.imageView.image=nil;
        [cell.editButton setTitleColor:[MFUtil myRGBfromHex:@"1D4696"] forState:UIControlStateNormal];
        
        if(indexPath.row == 0){
            cell.valueLabel.text = [NSString urlDecodeString:snsName];
            [cell.editButton setImage:[self getScaledImage:[UIImage imageNamed:@"btn_edit.png"] scaledToMaxWidth:20.0f] forState:UIControlStateNormal];
            [cell.editButton setTitle:nil forState:UIControlStateNormal];
            
        }
        
        if([self.fromSegue isEqualToString:@"BOARD_MODIFY_PUSH"]){
            if(indexPath.row == 1){
                cell.valueLabel.text = snsLeader;
                [cell.editButton setImage:[self getScaledImage:[UIImage imageNamed:@"btn_tree_close.png"] scaledToMaxWidth:20.0f] forState:UIControlStateNormal];
                [cell.editButton setTitle:nil forState:UIControlStateNormal];
                
            } else if(indexPath.row == 2){
                cell.valueLabel.text = [snsKindDic objectForKey:snsKind];
                [cell.editButton setImage:nil forState:UIControlStateNormal];
                [cell.editButton setTitle:@"변경" forState:UIControlStateNormal];
                cell.editButton.hidden = YES;
                
            }
            
            if(_currSnsKind==1){
                if(indexPath.row == 3){
                    cell.valueLabel.text = [snsTypeDic objectForKey:snsType];
                    [cell.editButton setImage:nil forState:UIControlStateNormal];
                    [cell.editButton setTitle:@"변경" forState:UIControlStateNormal];
                    
                } else if(indexPath.row == 4){
                    cell.valueLabel.text = [snsAllowDic objectForKey:snsAllow];
                    [cell.editButton setImage:nil forState:UIControlStateNormal];
                    [cell.editButton setTitle:@"변경" forState:UIControlStateNormal];
                    
                } else if(indexPath.row == 5){
                    cell.valueLabel.text = snsDesc;
                    [cell.editButton setImage:[self getScaledImage:[UIImage imageNamed:@"btn_edit.png"] scaledToMaxWidth:20.0f] forState:UIControlStateNormal];
                    [cell.editButton setTitle:nil forState:UIControlStateNormal];
                }
            } else if(_currSnsKind==2){
                if(indexPath.row == 3){
                    cell.valueLabel.text = snsDesc;
                    [cell.editButton setImage:[self getScaledImage:[UIImage imageNamed:@"btn_edit.png"] scaledToMaxWidth:20.0f] forState:UIControlStateNormal];
                    [cell.editButton setTitle:nil forState:UIControlStateNormal];
                }
            }
        } else {
            if(indexPath.row == 1){
                cell.valueLabel.text = [snsKindDic objectForKey:snsKind];
                [cell.editButton setImage:nil forState:UIControlStateNormal];
                [cell.editButton setTitle:@"변경" forState:UIControlStateNormal];
                cell.editButton.hidden = NO;
                
                if(appDelegate.use_task) {
                    cell.editButton.hidden = NO;
                }
                else {
                    cell.editButton.hidden = YES;
                    cell.editBtnConstraint.constant = 0;
                    cell.editBtnSpaceConstraint.constant = 0;
                }
                
            } else if(indexPath.row == 2){
                cell.valueLabel.text = [snsTypeDic objectForKey:snsType];
                [cell.editButton setImage:nil forState:UIControlStateNormal];
                [cell.editButton setTitle:@"변경" forState:UIControlStateNormal];
                
                if([snsKind intValue]==1) {
                    cell.editButton.hidden = NO;
                } else if([snsKind intValue]==2){
                    cell.editButton.hidden = YES;
                }
                
            } else if(indexPath.row == 3){
                cell.valueLabel.text = [snsAllowDic objectForKey:snsAllow];
                [cell.editButton setImage:nil forState:UIControlStateNormal];
                [cell.editButton setTitle:@"변경" forState:UIControlStateNormal];
                
                if([snsKind intValue]==1) {
                    cell.editButton.hidden = NO;
                } else if([snsKind intValue]==2){
                    cell.editButton.hidden = YES;
                }
                
            } else if(indexPath.row == 4){
                cell.valueLabel.text = [NSString urlDecodeString:snsDesc];
                [cell.editButton setImage:[self getScaledImage:[UIImage imageNamed:@"btn_edit.png"] scaledToMaxWidth:20.0f] forState:UIControlStateNormal];
                [cell.editButton setTitle:nil forState:UIControlStateNormal];
            }
        }
        
        return cell;
        
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    @try{
        if(indexPath.row == 0){
            [self performSegueWithIdentifier:@"BOARD_TO_MY_MSG_PUSH" sender:indexPath];
            
        }
        
        if([self.fromSegue isEqualToString:@"BOARD_MODIFY_PUSH"]){
            if(indexPath.row == 1){
                [self performSegueWithIdentifier:@"BOARD_CHANGE_LEADER_PUSH" sender:nil];
                
            }
            
            if(_currSnsKind==1){
                if(indexPath.row == 3){
                    NSLog(@"snsType : %@", snsType);
                    BoardTypeViewController *vc = [[BoardTypeViewController alloc] init];
                    vc.fromSegue = @"SELECT_SNS_TYPE";
                    if([snsType integerValue]==3) vc.codeNo=@"0";
                    //else if([snsType integerValue]==2) vc.codeNo=@"1";
                    else if([snsType integerValue]==1) vc.codeNo=@"1";//vc.codeNo=@"2";
                    [self presentPopupViewController:vc animationType:MJPopupViewAnimationFade];
                    
                } else if(indexPath.row == 4){
                    BoardTypeViewController *vc = [[BoardTypeViewController alloc] init];
                    vc.fromSegue = @"SELECT_SNS_ALLOW";
                    vc.codeNo = snsAllow;
                    [self presentPopupViewController:vc animationType:MJPopupViewAnimationFade];
                    
                } else if(indexPath.row == 5){
                    [self performSegueWithIdentifier:@"BOARD_TO_MY_MSG_PUSH" sender:indexPath];
                    
                }
                
            } else if(_currSnsKind==2){
                if(indexPath.row == 3){
                    [self performSegueWithIdentifier:@"BOARD_TO_MY_MSG_PUSH" sender:indexPath];
                }
                
            } else {
                
            }
            
        } else {
            if(indexPath.row == 1){
                BoardTypeViewController *vc = [[BoardTypeViewController alloc] init];
                vc.fromSegue = @"SELECT_SNS_KIND";
                if([snsKind integerValue]==1) vc.codeNo=@"0";
                else if([snsKind integerValue]==2) vc.codeNo=@"1";
                
                if(appDelegate.use_task) [self presentPopupViewController:vc animationType:MJPopupViewAnimationFade];
                
            }
            else if(indexPath.row == 2){
                if([snsKind intValue]==1) {
                    BoardTypeViewController *vc = [[BoardTypeViewController alloc] init];
                    vc.fromSegue = @"SELECT_SNS_TYPE";
                    if([snsType integerValue]==3) vc.codeNo=@"0";
                    //else if([snsType integerValue]==2) vc.codeNo=@"1";
                    else if([snsType integerValue]==1) vc.codeNo=@"1";//vc.codeNo=@"2";
                    [self presentPopupViewController:vc animationType:MJPopupViewAnimationFade];
                }
                
                
            } else if(indexPath.row == 3){
                if([snsKind intValue]==1) {
                    BoardTypeViewController *vc = [[BoardTypeViewController alloc] init];
                    vc.fromSegue = @"SELECT_SNS_ALLOW";
                    vc.codeNo = snsAllow;
                    [self presentPopupViewController:vc animationType:MJPopupViewAnimationFade];
                }
                
            } else if(indexPath.row == 4){
                [self performSegueWithIdentifier:@"BOARD_TO_MY_MSG_PUSH" sender:indexPath];
                
            } else {
                
            }
        }
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender{
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(getImageNotification:) name:@"getImageNotification" object:nil];
    
    @try{
        if([segue.identifier isEqualToString:@"BOARD_TO_MY_MSG_PUSH"]){
            NSIndexPath *indexPath = sender;
            MyMessageViewController *destination = segue.destinationViewController;
            if(indexPath.row==0){
                destination.fromSegue = @"BOARD_MSG_NAME";
                destination.statusMsg = snsName;
            } else {
                destination.fromSegue = @"BOARD_MSG_DESC";
                destination.statusMsg = snsDesc;
            }
        } else if ([segue.identifier isEqualToString:@"BOARD_CHANGE_LEADER_PUSH"]){
            ChangeLeaderViewController *destination = segue.destinationViewController;
            destination.snsNo = self.snsNo;
            destination.leaderNo = snsLeaderNo;
            self.navigationController.navigationBar.topItem.title = @" 리더 위임";
            
        } else if([segue.identifier isEqualToString:@"BOARD_PHLIB_MODAL"]){
            UINavigationController *destination = segue.destinationViewController;
            PHLibListViewController *vc = [[destination childViewControllers] objectAtIndex:0];
            vc.fromSegue = segue.identifier;
        }
        
    } @catch(NSException *exception){
        [self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}

#pragma mark - Notification
- (void)noti_ChangeSubInfo1:(NSNotification *)notification{
    NSString *type = [notification.userInfo objectForKey:@"TYPE"];
    NSIndexPath *indexPath=nil;
    
    @try{
        if([type isEqualToString:@"NAME"]){
            snsName = [notification.userInfo objectForKey:@"SNS_NAME"];
            indexPath = [NSIndexPath indexPathForItem:0 inSection:0];
            
        } else if([type isEqualToString:@"DESC"]){
            snsDesc = [notification.userInfo objectForKey:@"SNS_DESC"];
            
            if([self.fromSegue isEqualToString:@"BOARD_MODIFY_PUSH"]){
                if(_currSnsKind==1){
                    indexPath = [NSIndexPath indexPathForItem:5 inSection:0];
                } else if(_currSnsKind==2){
                    indexPath = [NSIndexPath indexPathForItem:3 inSection:0];
                }
                
            } else {
                indexPath = [NSIndexPath indexPathForItem:4 inSection:0];
            }
        }
        
        [self.tableView beginUpdates];
        [self.tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationNone];
        [self.tableView endUpdates];
        
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}
- (void)noti_ChangeSubInfo2:(NSNotification *)notification{
    NSLog(@"notification userInfo : %@", notification.userInfo);
    
    NSIndexPath *indexPath=nil;
    NSString *type = [notification.userInfo objectForKey:@"TYPE"];
    
    @try{
        if([type isEqualToString:@"KIND"]){
            [self dismissPopupViewControllerWithanimationType:MJPopupViewAnimationFade];
            
            snsKind = [notification.userInfo objectForKey:@"SNS_KIND"];
            if([self.fromSegue isEqualToString:@"BOARD_MODIFY_PUSH"]){
                //indexPath = [NSIndexPath indexPathForItem:2 inSection:0];
                if(_currSnsKind==1){
                    indexPath = [NSIndexPath indexPathForItem:2 inSection:0];
                } else if(_currSnsKind==2){
                    
                }
                
                [self.tableView beginUpdates];
                [self.tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationNone];
                [self.tableView endUpdates];
                
            } else {
                //indexPath = [NSIndexPath indexPathForItem:1 inSection:0];
                [self.tableView reloadData];
            }
            //            [self.tableView beginUpdates];
            //            [self.tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationNone];
            //            [self.tableView endUpdates];
            
        } else if([type isEqualToString:@"TYPE"]){
            [self dismissPopupViewControllerWithanimationType:MJPopupViewAnimationFade];
            
            snsType = [notification.userInfo objectForKey:@"SNS_TYPE"];
            if([self.fromSegue isEqualToString:@"BOARD_MODIFY_PUSH"]){
                //indexPath = [NSIndexPath indexPathForItem:3 inSection:0];
                if(_currSnsKind==1){
                    indexPath = [NSIndexPath indexPathForItem:3 inSection:0];
                } else if(_currSnsKind==2){
                    
                }
            } else {
                indexPath = [NSIndexPath indexPathForItem:2 inSection:0];
            }
            [self.tableView beginUpdates];
            [self.tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationNone];
            [self.tableView endUpdates];
            
        } else if([type isEqualToString:@"ALLOW"]){
            [self dismissPopupViewControllerWithanimationType:MJPopupViewAnimationFade];
            
            snsAllow = [notification.userInfo objectForKey:@"SNS_ALLOW"];
            if([self.fromSegue isEqualToString:@"BOARD_MODIFY_PUSH"]){
                //indexPath = [NSIndexPath indexPathForItem:4 inSection:0];
                if(_currSnsKind==1){
                    indexPath = [NSIndexPath indexPathForItem:4 inSection:0];
                } else if(_currSnsKind==2){
                    
                }
            } else {
                indexPath = [NSIndexPath indexPathForItem:3 inSection:0];
            }
            [self.tableView beginUpdates];
            [self.tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationNone];
            [self.tableView endUpdates];
            
        } else if([type isEqualToString:@"LEADER"]){
            snsLeader = [notification.userInfo objectForKey:@"CREATE_USER_NM"];
            snsLeaderNo = [notification.userInfo objectForKey:@"CREATE_USER_NO"];
            
            [self callWebService:@"createSNS"];
        }
        
    } @catch(NSException *exception){
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}


- (void)getImageNotification:(NSNotification *)notification {
    isChangeCover = YES;
    self.imageArray = [notification.userInfo objectForKey:@"IMG_LIST"];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"getImageNotification" object:nil];
    [self saveAttachedFile:notification.userInfo];
}

#pragma mark - UIImagePickerController Delegate
- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker{
    [picker dismissViewControllerAnimated:YES completion:nil];
}

- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *,id> *)info{
    if ([[info objectForKey:UIImagePickerControllerMediaType] isEqualToString:@"public.movie"]) {
        //        NSURL *mediaUrl = [info objectForKey:UIImagePickerControllerMediaURL];
        //        [picker dismissViewControllerAnimated:YES completion:nil];
        //        UISaveVideoAtPathToSavedPhotosAlbum([mediaUrl path], self,
        //                                            @selector(video:didFinishSavingWithError:contextInfo:), nil);
    }else{
        UIImage *image = [info objectForKey:UIImagePickerControllerOriginalImage];
        [picker dismissViewControllerAnimated:YES completion:nil];
        UIImageWriteToSavedPhotosAlbum(image, self, @selector(image:didFinishSavingWithError:contextInfo:), nil);
    }
}

- (void)image:(UIImage *)image didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo{
    if (error) {
        NSLog(@"error: %@", [error localizedDescription]);
    } else {
        isChangeCover = YES;
        
        NSLog(@"saved photo image : %@", image);
        
        UIImage *rotateImg = nil;
        if(image.size.width>image.size.height){
            rotateImg = [self rotateImage:image byOrientationFlag:image.imageOrientation];
        } else {
            rotateImg = [self rotateImage90:image];
        }
        
        NSString *getFileName = [self createFileName];
        //NSLog(@"getFileName : %@", getFileName);
        
        NSData *imageData = UIImageJPEGRepresentation(rotateImg, 0.1);
        
        NSString *tmpPath = NSTemporaryDirectory();
        NSString *imagePath = [tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"/%@",getFileName]];
        //NSLog(@"imagePath : %@", imagePath);
        [imageData writeToFile:imagePath atomically:YES];
        NSLog(@"사진촬영 원본이미지 : %@", imagePath);
        
        //썸네일이미지 로컬 tmp경로에 저장
        NSData *imageThumbData = UIImagePNGRepresentation([self imageByScalingAndCroppingForSize:CGSizeMake(225, 300) :rotateImg]);
        NSString *imageThumbPath =[tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"mThumb_%@",getFileName]];
        [imageThumbData writeToFile:imageThumbPath atomically:YES];
        NSLog(@"사진촬영 썸네일이미지 : %@", imageThumbPath);
        
        NSMutableDictionary *imageInfoDic = [NSMutableDictionary dictionary];
        [imageInfoDic setObject:imagePath forKey:@"ADIT_INFO"];
        [imageInfoDic setObject:getFileName forKey:@"FILE_NM"];
        
        [self saveAttachedFile:imageInfoDic];
    }
}


- (UIImage *)getScaledImage:(UIImage *)image scaledToMaxWidth:(CGFloat)width {
    CGFloat oldWidth = image.size.width;
    CGFloat oldHeight = image.size.height;
    
    CGFloat scaleFactor=1;
    
    //if (oldWidth > width) {
    scaleFactor = width / oldWidth;
    //} else  //oldWidth<width and height==0이면, scale하지 않음.
    //    return image;
    
    CGFloat newHeight = oldHeight * scaleFactor;
    CGFloat newWidth = oldWidth * scaleFactor;
    CGSize newSize = CGSizeMake(newWidth, newHeight);
    
    //NSLog(@"oldWidth : %f, oldHeight : %f", oldWidth, oldHeight);
    //NSLog(@"newWidth : %f, newHeight : %f", newWidth, newHeight);
    
    //UIGraphicsBeginImageContext(newSize);
    UIGraphicsBeginImageContextWithOptions(newSize, NO, [UIScreen mainScreen].scale);
    [image drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)];
    UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return newImage;
}

- (CGSize)targetSize {
    CGFloat scale = [UIScreen mainScreen].scale;
    CGSize targetSize = CGSizeMake(CGRectGetWidth(self.view.bounds) * scale, CGRectGetHeight(self.view.bounds) * scale);
    return targetSize;
}

- (UIImage *)rotateImage90:(UIImage *)img
{
    //NSLog(@"rotateImage90:");
    
    CGImageRef          imgRef = img.CGImage;
    CGFloat             width = CGImageGetWidth(imgRef);
    CGFloat             height = CGImageGetHeight(imgRef);
    CGRect              bounds = CGRectMake(0, 0, width, height);
    CGFloat             boundHeight;
    
    boundHeight = bounds.size.height;
    bounds.size.height = bounds.size.width;
    bounds.size.width = boundHeight;
    
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    NSUInteger bytesPerPixel = 4;
    NSUInteger bytesPerRow = bytesPerPixel * bounds.size.width;
    NSUInteger bitsPerComponent = 8;
    CGContextRef context = CGBitmapContextCreate(nil, bounds.size.width, bounds.size.height,
                                                 bitsPerComponent, bytesPerRow, colorSpace,
                                                 kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big);
    CGColorSpaceRelease(colorSpace);
    
    
    CGContextRotateCTM (context, DEGREES_TO_RADIANS(270));
    CGContextTranslateCTM (context, -width, 0);
    
    CGContextDrawImage(context, CGRectMake(0, 0, width, height), imgRef);
    CGImageRef newImage = CGBitmapContextCreateImage(context);
    CGContextRelease(context);
    UIImage *imageCopy = [UIImage imageWithCGImage:newImage];
    CFRelease(newImage);
    return imageCopy;
}

- (UIImage *)rotateImageReverse90:(UIImage *)img
{
    NSLog(@"rotateImageReverse90:");
    
    CGImageRef          imgRef = img.CGImage;
    CGFloat             width = CGImageGetWidth(imgRef);
    CGFloat             height = CGImageGetHeight(imgRef);
    CGRect              bounds = CGRectMake(0, 0, width, height);
    CGFloat             boundHeight;
    
    boundHeight = bounds.size.height;
    bounds.size.height = bounds.size.width;
    bounds.size.width = boundHeight;
    
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    NSUInteger bytesPerPixel = 4;
    NSUInteger bytesPerRow = bytesPerPixel * bounds.size.width;
    NSUInteger bitsPerComponent = 8;
    CGContextRef context = CGBitmapContextCreate(nil, bounds.size.width, bounds.size.height,
                                                 bitsPerComponent, bytesPerRow, colorSpace,
                                                 kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big);
    CGColorSpaceRelease(colorSpace);
    
    CGContextRotateCTM (context, DEGREES_TO_RADIANS(90));
    CGContextTranslateCTM (context, 0, -height);
    
    CGContextDrawImage(context, CGRectMake(0, 0, width, height), imgRef);
    CGImageRef newImage = CGBitmapContextCreateImage(context);
    CGContextRelease(context);
    UIImage *imageCopy = [UIImage imageWithCGImage:newImage];
    CFRelease(newImage);
    return imageCopy;
}

#define DEGREES_TO_RADIANS(angle) ((angle) / 180.0 * M_PI)
- (UIImage *)rotateImage:(UIImage *)img byOrientationFlag:(UIImageOrientation)orient
{
    NSLog(@"ImageProcessUtil rotateImage");
    
    CGImageRef          imgRef = img.CGImage;
    CGFloat             width = CGImageGetWidth(imgRef);
    CGFloat             height = CGImageGetHeight(imgRef);
    CGRect              bounds = CGRectMake(0, 0, width, height);
    CGFloat             boundHeight;
    NSLog(@"rotate image size width=%f, height=%f, orientation=%ld", width, height, (long)orient);
    
    switch(orient) {
            
        case UIImageOrientationUp:
            break;
            
        case UIImageOrientationDown:
            break;
            
        case UIImageOrientationLeft:
            boundHeight = bounds.size.height;
            bounds.size.height = bounds.size.width;
            bounds.size.width = boundHeight;
            break;
            
        case UIImageOrientationRight:
            boundHeight = bounds.size.height;
            bounds.size.height = bounds.size.width;
            bounds.size.width = boundHeight;
            break;
            
        default:
            break;
    }
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    NSUInteger bytesPerPixel = 4;
    NSUInteger bytesPerRow = bytesPerPixel * bounds.size.width;
    NSUInteger bitsPerComponent = 8;
    CGContextRef context = CGBitmapContextCreate(nil, bounds.size.width, bounds.size.height,
                                                 bitsPerComponent, bytesPerRow, colorSpace,
                                                 kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big);
    CGColorSpaceRelease(colorSpace);
    if (orient == UIImageOrientationRight) {
        CGContextRotateCTM (context, DEGREES_TO_RADIANS(270));
        CGContextTranslateCTM (context, -width, 0);
    }
    else if (orient == UIImageOrientationLeft) {
        CGContextRotateCTM (context, DEGREES_TO_RADIANS(90));
        CGContextTranslateCTM (context, 0, -height);
    }
    else if (orient == UIImageOrientationDown) {
        CGContextRotateCTM (context, DEGREES_TO_RADIANS(180));
        CGContextTranslateCTM (context, -width, -height);
    }
    else if (orient == UIImageOrientationUp) {
        // NOTHING
    }
    
    CGContextDrawImage(context, CGRectMake(0, 0, width, height), imgRef);
    CGImageRef newImage = CGBitmapContextCreateImage(context);
    CGContextRelease(context);
    UIImage *imageCopy = [UIImage imageWithCGImage:newImage];
    CFRelease(newImage);
    return imageCopy;
}

- (UIImage*)imageByScalingAndCroppingForSize:(CGSize)targetSize :(UIImage *)image
{
    UIImage *sourceImage = image;
    UIImage *newImage = nil;
    CGSize imageSize = sourceImage.size;
    CGFloat width = imageSize.width;
    CGFloat height = imageSize.height;
    CGFloat targetWidth = targetSize.width;
    CGFloat targetHeight = targetSize.height;
    CGFloat scaleFactor = 0.0;
    CGFloat scaledWidth = targetWidth;
    CGFloat scaledHeight = targetHeight;
    CGPoint thumbnailPoint = CGPointMake(0.0,0.0);
    
    if (CGSizeEqualToSize(imageSize, targetSize) == NO)
    {
        CGFloat widthFactor = targetWidth / width;
        CGFloat heightFactor = targetHeight / height;
        
        if (widthFactor > heightFactor)
            scaleFactor = widthFactor; // scale to fit height
        else
            scaleFactor = heightFactor; // scale to fit width
        scaledWidth  = width * scaleFactor;
        scaledHeight = height * scaleFactor;
        
        // center the image
        if (widthFactor > heightFactor)
        {
            thumbnailPoint.y = (targetHeight - scaledHeight) * 0.5;
        }
        else
            if (widthFactor < heightFactor)
            {
                thumbnailPoint.x = (targetWidth - scaledWidth) * 0.5;
            }
    }
    
    //UIGraphicsBeginImageContext(targetSize); // this will crop
    UIGraphicsBeginImageContextWithOptions(targetSize, NO, [UIScreen mainScreen].scale);
    
    CGRect thumbnailRect = CGRectZero;
    thumbnailRect.origin = thumbnailPoint;
    thumbnailRect.size.width  = scaledWidth;
    thumbnailRect.size.height = scaledHeight;
    
    [sourceImage drawInRect:thumbnailRect];
    
    newImage = UIGraphicsGetImageFromCurrentImageContext();
    if(newImage == nil)
        NSLog(@"could not scale image");
    
    //pop the context to get back to the default
    UIGraphicsEndImageContext();
    return newImage;
}

-(void)sendToHilee:(NSString *)func :(NSException *)exception{
    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"" message:NSLocalizedString(@"exception_msg_exception", @"exception_msg_exception") preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction* sendButton = [UIAlertAction actionWithTitle:@"관리자에게 전송" style:UIAlertActionStyleDefault
                                                       handler:^(UIAlertAction * action) {
                                                           [alert dismissViewControllerAnimated:YES completion:nil];
                                                           
                                                           UIDevice *device = [UIDevice currentDevice];
                                                           NSString *myUserNo = [[NSUserDefaults standardUserDefaults] objectForKey:@"CUSER_NO"];
                                                           NSString *dvcKind = [device modelName];
                                                           NSString *dvcVer = device.systemVersion;
                                                           
                                                           MFMessageComposeViewController *controller = [[MFMessageComposeViewController alloc] init];
                                                           if([MFMessageComposeViewController canSendText])
                                                           {
                                                               controller.body = [NSString stringWithFormat:@"%@ / %@ / %@ \n%@ \n\n%@", dvcKind, dvcVer, myUserNo, func, exception];
                                                               controller.recipients = [NSArray arrayWithObject:@"01093917822"];
                                                               controller.messageComposeDelegate = self;
                                                               [self presentViewController:controller animated:YES completion:nil];
                                                           }
                                                       }];
    
    UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                     handler:^(UIAlertAction * action) {
                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                     }];
    
    [alert addAction:sendButton];
    [alert addAction:okButton];
    [self presentViewController:alert animated:YES completion:nil];
}

- (void)messageComposeViewController:(nonnull MFMessageComposeViewController *)controller didFinishWithResult:(MessageComposeResult)result {
    NSString *resultString;
    switch (result) {
        case MessageComposeResultCancelled:
            resultString = NSLocalizedString(@"cancel", @"");
            break;
            
        case MessageComposeResultFailed:
        {
            resultString = NSLocalizedString(@"fail", @"");
            break;
        }
            
        case MessageComposeResultSent:
            resultString = NSLocalizedString(@"success", @"");
            break;
            
        default:
            break;
    }
    [self dismissViewControllerAnimated:YES completion:^{
        NSLog(@"%s resultString : %@",__FUNCTION__,resultString);
    }];
}

@end
