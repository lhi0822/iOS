//
//  SearchViewController.m
//  mfinity_sns
//
//  Created by hilee on 2017. 6. 7..
//  Copyright © 2017년 com.dbvalley. All rights reserved.
//

#import "SearchViewController.h"
#import "SearchTableViewCell.h"
#import "PostDetailViewController.h"
#import "TaskDetailViewController.h"
#import "TeamListViewController.h"
#import "CollectionViewController.h"
#import "MFGroupCell.h"
#import "TeamSelectController.h"
#import "SearchChatListViewCell.h"
#import "TeamSelectViewCell.h"
#import "MFStyle.h"
#import "MFDBHelper.h"

#define ROW_TAG 1000

#define REFRESH_TABLEVIEW_DEFAULT_ROW               44.f
#define REFRESH_HEADER_DEFAULT_HEIGHT               44.f
#define REFRESH_TITLE_TABLE_PULL                    @"당겼다 놔주세요."
#define REFRESH_TITLE_TABLE_RELEASE                 @"당겼다 놔주세요."
#define REFRESH_TITLE_TABLE_LOAD                    @"새로고치는 중..."
#define REFRESH_TIME_FORMAT                         @"MM/dd (HH:mm:ss)"

#define kSupplementaryViewID @"SUP_VIEW_ID"
#define MODEL_NAME [[UIDevice currentDevice] modelName]

@interface SearchViewController () {
    NSString *searchText;
    NSString *urlString;
    int notMemberCnt;
    AppDelegate *appDelegate;
}

@end

@implementation SearchViewController

-(void)viewWillAppear:(BOOL)animated{
    NSLog(@"%s",__func__);
    
    self.navigationController.navigationBar.translucent = NO;
    self.navigationController.navigationBar.barTintColor = [MFUtil myRGBfromHex:@"1D4696"];
    self.navigationController.navigationBar.tintColor = [UIColor whiteColor];
    
    self.navigationItem.titleView = [MFStyle navigationTitleStyle1:NSLocalizedString(@"검색", @"검색")];
    self.navigationItem.rightBarButtonItem =[[UIBarButtonItem alloc]initWithTitle:NSLocalizedString(@"msg24", @"")
                                                                            style:UIBarButtonItemStylePlain
                                                                           target:self
                                                                           action:@selector(rightSideMenuButtonPressed:)];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    
    appDelegate = (AppDelegate *)[UIApplication sharedApplication].delegate;
    urlString = appDelegate.main_url;
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_NewPostPush:) name:@"noti_NewPostPush" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_NewTaskPush:) name:@"noti_NewTaskPush" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(noti_NewChatPush:) name:@"noti_NewChatPush" object:nil];
    
    self.lastPostNo = @"1";
    //[self callGetPostList];
    
    //    self.boardImgArr = [NSMutableArray array];
    //    [self.boardImgArr addObject:@"board_gray"];
    //    [self.boardImgArr addObject:@"board_green"];
    //    [self.boardImgArr addObject:@"board_mint"];
    //    [self.boardImgArr addObject:@"board_yellow"];
    //    [self.boardImgArr addObject:@"board_blue_square.png"];
    
    NSLog(@"SearchViewController fromSegue : %@", self.fromSegue);
    //NSLog(@"SearchViewController snsNo : %@", self.snsNo);
    
    if([self.fromSegue isEqualToString:@"POST_SEARCH_MODAL"]){
        self.searchBar.placeholder = @"게시판명, 작성자, 글내용으로 검색";
    } else if([self.fromSegue isEqualToString:@"BOARD_SEARCH_MODAL"]){
        self.searchBar.placeholder = @"게시판명으로 검색";
    } else if([self.fromSegue isEqualToString:@"POST_BOARD_SEARCH_MODAL"]){
        self.searchBar.placeholder = @"게시판명으로 검색";
    } else if([self.fromSegue isEqualToString:@"BOARD_POST_SEARCH_MODAL"]){
        self.searchBar.placeholder = @"작성자, 글내용으로 검색";
    } else if([self.fromSegue isEqualToString:@"SEARCH_CHAT_LIST_MODAL"]){
        self.searchBar.placeholder = @"채팅방명, 채팅내용으로 검색";
    } else {
        self.searchBar.placeholder = @"";
    }
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)noti_NewPostPush:(NSNotification *)notification {
    if(notification.userInfo!=nil){
        NSString *message = [notification.userInfo objectForKey:@"MESSAGE"];
        NSDictionary *dict = [NSDictionary dictionary];
        if(message!=nil){
            NSData *jsonData = [message dataUsingEncoding:NSUTF8StringEncoding];
            NSError *error;
            dict = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
        } else {
            dict = notification.userInfo;
        }
        
        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
        PostDetailViewController *vc = (PostDetailViewController *)[storyboard instantiateViewControllerWithIdentifier:@"PostDetailViewController"];
        UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:vc];
        
        vc.fromSegue = @"NOTI_POST_DETAIL";
        vc.notiPostDic = dict;
        [self presentViewController:nav animated:YES completion:nil];
    }
}

- (void)noti_NewTaskPush:(NSNotification *)notification {
    @try{
        if(notification.userInfo!=nil){
            NSString *message = [notification.userInfo objectForKey:@"MESSAGE"];
            NSDictionary *dict = [NSDictionary dictionary];
            if(message!=nil){
                NSData *jsonData = [message dataUsingEncoding:NSUTF8StringEncoding];
                NSError *error;
                dict = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
            } else {
                dict = notification.userInfo;
            }
            
            UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
            TaskDetailViewController *vc = (TaskDetailViewController *)[storyboard instantiateViewControllerWithIdentifier:@"TaskDetailViewController"];
            UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:vc];
            
            vc.fromSegue = @"NOTI_TASK_DETAIL";
            vc.notiTaskDic = dict;
            [self presentViewController:nav animated:YES completion:nil];
        }
        
    } @catch (NSException *exception) {
        //[self sendToHilee:[NSString stringWithFormat:@"%s", __func__] :exception];
    }
}


- (void)noti_NewChatPush:(NSNotification *)notification {
    NSLog(@"%s", __func__);
    NSArray *documentPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *documentsDir = [documentPaths objectAtIndex:0];
    NSString *DBName = [AppDelegate getDBName];
    NSString *DBPath = [documentsDir stringByAppendingPathComponent:DBName];
    
    if(notification.userInfo!=nil){
        NSString *message = [notification.userInfo objectForKey:@"MESSAGE"];
        NSString *noti = [notification.userInfo objectForKey:@"NOTI"];
        NSDictionary *dict = [NSDictionary dictionary];
        if(noti==nil){
            NSData *jsonData = [message dataUsingEncoding:NSUTF8StringEncoding];
            NSError *error;
            dict = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
        } else {
            dict = notification.userInfo;
        }
        
        NSArray *dataSet = [dict objectForKey:@"DATASET"];
        NSString *roomNo = [[dataSet objectAtIndex:0] objectForKey:@"ROOM_NO"];
        
        NSMutableArray *roomChatArr = [NSMutableArray array];
        NSString *sqlString = [NSString stringWithFormat:@"SELECT ROOM_NM, ROOM_NOTI FROM CHAT_ROOMS WHERE ROOM_NO = %@", roomNo];
        sqlite3 *database;
        if (sqlite3_open([DBPath UTF8String], &database) == SQLITE_OK) {
            NSString *sql = sqlString;
            const char *sqlStatement = [sql UTF8String];
            sqlite3_stmt *compiledStatement;
            
            if (sqlite3_prepare_v2(database, sqlStatement, -1, &compiledStatement, NULL) == SQLITE_OK) {
                int rowCount = 0;
                
                while(sqlite3_step(compiledStatement) == SQLITE_ROW) {
                    rowCount = sqlite3_column_int(compiledStatement, 0);
                    
                    NSMutableDictionary *dic = [[NSMutableDictionary alloc]init];
                    
                    for(int j=0; j<sqlite3_column_count(compiledStatement);j++){
                        NSString *keyString = [NSString stringWithUTF8String:(sqlite3_column_name(compiledStatement, j))];
                        NSString *valueString = nil;
                        if (sqlite3_column_text(compiledStatement, j)==NULL) {
                            valueString = @"null";
                        }else{
                            valueString = [NSString stringWithUTF8String:(char *)sqlite3_column_text(compiledStatement, j)];
                        }
                        [dic setObject:valueString forKey:keyString];
                    }
                    [roomChatArr addObject:dic];
                }
            }else {
                NSLog(@"not SQLITE_OK");
                printf("could not prepare statement: %s\n", sqlite3_errmsg(database));
            }
            sqlite3_finalize(compiledStatement);
            
        }else{
            NSLog(@"db not open");
        }
        sqlite3_close(database);
        
        //NSLog(@"roomChatArr : %@", roomChatArr);
        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
        ChatViewController *vc = (ChatViewController *)[storyboard instantiateViewControllerWithIdentifier:@"ChatViewController"];
        
        RightSideViewController *rightViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"RightSideViewController"];
        CGRect screen = [[UIScreen mainScreen]bounds];
        CGFloat screenWidth = screen.size.width;
        CGFloat screenHeight = screen.size.height;
        rightViewController.view.frame = CGRectMake(rightViewController.view.frame.origin.x, rightViewController.view.frame.origin.y, screenWidth, screenHeight);
        
        if(roomChatArr.count>0){
            NSString *roomNoti = [[roomChatArr objectAtIndex:0]objectForKey:@"ROOM_NOTI"];
            NSString *roomName = [NSString urlDecodeString:[[roomChatArr objectAtIndex:0]objectForKey:@"ROOM_NM"]];
            vc.roomNo = roomNo;
            vc.roomNoti = roomNoti;
            vc.roomName = roomName;
            rightViewController.roomNo = roomNo;
            rightViewController.roomNoti = roomNoti;
        }
        
        LGSideMenuController *container = [LGSideMenuController sideMenuControllerWithRootViewController:vc leftViewController:nil rightViewController:rightViewController];
        [container setNavigationItemTitle:[NSString urlDecodeString:vc.roomName]];
        
        //UIBarButtonItem *left = [[UIBarButtonItem alloc]initWithTitle:@"" style:UIBarButtonItemStylePlain target:self action:nil];
        //self.navigationItem.backBarButtonItem = left;
        self.navigationController.navigationBar.topItem.title = @"";
        
        NSString *sqlString2 = [NSString stringWithFormat:@"UPDATE CHAT_ROOMS SET NEW_CHAT = 0 WHERE ROOM_NO=%@;", roomNo];
        [self crudStatement:DBPath :sqlString2];
        
        NSString *currentClass = NSStringFromClass([[UIViewController currentViewController] class]);
        NSString *chatDetailClass = NSStringFromClass([vc class]);
        
        vc.fromSegue = @"NOTI_CHAT_DETAIL";
        vc.notiChatDic = dict;
        
        if([currentClass isEqualToString:chatDetailClass]){
            //send notification to postdetail and if noti postno equal current postno, not open modal
            [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_ChatDetailView" object:nil userInfo:dict];
        } else {
            NSString *strClass = NSStringFromClass([self class]);
            if([currentClass isEqualToString:strClass]){
                CATransition* transition = [CATransition animation];
                transition.duration = 0.3f;
                transition.type = kCATransitionMoveIn;
                transition.subtype = kCATransitionFromTop;
                [self.navigationController.view.layer addAnimation:transition forKey:kCATransition];
                [self.navigationController pushViewController:container animated:NO];
            }
        }
    }
}

-(void) crudStatement:(NSString *)dbPath :(NSString *)crudStmt{
    NSLog(@"%s", __func__);
    sqlite3 *database;
    NSLog(@"TeamListViewController crudStmt : %@", crudStmt);
    if (sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
        const char *sqlStatement = [crudStmt UTF8String];
        
        sqlite3_stmt *compiledStatement;
        if (sqlite3_prepare_v2(database, sqlStatement, -1, &compiledStatement, NULL) == SQLITE_OK) {
            
            if(sqlite3_step(compiledStatement) != SQLITE_DONE){
                NSLog(@"Error updating table: %s", sqlite3_errmsg(database));
                
            }else{
                NSLog(@"TeamListViewController ok");
            }
            
            if(sqlite3_finalize(compiledStatement) != SQLITE_OK){
                NSLog(@"SQL Error : %s",sqlite3_errmsg(database));
            }
        }else {
            NSLog(@"not SQLITE_OK");
            printf("could not prepare statement: %s\n", sqlite3_errmsg(database));
        }
    }else{
        
    }
    sqlite3_close(database);
}

- (void)rightSideMenuButtonPressed:(id)sender {
    [self.searchBar resignFirstResponder];
    [self dismissViewControllerAnimated:YES completion:nil];
}

-(void)searchBar:(UISearchBar *)searchBar textDidChange:(NSString *)text{
    //NSLog(@"searchText : %@", text);
    
    searchText = text;
}

- (void)searchBarSearchButtonClicked:(UISearchBar *)searchBar {
    [searchBar resignFirstResponder];
    
    if([self.fromSegue isEqualToString:@"BOARD_SEARCH_MODAL"] || [self.fromSegue isEqualToString:@"POST_BOARD_SEARCH_MODAL"]){
        self.boardDataSetArray = [[NSMutableArray alloc]init];
        //[self callGetSNSList:searchText];
        [self callWebService:@"getUserSNSLists" :searchText];
        
    } else if([self.fromSegue isEqualToString:@"POST_SEARCH_MODAL"] || [self.fromSegue isEqualToString:@"BOARD_POST_SEARCH_MODAL"]){
        self.postDataSetArray = [[NSMutableArray alloc]init];
        self.lastPostNo = @"1";
        //[self callGetPostList:searchText];
        [self callWebService:@"getPostLists" :searchText];
        
    } else if([self.fromSegue isEqualToString:@"SEARCH_CHAT_LIST_MODAL"]){
        [self chatListReadFromDatabase:searchText];
    }
}

-(void)callWebService:(NSString *)serviceName :(NSString *)param{
    NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:serviceName]];
    NSString *paramString;
    NSString *myUserNo = [[NSUserDefaults standardUserDefaults] objectForKey:@"CUSER_NO"];
    NSString *compNo = [[NSUserDefaults standardUserDefaults] objectForKey:@"COMP_NO"];
    
    if([serviceName isEqualToString:@"getUserSNSLists"]){
        paramString = [NSString stringWithFormat:@"compNo=%@&usrId=%@&snsKind=1&searchNm=%@",compNo, [[NSUserDefaults standardUserDefaults] objectForKey:@"USER_ID"], param];
        
    } else if([serviceName isEqualToString:@"getPostLists"]){
        paramString = [NSString stringWithFormat:@"stPostSeq=%@&usrNo=%@&searchNm=%@",self.lastPostNo, myUserNo, param];
        
        if (self.snsNo!=nil) {
            paramString = [paramString stringByAppendingFormat:@"&snsNo=%@",self.snsNo];
        }
        
    } else if([serviceName isEqualToString:@"joinSNS"]){
        paramString = [NSString stringWithFormat:@"usrNo=%@&snsNo=%@", myUserNo, param];
        
    } else if([serviceName isEqualToString:@"withdrawSNS"]){
        //NSString *mfpsId = [NSString stringWithFormat:@"USER.%@.%@", [[NSUserDefaults standardUserDefaults] objectForKey:@"USER_ID"], [MFUtil getUUID]];
        NSString *mfpsId = [NSString stringWithFormat:@"USER.%@.%@", [[NSUserDefaults standardUserDefaults] objectForKey:@"USER_ID"], [[NSUserDefaults standardUserDefaults] objectForKey:@"DVC_ID"]];
        
        paramString = [NSString stringWithFormat:@"usrNo=%@&compNo=%@&snsNo=%@&mfpsId=%@&isJoin=false", myUserNo, compNo, param, mfpsId];
    }
    
    MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
    session.delegate = self;
    [session start];
}

/*
 -(void)callJoinSNS:(NSString *)snsNo{
 NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"joinSNS"]];
 NSString *paramString = [NSString stringWithFormat:@"usrNo=%@&snsNo=%@",[[NSUserDefaults standardUserDefaults] objectForKey:@"CUSER_NO"], snsNo];
 MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
 session.delegate = self;
 [session start];
 }
 
 - (void)callGetSNSList:(NSString *)text{
 NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"getUserSNSLists"]];
 NSString *paramString = [NSString stringWithFormat:@"usrId=%@&searchNm=%@",[[NSUserDefaults standardUserDefaults] objectForKey:@"USER_ID"], text];
 MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
 session.delegate = self;
 if ([session start]) {
 [SVProgressHUD show];
 }
 }
 
 - (void)callGetPostList:(NSString *)text{
 NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
 NSString *myUserNo = [prefs objectForKey:@"CUSER_NO"];
 
 NSString *paramString = [NSString stringWithFormat:@"stPostSeq=%@&usrNo=%@&searchNm=%@",self.lastPostNo, myUserNo, text];
 
 if (self.snsNo!=nil) {
 paramString = [paramString stringByAppendingFormat:@"&snsNo=%@",self.snsNo];
 }
 
 //NSLog(@"paramString : %@",paramString);
 NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"getPostLists"]];
 MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
 session.delegate = self;
 if ([session start]) {
 [SVProgressHUD show];
 }
 }
 */

- (void)refreshCallGetPostList:(NSString *)text{
    NSLog(@"%s",__FUNCTION__);
    //NSString *userID = [[NSUserDefaults standardUserDefaults] objectForKey:@"USER_ID"];
    NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
    NSString *myUserNo = [prefs objectForKey:@"CUSER_NO"];
    
    NSString *paramString = [NSString stringWithFormat:@"stPostSeq=1&usrNo=%@&searchNm=%@", myUserNo, text];
    if (self.snsNo!=nil) {
        paramString = [paramString stringByAppendingFormat:@"&snsNo=%@",self.snsNo];
    }
    
    self.postDataSetArray = [[NSMutableArray alloc]init];
    self.lastPostNo = @"1";
    
    //NSLog(@"paramString : %@",paramString);
    //    NSURL *url = [NSURL URLWithString:[urlString stringByAppendingPathComponent:@"getPostLists"]];
    //    MFURLSession *session = [[MFURLSession alloc]initWithURL:url option:paramString];
    //    session.delegate = self;
    //    if ([session start]) {
    //        [SVProgressHUD show];
    //    }
    
    [self callWebService:@"getPostLists" :text];
}

- (void)chatListReadFromDatabase:(NSString *)text {
    NSArray *documentPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *documentsDir = [documentPaths objectAtIndex:0];
    self.DBName = [AppDelegate getDBName];
    self.DBPath = [documentsDir stringByAppendingPathComponent:self.DBName];
    
    NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
    NSString *myUserNo = [prefs objectForKey:@"CUSER_NO"];
    
    //NSString *sqlString = [NSString stringWithFormat:@"SELECT X.LAST_MSG_TY, SUM(X.NOT_READ_COUNT) NOT_READ_COUNT, X.ROOM_NO, X.ROOM_TYPE, X.ROOM_NM, X.ROOM_NOTI, X.NEW_CHAT, X.CONTENT_TY, X.CONTENT, X.LAST_DATE, IFNULL(C.USER_IMG,'') ROOM_IMG, IFNULL(C.USER_NO,'') ROOM_IMG_USER_NO, X.MEMBER_COUNT, X.MEMBER_NO FROM ( SELECT X.*, GROUP_CONCAT(Y.USER_NO) MEMBER_NO, COUNT(Y.USER_NO) MEMBER_COUNT FROM (SELECT '' LAST_MSG_TY, SUM(CASE A.IS_READ WHEN 1 THEN 0 ELSE 1 END) NOT_READ_COUNT, A.ROOM_NO ROOM_NO, B.ROOM_TYPE ROOM_TYPE, B.ROOM_NM ROOM_NM, B.ROOM_NOTI ROOM_NOTI, B.NEW_CHAT NEW_CHAT, A.CONTENT_TY CONTENT_TY, CASE WHEN A.CONTENT_TY = 'FILE' THEN '파일' WHEN A.CONTENT_TY = 'INVITE' THEN '초대' WHEN A.CONTENT_TY = 'IMG' THEN '사진' ELSE A.CONTENT END CONTENT, A.DATE LAST_DATE FROM CHATS A, CHAT_ROOMS B WHERE A.ROOM_NO = B.ROOM_NO AND A.CONTENT_TY != 'SYS' AND (UPPER(a.content) like '%@%%' OR UPPER(b.room_nm) like '%@%%') GROUP BY A.ROOM_NO) X,CHAT_USERS Y WHERE X.ROOM_NO = Y.ROOM_NO GROUP BY X.ROOM_NO UNION SELECT X.*, GROUP_CONCAT(Y.USER_NO) MEMBER_NO, COUNT(Y.USER_NO) MEMBER_COUNT FROM (SELECT 'MISSED' LAST_MSG_TY, 0 NOT_READ_COUNT, A.ROOM_NO ROOM_NO, B.ROOM_TYPE ROOM_TYPE, B.ROOM_NM ROOM_NM, B.ROOM_NOTI ROOM_NOTI, B.NEW_CHAT NEW_CHAT, A.CONTENT_TY CONTENT_TY, CASE WHEN A.CONTENT_TY = 'FILE' THEN '파일' WHEN A.CONTENT_TY = 'INVITE' THEN '초대' WHEN A.CONTENT_TY = 'IMG' THEN '사진' ELSE A.CONTENT END CONTENT, DATETIME('NOW','LOCALTIME') LAST_DATE FROM MISSED_CHATS A, CHAT_ROOMS B WHERE A.ROOM_NO = B.ROOM_NO AND (UPPER(a.content) like '%@%%' OR UPPER(b.room_nm) like '%@%%') GROUP BY A.ROOM_NO) X, CHAT_USERS Y WHERE X.ROOM_NO = Y.ROOM_NO GROUP BY X.ROOM_NO ) X LEFT OUTER JOIN( SELECT C.ROOM_NO, GROUP_CONCAT(D.USER_IMG) USER_IMG, GROUP_CONCAT(D.USER_NO) USER_NO FROM CHAT_USERS C, USERS D WHERE LENGTH(D.USER_IMG) > 0 AND D.USER_NO = C.USER_NO AND C.USER_NO != %@ GROUP BY C.ROOM_NO ) C ON X.ROOM_NO = C.ROOM_NO GROUP BY X.ROOM_NO ORDER BY X.NEW_CHAT DESC , X.LAST_DATE DESC;", text, text, text, text, myUserNo];
    NSString *sqlString = [NSString stringWithFormat:@"SELECT X.LAST_MSG_TY, SUM(X.NOT_READ_COUNT) NOT_READ_COUNT, X.ROOM_NO, X.ROOM_TYPE, X.ROOM_NM, X.ROOM_NOTI, X.NEW_CHAT, X.CONTENT_TY, X.CONTENT, X.CONTENT_PREV, X.LAST_DATE, IFNULL(C.USER_IMG,'') ROOM_IMG, IFNULL(C.USER_NO,'') ROOM_IMG_USER_NO, X.MEMBER_COUNT, X.MEMBER_NO FROM ( SELECT X.*, GROUP_CONCAT(Y.USER_NO) MEMBER_NO, COUNT(Y.USER_NO) MEMBER_COUNT FROM (SELECT '' LAST_MSG_TY, SUM(CASE A.IS_READ WHEN 1 THEN 0 ELSE 1 END) NOT_READ_COUNT, A.ROOM_NO ROOM_NO, B.ROOM_TYPE ROOM_TYPE, B.ROOM_NM ROOM_NM, B.ROOM_NOTI ROOM_NOTI, B.NEW_CHAT NEW_CHAT, A.CONTENT_TY CONTENT_TY, CASE WHEN A.CONTENT_TY = 'FILE' THEN '파일' WHEN A.CONTENT_TY = 'INVITE' THEN '초대' WHEN A.CONTENT_TY = 'IMG' THEN '사진' ELSE A.CONTENT END CONTENT, A.CONTENT_PREV CONTENT_PREV, A.DATE LAST_DATE FROM CHATS A, CHAT_ROOMS B WHERE A.ROOM_NO = B.ROOM_NO AND A.CONTENT_TY != 'SYS' AND (UPPER(a.content) like '%@%%' OR UPPER(b.room_nm) like '%@%%') GROUP BY A.ROOM_NO) X,CHAT_USERS Y WHERE X.ROOM_NO = Y.ROOM_NO GROUP BY X.ROOM_NO UNION SELECT X.*, GROUP_CONCAT(Y.USER_NO) MEMBER_NO, COUNT(Y.USER_NO) MEMBER_COUNT FROM (SELECT 'MISSED' LAST_MSG_TY, 0 NOT_READ_COUNT, A.ROOM_NO ROOM_NO, B.ROOM_TYPE ROOM_TYPE, B.ROOM_NM ROOM_NM, B.ROOM_NOTI ROOM_NOTI, B.NEW_CHAT NEW_CHAT, A.CONTENT_TY CONTENT_TY, CASE WHEN A.CONTENT_TY = 'FILE' THEN '파일' WHEN A.CONTENT_TY = 'INVITE' THEN '초대' WHEN A.CONTENT_TY = 'IMG' THEN '사진' ELSE A.CONTENT END CONTENT, A.CONTENT_PREV CONTENT_PREV, DATETIME('NOW','LOCALTIME') LAST_DATE FROM MISSED_CHATS A, CHAT_ROOMS B WHERE A.ROOM_NO = B.ROOM_NO AND (UPPER(a.content) like '%@%%' OR UPPER(b.room_nm) like '%@%%') GROUP BY A.ROOM_NO) X, CHAT_USERS Y WHERE X.ROOM_NO = Y.ROOM_NO GROUP BY X.ROOM_NO ) X LEFT OUTER JOIN( SELECT C.ROOM_NO, GROUP_CONCAT(D.USER_IMG) USER_IMG, GROUP_CONCAT(D.USER_NO) USER_NO FROM CHAT_USERS C, USERS D WHERE LENGTH(D.USER_IMG) > 0 AND D.USER_NO = C.USER_NO AND C.USER_NO != %@ GROUP BY C.ROOM_NO ) C ON X.ROOM_NO = C.ROOM_NO GROUP BY X.ROOM_NO ORDER BY X.NEW_CHAT DESC , X.LAST_DATE DESC;", text, text, text, text, myUserNo];
    [self selectStatement:self.DBPath :sqlString];
}

-(void) selectStatement:(NSString *)dbPath :(NSString *)selectStmt{
    NSLog(@"%s", __func__);
    sqlite3 *database;
    
    self.chatArray = [NSMutableArray array];
    self.tempArr = [NSMutableArray array];
    NSMutableDictionary *dic = nil;
    
    if (sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
        NSString *sql2 = selectStmt; //@"select * from sqlite_master where type='table'";
        const char *sqlStatement = [sql2 UTF8String];
        sqlite3_stmt *compiledStatement;
        
        if (sqlite3_prepare_v2(database, sqlStatement, -1, &compiledStatement, NULL) == SQLITE_OK) {
            
            int rowCount = 0;
            
            while(sqlite3_step(compiledStatement) == SQLITE_ROW) {
                rowCount = sqlite3_column_int(compiledStatement, 0);
                
                dic = [[NSMutableDictionary alloc]init];
                
                for(int j=0; j<sqlite3_column_count(compiledStatement);j++){
                    NSString *keyString = [NSString stringWithUTF8String:(sqlite3_column_name(compiledStatement, j))];
                    NSString *valueString = nil;
                    if (sqlite3_column_text(compiledStatement, j)==NULL) {
                        valueString = @"null";
                    }else{
                        valueString = [NSString stringWithUTF8String:(char *)sqlite3_column_text(compiledStatement, j)];
                    }
                    //NSLog(@"key String : %@",keyString);
                    //NSLog(@"value String : %@",valueString);
                    
                    [dic setObject:valueString forKey:keyString];
                }
                
                // 오브젝트를 chatArray 배열에 추가한다.
                [self.chatArray addObject:dic];
                [self.tempArr addObject:dic];
            }
            
            [self.tableView reloadData];
            
        }else {
            NSLog(@"SearchViewController not SQLITE_OK");
            printf("could not prepare statement: %s\n", sqlite3_errmsg(database));
        }
        sqlite3_finalize(compiledStatement);
        
    }else{
        NSLog(@"SearchViewController db not open");
    }
    sqlite3_close(database);
}


#pragma mark - MFURLSessionDelegate
-(void)returnDataWithObject:(MFURLSession *)session error:(NSString *)error{
    [SVProgressHUD dismiss];
    
    NSString *wsName = [[session.url absoluteString] lastPathComponent];
    NSString *result = [session.returnDictionary objectForKey:@"RESULT"];
    
    if([wsName isEqualToString:@"getUserSNSLists"]){
        if (error!=nil) {
            NSLog(@"error : %@",error);
        }else{
            NSDictionary *dic = session.returnDictionary;
            self.boardDataSetArray = [dic objectForKey:@"DATASET"];
            
            notMemberCnt=0;
            for(int i=0; i<self.boardDataSetArray.count; i++){
                NSDictionary *dataSet = [self.boardDataSetArray objectAtIndex:i];
                NSString *itemType = [dataSet objectForKey:@"ITEM_TYPE"];
                
                if(![itemType isEqualToString:@"MEMBER"]){
                    notMemberCnt++;
                }
            }
            [self.tableView reloadData];
        }
        
    } else if([wsName isEqualToString:@"getPostLists"]){
        if (error!=nil || [error isEqualToString:@"(null)"]) {
            if ([error isEqualToString:@"The request timed out."]) {
                //[self callGetPostList:nil];
                [self callWebService:@"getPostLists" :nil];
            }else{
                //NSLog(@"%s \n Error Message : %@",__FUNCTION__,error);
                NSString *errorMsg =[error stringByAppendingFormat:@"\n=======WebService========\n%@",session.url.absoluteString];
                errorMsg = [errorMsg stringByAppendingFormat:@"\n=======Parameter========\n%@",session.paramString];
                errorMsg = [errorMsg stringByAppendingFormat:@"\n=======return string========\n%@",session.returnDataString];
                UIAlertController* alert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"msg18", @"") message:errorMsg preferredStyle:UIAlertControllerStyleAlert];
                
                UIAlertAction* okAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"msg3", @"") style:UIAlertActionStyleDefault handler:^(UIAlertAction * action) {}];
                UIAlertAction* retryAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"msg19", @"") style:UIAlertActionStyleDefault
                                                                    handler:^(UIAlertAction * action) {[self callWebService:@"getPostLists" :nil]; }];
                
                [alert addAction:okAction];
                [alert addAction:retryAction];
                [self presentViewController:alert animated:YES completion:nil];
            }
            
        } else{
            NSMutableArray *dataSets = [session.returnDictionary objectForKey:@"DATASET"];
            
            NSString *seq = [[NSString alloc]init];
            for(int i=1; i<=dataSets.count; i++){
                seq = [NSString stringWithFormat:@"%d", [self.lastPostNo intValue]+i];
            }
            
            if ([result isEqualToString:@"SUCCESS"]) {
                if ([self.lastPostNo intValue]==1) {
                    self.lastPostNo = seq;
                    self.postDataSetArray = [NSMutableArray arrayWithArray:dataSets];
                    
                }else{
                    if (dataSets.count>0){
                        self.lastPostNo = seq;
                        //[self.dataSetArray addObjectsFromArray:[session.returnDictionary objectForKey:@"DATASET"]]; //thin copy 참조만
                        [self.postDataSetArray addObjectsFromArray:dataSets]; //deep copy
                    }
                }
                [self.tableView reloadData];
                
            }else{
                NSLog(@"%s \n Error Message : %@",__FUNCTION__,[session.returnDictionary objectForKey:@"MESSAGE"]);
            }
        }
        [self stopLoading];
        
    } else if([wsName isEqualToString:@"joinSNS"]){
        if ([result isEqualToString:@"SUCCESS"]) {
            NSMutableArray *dataSet = [session.returnDictionary objectForKey:@"DATASET"];
            NSString *affected = [[dataSet objectAtIndex:0] objectForKey:@"AFFECTED"];
            NSString *needAllow = [[dataSet objectAtIndex:0] objectForKey:@"NEED_ALLOW"];
            NSString *snsName = [NSString urlDecodeString:[[dataSet objectAtIndex:0] objectForKey:@"SNS_NM"]];
            
            self.boardDataSetArray = [[NSMutableArray alloc]init];
            [self callWebService:@"getUserSNSLists" :searchText];
            
            if ([affected intValue]>=0) {
                if([needAllow isEqualToString:@"0"]){
                    UIAlertController *alert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"join_sns_toast1", @"join_sns_toast1"), snsName] message:nil preferredStyle:UIAlertControllerStyleAlert];
                    UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * action) {
                                                                         [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_RefreshTeamList" object:nil];
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                     }];
                    
                    [alert addAction:okButton];
                    [self presentViewController:alert animated:YES completion:nil];
                    
                } else if([needAllow isEqualToString:@"1"]){
                    UIAlertController *alert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"join_sns_toast2", @"join_sns_toast2"), snsName] message:nil preferredStyle:UIAlertControllerStyleAlert];
                    UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * action) {
                                                                         [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_RefreshTeamList" object:nil];
                                                                         [alert dismissViewControllerAnimated:YES completion:nil];
                                                                     }];
                    
                    [alert addAction:okButton];
                    [self presentViewController:alert animated:YES completion:nil];
                }
            } else {
                //이미 가입 처리
                UIAlertController *alert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"join_sns_toast10", @"join_sns_toast10") message:nil preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction * action) {
                                                                     [alert dismissViewControllerAnimated:YES completion:nil];
                                                                 }];
                
                [alert addAction:okButton];
                [self presentViewController:alert animated:YES completion:nil];
            }
        }
    } else if([wsName isEqualToString:@"withdrawSNS"]){
        [self callWebService:@"getUserSNSLists" :searchText];
        UIAlertController *alert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"join_sns_toast9", @"join_sns_toast9") message:nil preferredStyle:UIAlertControllerStyleAlert];
        UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"확인", @"확인") style:UIAlertActionStyleDefault
                                                         handler:^(UIAlertAction * action) {
                                                             [[NSNotificationCenter defaultCenter] postNotificationName:@"noti_RefreshTeamList" object:nil];
                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                         }];
        [alert addAction:okButton];
        [self presentViewController:alert animated:YES completion:nil];
    }
}

#pragma mark - UITableView Delegate & DataSource
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    if([self.fromSegue isEqualToString:@"BOARD_SEARCH_MODAL"]){
        if(self.boardDataSetArray.count > 0){
            return self.boardDataSetArray.count;
        } else {
            return 0;
        }
        
    } else if([self.fromSegue isEqualToString:@"POST_BOARD_SEARCH_MODAL"]){
        if(self.boardDataSetArray.count-notMemberCnt > 0){
            return self.boardDataSetArray.count-notMemberCnt;
        } else {
            return 0;
        }
        
    } else if([self.fromSegue isEqualToString:@"POST_SEARCH_MODAL"] || [self.fromSegue isEqualToString:@"BOARD_POST_SEARCH_MODAL"]){
        if(self.postDataSetArray.count > 0){
            return self.postDataSetArray.count;
        } else {
            return 0;
        }
        
    } else if([self.fromSegue isEqualToString:@"SEARCH_CHAT_LIST_MODAL"]){
        if(self.chatArray.count > 0){
            return self.chatArray.count;
        } else {
            return 0;
        }
    }
    
    return 0;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    if([self.fromSegue isEqualToString:@"BOARD_SEARCH_MODAL"] || [self.fromSegue isEqualToString:@"POST_BOARD_SEARCH_MODAL"]){
        return 80;
        
    } else if([self.fromSegue isEqualToString:@"POST_SEARCH_MODAL"] || [self.fromSegue isEqualToString:@"BOARD_POST_SEARCH_MODAL"]){
        if(self.postDataSetArray != nil){
            NSDictionary *dataSetItem = [self.postDataSetArray objectAtIndex:indexPath.row];
            NSArray *contentArray =[dataSetItem objectForKey:@"CONTENT"];
            
            BOOL isText = false;
            BOOL isImg = false;
            BOOL isFile = false;
            
            for (NSDictionary *content in contentArray) {
                if ([[content objectForKey:@"TYPE"] isEqualToString:@"TEXT"]) {
                    isText = YES;
                } else if ([[content objectForKey:@"TYPE"] isEqualToString:@"IMG"]) {
                    isImg = YES;
                } else if ([[content objectForKey:@"TYPE"] isEqualToString:@"FILE"]) {
                    isFile = YES;
                }
            }
            
            //NSLog(@"contentArray : %@", contentArray);
            
            if(isText && !isImg && !isFile) {
                return 208;
                
            } else if(isText && isImg && !isFile){
                return 458;
                
            } else if(isText && !isImg && isFile){
                return 258;
                
            } else if(isText && isImg && isFile){
                return 513;
                
            } else if(!isText && isImg && !isFile){
                return 422;
                
            } else if(!isText && isImg && isFile){
                return 482;
                
            } else if(!isText && !isImg && isFile){
                return 217;
                
            } else {
                return 513;
            }
        }
    } else if([self.fromSegue isEqualToString:@"SEARCH_CHAT_LIST_MODAL"]){
        return 80;
    }
    
    return 0;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    if([self.fromSegue isEqualToString:@"BOARD_SEARCH_MODAL"] || [self.fromSegue isEqualToString:@"POST_BOARD_SEARCH_MODAL"]){
        MFGroupCell *cell = [tableView dequeueReusableCellWithIdentifier:@"MFGroupCell"];
        
        if (cell == nil) {
            NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"MFGroupCell" owner:self options:nil];
            
            for (id currentObject in topLevelObject) {
                if ([currentObject isKindOfClass:[MFGroupCell class]]) {
                    cell = (MFGroupCell *) currentObject;
                    [cell setSelectionStyle:UITableViewCellSelectionStyleNone];
                }
            }
        }
        
        NSDictionary *sns = [self.boardDataSetArray objectAtIndex:indexPath.row];
        NSString *snsStatus = [sns objectForKey:@"ITEM_TYPE"];
        
        if([self.fromSegue isEqualToString:@"POST_BOARD_SEARCH_MODAL"]&&[snsStatus isEqualToString:@"MEMBER"]){
            [self setUpBoardSearchCell:cell atIndexPath:indexPath];
        } else {
            [self setUpBoardSearchCell:cell atIndexPath:indexPath];
        }
        
        [tableView setSeparatorStyle:UITableViewCellSeparatorStyleSingleLine];
        
        cell.gestureRecognizers = nil;
        UILongPressGestureRecognizer *longPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(boardLongClick:)];
        longPress.minimumPressDuration = 0.5;
        longPress.delegate = self;
        [cell addGestureRecognizer:longPress];
        
        return cell;
        
    } else if([self.fromSegue isEqualToString:@"POST_SEARCH_MODAL"]){
        SearchTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"SearchTableViewCell"];
        if (cell == nil) {
            NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"SearchTableViewCell" owner:self options:nil];
            
            for (id currentObject in topLevelObject) {
                if ([currentObject isKindOfClass:[SearchTableViewCell class]]) {
                    cell = (SearchTableViewCell *) currentObject;
                    [cell setSelectionStyle:UITableViewCellSelectionStyleNone];
                }
            }
        }
        
        cell.descriptionLabel.text = nil;
        cell.contentImageView.image = nil;
        cell.fileName.text = nil;
        
        if(cell!=nil && self.postDataSetArray.count>0){
            NSDictionary *dataSetItem = [self.postDataSetArray objectAtIndex:indexPath.item];
            
            NSString *profileImagePath = [NSString urlDecodeString:[dataSetItem objectForKey:@"STATUS_IMG"]];
            NSString *snsName = [NSString urlDecodeString:[dataSetItem objectForKey:@"SNS_NM"]];
            NSString *postDate = [NSString urlDecodeString:[dataSetItem objectForKey:@"POST_DATE"]];
            NSString *writerName = [NSString urlDecodeString:[dataSetItem objectForKey:@"CUSER_NM"]];
            NSArray *contentArray = [dataSetItem objectForKey:@"CONTENT"];
            NSString *commCnt = [dataSetItem objectForKey:@"POST_COMMENT_COUNT"];
            NSString *readCnt = [dataSetItem objectForKey:@"POST_READ_COUNT"];
            
            if (![profileImagePath isEqual:@""]) {
                NSString *contentsImagePath = profileImagePath;
                
                NSURL *url = [NSURL URLWithString:[contentsImagePath stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]];
                NSURLSessionTask *task = [[NSURLSession sharedSession] dataTaskWithURL:url completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
                    
                    if (data) {
                        UIImage *image = [UIImage imageWithData:data];
                        if (image) {
                            dispatch_async(dispatch_get_main_queue(), ^{
                                
                                UIImage *userImg = [self imageByScalingAndCroppingForSize:CGSizeMake(90, 90) :image];
                                [cell.userImageButton setImage:userImg forState:UIControlStateNormal];
                            });
                        }
                    }
                }];
                [task resume];
            } else{
                [cell.userImageButton setImage:[UIImage imageNamed:@"profile_default.png"] forState:UIControlStateNormal];
            }
            
            NSDate *currentDate = [NSDate date];
            NSDateFormatter *formatter = [[NSDateFormatter alloc]init];
            formatter.dateFormat = @"yyyy-MM-dd HH:mm";
            NSString *tmp = [postDate substringToIndex:postDate.length-3];
            NSDate *regiDate = [formatter dateFromString:tmp];
            
            NSCalendar *sysCalendar = [NSCalendar currentCalendar];
            unsigned int unitFlags = NSCalendarUnitDay;
            NSDateComponents *dateComp = [sysCalendar components:unitFlags fromDate:regiDate toDate:currentDate options:0];//날짜 비교해서 차이값 추출
            NSInteger date = dateComp.day;
            
            NSString *postDateString = [[NSString alloc]init];
            if(date > 0){
                postDateString = tmp;
            } else{
                postDateString = [MFUtil getTimeIntervalFromDate:regiDate ToDate:currentDate];
            }
            
            cell.userNameLabel.text = writerName;
            cell.dateLabel.text = postDateString;
            cell.teamNameLabel.text = snsName;
            
            [cell.userImageButton addTarget:self action:@selector(tapDetected:) forControlEvents:UIControlEventTouchUpInside];
            cell.userImageButton.tag = indexPath.item;
            
            cell.commentCnt.text = [NSString stringWithFormat:@"댓글 %@",commCnt];
            cell.readCnt.text = [NSString stringWithFormat:@"%@",readCnt];
            
            //읽음카운트 20이상 줄바꿈 현상 수정
            NSDictionary *attributes = @{NSFontAttributeName: [cell.readCnt font]};
            CGSize textSize = [[cell.readCnt text] sizeWithAttributes:attributes];
            CGFloat strikeWidth = textSize.width;
            //NSLog(@"strikeWidth : %f", strikeWidth);
            
            if(strikeWidth < 14.0f){
                cell.readCntConstraint.constant = 15;
            } else {
                cell.readCntConstraint.constant = strikeWidth+5;
            }
            cell.readCnt.textAlignment = NSTextAlignmentRight;
            
            NSInteger count = [contentArray count]-1;
            NSString *description = @"";
            NSString *thumbImagePath =  @"";
            NSString *originImagePath =  @"";
            NSString *filePath =  @"";
            
            for (int i=(int)count; i>=0; i--) {
                NSDictionary *content = [contentArray objectAtIndex:i];
                if ([[content objectForKey:@"TYPE"] isEqualToString:@"TEXT"]) {
                    description = [NSString urlDecodeString:[content objectForKey:@"VALUE"]];
                    
                    NSString *newString = [description stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                    cell.descriptionLabel.text = newString;
                    
                    [cell.descriptionLabel setNumberOfLines:2];
                }
                if ([[content objectForKey:@"TYPE"] isEqualToString:@"IMG"]) {
                    NSDictionary *value = [content objectForKey:@"VALUE"];
                    thumbImagePath = [NSString urlDecodeString:[value objectForKey:@"THUMB"]];
                    originImagePath = [NSString urlDecodeString:[value objectForKey:@"ORIGIN"]];
                }
                if ([[content objectForKey:@"TYPE"] isEqualToString:@"FILE"]) {
                    filePath = [NSString urlDecodeString:[content objectForKey:@"VALUE"]];
                    NSRange range = [filePath rangeOfString:@"/" options:NSBackwardsSearch];
                    NSString *fileName = [filePath substringFromIndex:range.location+1];
                    cell.fileName.text = fileName;
                    
                    NSRange range2 = [fileName rangeOfString:@"." options:NSBackwardsSearch];
                    NSString *fileExt = [[fileName substringFromIndex:range2.location+1] lowercaseString];
                    
                    if([fileExt isEqualToString:@"jpg"]||[fileExt isEqualToString:@"jpeg"]||[fileExt isEqualToString:@"gif"]||[fileExt isEqualToString:@"png"]||[fileExt isEqualToString:@"tiff"]||[fileExt isEqualToString:@"bmp"]||[fileExt isEqualToString:@"heic"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_img.png"];
                        
                    } else if([fileExt isEqualToString:@"mp4"]||[fileExt isEqualToString:@"mkv"]||[fileExt isEqualToString:@"wma"]||[fileExt isEqualToString:@"mov"]||[fileExt isEqualToString:@"swf"]||[fileExt isEqualToString:@"mpg"]||[fileExt isEqualToString:@"mpeg"]||[fileExt isEqualToString:@"vob"]||[fileExt isEqualToString:@"asf"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_movie.png"];
                        
                    } else if([fileExt isEqualToString:@"mp3"]||[fileExt isEqualToString:@"wav"]||[fileExt isEqualToString:@"ogg"]||[fileExt isEqualToString:@"wma"]||[fileExt isEqualToString:@"m4a"]||[fileExt isEqualToString:@"flac"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_music.png"];
                        
                    } else if([fileExt isEqualToString:@"psd"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_psd.png"];
                        
                    } else if([fileExt isEqualToString:@"ai"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_ai.png"];
                        
                    } else if([fileExt isEqualToString:@"docx"]||[fileExt isEqualToString:@"doc"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_word.png"];
                        
                    } else if([fileExt isEqualToString:@"pptx"]||[fileExt isEqualToString:@"ppt"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_ppt.png"];
                        
                    } else if([fileExt isEqualToString:@"xls"]||[fileExt isEqualToString:@"xlsx"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_excel.png"];
                        
                    } else if([fileExt isEqualToString:@"pdf"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_pdf.png"];
                        
                    } else if([fileExt isEqualToString:@"txt"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_txt.png"];
                        
                    } else if([fileExt isEqualToString:@"hwp"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_hwp.png"];
                        
                    } else if([fileExt isEqualToString:@"zip"]||[fileExt isEqualToString:@"rar"]||[fileExt isEqualToString:@"egg"]||[fileExt isEqualToString:@"alz"]||[fileExt isEqualToString:@"7z"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_zip.png"];
                        
                    } else {
                        cell.fileIcon.image = [UIImage imageNamed:@"file_document.png"];
                    }
                }
            }
            
            
            if (originImagePath!=nil && ![originImagePath isEqualToString:@""]) {
                NSString *contentsImagePath = originImagePath;
                
                NSURL *url = [NSURL URLWithString:[contentsImagePath stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]];
                NSURLSessionTask *task = [[NSURLSession sharedSession] dataTaskWithURL:url completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
                    if (data) {
                        UIImage *image = [UIImage imageWithData:data];
                        if (image) {
                            dispatch_async(dispatch_get_main_queue(), ^{
                                cell.contentImageView.image = [self imageByScalingAndCroppingForSize:CGSizeMake(cell.contentImageView.frame.size.width, cell.contentImageView.frame.size.height) :image];
                                cell.contentImageView.hidden = NO;
                            });
                        }
                    }
                }];
                [task resume];
                
            } else{
                cell.contentImageView.hidden = YES;
            }
            
            if(filePath!=nil && ![filePath isEqualToString:@""]){
                //NSLog(@"filePath : %@", filePath);
                cell.fileView.hidden = NO;
                cell.fileIcon.hidden = NO;
                cell.fileName.hidden = NO;
                
                cell.fileView.frame = CGRectMake(cell.frame.origin.x, 350, cell.contentView.frame.size.width, 0);
                
                
                if(![description isEqualToString:@""] && ![originImagePath isEqualToString:@""]) {
                    cell.fileView.frame = CGRectMake(cell.frame.origin.x, cell.contentImageView.frame.origin.y+cell.contentImageView.frame.size.height+7, cell.contentView.frame.size.width, 50);
                    
                } else if([description isEqualToString:@""] && ![originImagePath isEqualToString:@""]){
                    cell.fileView.frame = CGRectMake(cell.frame.origin.x, cell.descriptionLabel.frame.origin.y+cell.contentImageView.frame.size.height+10, cell.contentView.frame.size.width, 50);
                    
                } else if(![description isEqualToString:@""] && [originImagePath isEqualToString:@""]){
                    cell.fileView.frame = CGRectMake(cell.frame.origin.x, cell.descriptionLabel.frame.origin.y+cell.descriptionLabel.frame.size.height+4, cell.contentView.frame.size.width, 50);
                    
                } else {
                    cell.fileView.frame = CGRectMake(cell.frame.origin.x, cell.descriptionLabel.frame.origin.y, cell.contentView.frame.size.width, 50);
                    //NSLog(@"cell.fileView.frame.origin.y : %f, cell.fileView.frame.size.height : %f", cell.fileView.frame.origin.y, cell.fileView.frame.size.height);
                }
            }
            else {
                cell.fileView.hidden = YES;
                cell.fileIcon.hidden = YES;
                cell.fileName.hidden = YES;
                cell.fileView.frame = CGRectMake(cell.frame.origin.x, cell.fileView.frame.origin.y, cell.contentView.frame.size.width, 0);
            }
        }
        return cell;
        
    } else if([self.fromSegue isEqualToString:@"BOARD_POST_SEARCH_MODAL"]){
        //SearchTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"SearchTableViewCell"];
        TeamSelectViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"TeamSelectViewCell"];
        
        if (cell == nil) {
            NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"TeamSelectViewCell" owner:self options:nil];
            
            for (id currentObject in topLevelObject) {
                if ([currentObject isKindOfClass:[TeamSelectViewCell class]]) {
                    cell = (TeamSelectViewCell *) currentObject;
                    [cell setSelectionStyle:UITableViewCellSelectionStyleNone];
                }
            }
        }
        
        cell.descriptionLabel.text = nil;
        cell.contentImageView.image = nil;
        cell.fileName.text = nil;
        
        if(cell!=nil && self.postDataSetArray.count>0){
            //NSLog(@"self.dataSetArray : %@", self.dataSetArray);
            NSDictionary *dataSetItem = [self.postDataSetArray objectAtIndex:indexPath.item];
            //NSLog(@"dataSetItem : %@", dataSetItem);
            
            NSString *profileImagePath = [NSString urlDecodeString:[dataSetItem objectForKey:@"STATUS_IMG"]];
            NSString *snsName = [NSString urlDecodeString:[dataSetItem objectForKey:@"SNS_NM"]];
            NSString *postDate = [NSString urlDecodeString:[dataSetItem objectForKey:@"POST_DATE"]];
            NSString *writerName = [NSString urlDecodeString:[dataSetItem objectForKey:@"CUSER_NM"]];
            NSArray *contentArray = [dataSetItem objectForKey:@"CONTENT"];
            NSString *commCnt = [dataSetItem objectForKey:@"POST_COMMENT_COUNT"];
            NSString *readCnt = [dataSetItem objectForKey:@"POST_READ_COUNT"];
            
            //NSLog(@"postDate : %@", postDate);
            //NSLog(@"snsName : %@", snsName);
            
            if (![profileImagePath isEqual:@""]) {
                NSString *contentsImagePath = profileImagePath;
                
                NSURL *url = [NSURL URLWithString:[contentsImagePath stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]];
                NSURLSessionTask *task = [[NSURLSession sharedSession] dataTaskWithURL:url completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
                    
                    if (data) {
                        UIImage *image = [UIImage imageWithData:data];
                        if (image) {
                            dispatch_async(dispatch_get_main_queue(), ^{
                                
                                UIImage *userImg = [self imageByScalingAndCroppingForSize:CGSizeMake(90, 90) :image];
                                [cell.userImageButton setImage:userImg forState:UIControlStateNormal];
                            });
                        }
                    }
                }];
                [task resume];
            } else{
                [cell.userImageButton setImage:[UIImage imageNamed:@"profile_default.png"] forState:UIControlStateNormal];
            }
            
            NSDate *currentDate = [NSDate date];
            NSDateFormatter *formatter = [[NSDateFormatter alloc]init];
            formatter.dateFormat = @"yyyy-MM-dd HH:mm";
            NSString *tmp = [postDate substringToIndex:postDate.length-3];
            NSDate *regiDate = [formatter dateFromString:tmp];
            
            NSCalendar *sysCalendar = [NSCalendar currentCalendar];
            unsigned int unitFlags = NSCalendarUnitDay;
            NSDateComponents *dateComp = [sysCalendar components:unitFlags fromDate:regiDate toDate:currentDate options:0];//날짜 비교해서 차이값 추출
            NSInteger date = dateComp.day;
            
            NSString *postDateString = [[NSString alloc]init];
            if(date > 0){
                postDateString = tmp;
                //NSLog(@"postDateString : %@", postDateString);
            } else{
                postDateString = [MFUtil getTimeIntervalFromDate:regiDate ToDate:currentDate];
            }
            
            cell.userNameLabel.text = writerName;
            cell.dateLabel.text = postDateString;
            cell.teamNameLabel.text = snsName;
            
            [cell.userImageButton addTarget:self action:@selector(tapDetected:) forControlEvents:UIControlEventTouchUpInside];
            cell.userImageButton.tag = indexPath.item;
            
            cell.commentCnt.text = [NSString stringWithFormat:@"댓글 %@",commCnt];
            cell.readCnt.text = [NSString stringWithFormat:@"%@",readCnt];
            
            //읽음카운트 20이상 줄바꿈 현상 수정
            NSDictionary *attributes = @{NSFontAttributeName: [cell.readCnt font]};
            CGSize textSize = [[cell.readCnt text] sizeWithAttributes:attributes];
            CGFloat strikeWidth = textSize.width;
            
            if(strikeWidth < 14.0f){
                cell.readCntConstraint.constant = 15;
            } else {
                cell.readCntConstraint.constant = strikeWidth+5;
            }
            cell.readCnt.textAlignment = NSTextAlignmentRight;
            
            NSInteger count = [contentArray count]-1;
            NSString *description = @"";
            NSString *thumbImagePath =  @"";
            NSString *originImagePath =  @"";
            NSString *filePath =  @"";
            
            for (int i=(int)count; i>=0; i--) {
                NSDictionary *content = [contentArray objectAtIndex:i];
                if ([[content objectForKey:@"TYPE"] isEqualToString:@"TEXT"]) {
                    description = [NSString urlDecodeString:[content objectForKey:@"VALUE"]];
                    
                    NSString *newString = [description stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                    if(![newString isEqualToString:@""]){
                        cell.descriptionLabel.text = newString;
                        //cell.descriptionLabel.text = description;
                        [cell.descriptionLabel setNumberOfLines:2];
                    }
                }
                if ([[content objectForKey:@"TYPE"] isEqualToString:@"IMG"]) {
                    NSDictionary *value = [content objectForKey:@"VALUE"];
                    thumbImagePath = [NSString urlDecodeString:[value objectForKey:@"THUMB"]];
                    originImagePath = [NSString urlDecodeString:[value objectForKey:@"ORIGIN"]];
                }
                if ([[content objectForKey:@"TYPE"] isEqualToString:@"FILE"]) {
                    filePath = [NSString urlDecodeString:[content objectForKey:@"VALUE"]];
                    NSRange range = [filePath rangeOfString:@"/" options:NSBackwardsSearch];
                    NSString *fileName = [filePath substringFromIndex:range.location+1];
                    cell.fileName.text = fileName;
                    
                    NSRange range2 = [fileName rangeOfString:@"." options:NSBackwardsSearch];
                    NSString *fileExt = [[fileName substringFromIndex:range2.location+1] lowercaseString];
                    
                    if([fileExt isEqualToString:@"jpg"]||[fileExt isEqualToString:@"jpeg"]||[fileExt isEqualToString:@"gif"]||[fileExt isEqualToString:@"png"]||[fileExt isEqualToString:@"tiff"]||[fileExt isEqualToString:@"bmp"]||[fileExt isEqualToString:@"heic"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_img.png"];
                        
                    } else if([fileExt isEqualToString:@"mp4"]||[fileExt isEqualToString:@"mkv"]||[fileExt isEqualToString:@"wma"]||[fileExt isEqualToString:@"mov"]||[fileExt isEqualToString:@"swf"]||[fileExt isEqualToString:@"mpg"]||[fileExt isEqualToString:@"mpeg"]||[fileExt isEqualToString:@"vob"]||[fileExt isEqualToString:@"asf"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_movie.png"];
                        
                    } else if([fileExt isEqualToString:@"mp3"]||[fileExt isEqualToString:@"wav"]||[fileExt isEqualToString:@"ogg"]||[fileExt isEqualToString:@"wma"]||[fileExt isEqualToString:@"m4a"]||[fileExt isEqualToString:@"flac"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_music.png"];
                        
                    } else if([fileExt isEqualToString:@"psd"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_psd.png"];
                        
                    } else if([fileExt isEqualToString:@"ai"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_ai.png"];
                        
                    } else if([fileExt isEqualToString:@"docx"]||[fileExt isEqualToString:@"doc"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_word.png"];
                        
                    } else if([fileExt isEqualToString:@"pptx"]||[fileExt isEqualToString:@"ppt"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_ppt.png"];
                        
                    } else if([fileExt isEqualToString:@"xls"]||[fileExt isEqualToString:@"xlsx"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_excel.png"];
                        
                    } else if([fileExt isEqualToString:@"pdf"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_pdf.png"];
                        
                    } else if([fileExt isEqualToString:@"txt"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_txt.png"];
                        
                    } else if([fileExt isEqualToString:@"hwp"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_hwp.png"];
                        
                    } else if([fileExt isEqualToString:@"zip"]||[fileExt isEqualToString:@"rar"]||[fileExt isEqualToString:@"egg"]||[fileExt isEqualToString:@"alz"]||[fileExt isEqualToString:@"7z"]){
                        cell.fileIcon.image = [UIImage imageNamed:@"file_zip.png"];
                        
                    } else {
                        cell.fileIcon.image = [UIImage imageNamed:@"file_document.png"];
                    }
                }
            }
            
            
            if (originImagePath!=nil && ![originImagePath isEqualToString:@""]) {
                NSString *contentsImagePath = originImagePath;
                
                NSURL *url = [NSURL URLWithString:[contentsImagePath stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]];
                NSURLSessionTask *task = [[NSURLSession sharedSession] dataTaskWithURL:url completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
                    if (data) {
                        UIImage *image = [UIImage imageWithData:data];
                        if (image) {
                            dispatch_async(dispatch_get_main_queue(), ^{
                                cell.contentImageView.image = [self imageByScalingAndCroppingForSize:CGSizeMake(cell.contentImageView.frame.size.width, cell.contentImageView.frame.size.height) :image];
                                cell.contentImageView.hidden = NO;
                            });
                        }
                    }
                }];
                [task resume];
                
            } else{
                cell.contentImageView.hidden = YES;
            }
            
            if(filePath!=nil && ![filePath isEqualToString:@""]){
                cell.fileView.hidden = NO;
                cell.fileIcon.hidden = NO;
                cell.fileName.hidden = NO;
                
                cell.fileView.frame = CGRectMake(cell.frame.origin.x, 350, cell.contentView.frame.size.width, 0);
                
                if(![description isEqualToString:@""] && ![originImagePath isEqualToString:@""]) {
                    cell.fileView.frame = CGRectMake(cell.frame.origin.x, cell.contentImageView.frame.origin.y+cell.contentImageView.frame.size.height+7, cell.contentView.frame.size.width, 50);
                    
                } else if([description isEqualToString:@""] && ![originImagePath isEqualToString:@""]){
                    cell.fileView.frame = CGRectMake(cell.frame.origin.x, cell.descriptionLabel.frame.origin.y+cell.contentImageView.frame.size.height+10, cell.contentView.frame.size.width, 50);
                    
                } else if(![description isEqualToString:@""] && [originImagePath isEqualToString:@""]){
                    cell.fileView.frame = CGRectMake(cell.frame.origin.x, cell.descriptionLabel.frame.origin.y+cell.descriptionLabel.frame.size.height+4, cell.contentView.frame.size.width, 50);
                    
                } else {
                    cell.fileView.frame = CGRectMake(cell.frame.origin.x, cell.descriptionLabel.frame.origin.y, cell.contentView.frame.size.width, 50);
                }
            }
            else {
                cell.fileView.hidden = YES;
                cell.fileIcon.hidden = YES;
                cell.fileName.hidden = YES;
                cell.fileView.frame = CGRectMake(cell.frame.origin.x, cell.fileView.frame.origin.y, cell.contentView.frame.size.width, 0);
            }
        }
        return cell;
        
    } else if([self.fromSegue isEqualToString:@"SEARCH_CHAT_LIST_MODAL"]){
        SearchChatListViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"SearchChatListViewCell"];
        
        if (cell == nil) {
            NSArray *topLevelObject = [[NSBundle mainBundle] loadNibNamed:@"SearchChatListViewCell" owner:self options:nil];
            
            for (id currentObject in topLevelObject) {
                if ([currentObject isKindOfClass:[SearchChatListViewCell class]]) {
                    cell = (SearchChatListViewCell *) currentObject;
                    [cell setSelectionStyle:UITableViewCellSelectionStyleNone];
                }
            }
        }
        
        if (self.chatArray.count>0) {
            NSDate *currentDate = [NSDate date];
            NSDateFormatter *formatter = [[NSDateFormatter alloc]init];
            formatter.dateFormat = @"yyyy-MM-dd HH:mm";
            NSString *lastDate = [[self.chatArray objectAtIndex:indexPath.row] objectForKey:@"LAST_DATE"];
            NSString *tmp = [lastDate substringToIndex:lastDate.length-3];
            NSDate *regiDate = [formatter dateFromString:tmp];
            NSString *newChat = [[self.chatArray objectAtIndex:indexPath.row] objectForKey:@"NEW_CHAT"];
            NSString *memberCnt = [[self.chatArray objectAtIndex:indexPath.row] objectForKey:@"MEMBER_COUNT"];
            NSString *roomImgPath = [[self.chatArray objectAtIndex:indexPath.row] objectForKey:@"ROOM_IMG"];
            NSString *notReadCount = [[self.tempArr objectAtIndex:indexPath.row] objectForKey:@"NOT_READ_COUNT"];
            
            NSArray *roomImgArr = [NSArray array];
            UIImage *img1 = [[UIImage alloc]init];
            UIImage *img2 = [[UIImage alloc]init];
            UIImage *img3 = [[UIImage alloc]init];
            UIImage *img4 = [[UIImage alloc]init];
            UIImage *roomImg = [[UIImage alloc]init];
            UIImage *thumbImg = [[UIImage alloc]init];
            
            //NSLog(@"roomImgPath : %@", roomImgPath);
            //NSLog(@"roomImgArr : %@", roomImgArr);
            
            if([roomImgPath rangeOfString:@","].location != NSNotFound){
                roomImgArr = [roomImgPath componentsSeparatedByString:@","];
            }
            //NSLog(@"roomImgArr : %@", roomImgArr);
            
            
            //프로필이미지가 로컬에 있는지 확인, 없으면 로컬에 저장
            /*NSString *chkTmpPath = NSTemporaryDirectory();
             NSString *chkFile = [chkTmpPath stringByAppendingPathComponent:[roomImgPath lastPathComponent]];
             BOOL fileExists = [[NSFileManager defaultManager] fileExistsAtPath:chkFile];
             //NSLog(@"fileExists : %d", fileExists);
             if(!fileExists){
             UIImage *thumbImage = [UIImage imageWithData:[NSData dataWithContentsOfURL:[NSURL URLWithString:[roomImgPath stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]]]];
             NSData *imageData = UIImagePNGRepresentation(thumbImage);
             NSString *fileName = [roomImgPath lastPathComponent];
             
             NSString *thumbImgPath =[chkTmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@",fileName]];
             [imageData writeToFile:thumbImgPath atomically:YES];
             //NSLog(@"thumbImgPath : %@", thumbImgPath);
             }*/
            
            if(![roomImgPath isEqualToString:@""]){
                NSRange range = [roomImgPath rangeOfString:@"/" options:NSBackwardsSearch];
                NSString *thumbStr = [roomImgPath substringFromIndex:range.location+1];
                NSMutableString *thumbFileNm = [[NSMutableString alloc]initWithString:thumbStr];
                
                NSString *tmpPath = NSTemporaryDirectory();
                NSString *thumbProfilePath = [tmpPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@",thumbFileNm]];
                
                NSData *data = [NSData dataWithContentsOfFile:thumbProfilePath];
                thumbImg = [UIImage imageWithData:data];
            }
            
            
            if([memberCnt integerValue] == 3){
                if(roomImgArr.count > 0){
                    ChatRoomImgDivision *divide = [[ChatRoomImgDivision alloc]init];
                    [divide roomImgSetting:roomImgPath :roomImgArr :memberCnt];
                    roomImg = divide.returnImg;
                } else {
                    if([roomImgPath isEqualToString:@""]) img1 = [UIImage imageNamed:@"profile_default.png"];
                    else img1 = thumbImg;
                    
                    img2 = [UIImage imageNamed:@"profile_default.png"];
                    roomImg = [[ChatRoomImgDivision alloc]twoImagesDivision:img1 :img2];
                }
            } else if ([memberCnt integerValue] == 4){
                if(roomImgArr.count > 0){
                    ChatRoomImgDivision *divide = [[ChatRoomImgDivision alloc]init];
                    [divide roomImgSetting:roomImgPath :roomImgArr :memberCnt];
                    roomImg = divide.returnImg;
                } else {
                    if([roomImgPath isEqualToString:@""]) img1 = [UIImage imageNamed:@"profile_default.png"];
                    else img1 = thumbImg;
                    
                    img2 = [UIImage imageNamed:@"profile_default.png"];
                    img3 = [UIImage imageNamed:@"profile_default.png"];
                    roomImg = [[ChatRoomImgDivision alloc]threeImagesDivision:img1 :img2 :img3];
                }
            } else if ([memberCnt integerValue] > 4){
                if(roomImgArr.count > 0){
                    ChatRoomImgDivision *divide = [[ChatRoomImgDivision alloc]init];
                    [divide roomImgSetting:roomImgPath :roomImgArr :memberCnt];
                    roomImg = divide.returnImg;
                } else {
                    if([roomImgPath isEqualToString:@""]) img1 = [UIImage imageNamed:@"profile_default.png"];
                    else img1 = thumbImg;
                    
                    img2 = [UIImage imageNamed:@"profile_default.png"];
                    img3 = [UIImage imageNamed:@"profile_default.png"];
                    img4 = [UIImage imageNamed:@"profile_default.png"];
                    roomImg = [[ChatRoomImgDivision alloc]fourImagesDivision:img1 :img2 :img3 :img4];
                }
            } else {
                if([roomImgPath isEqualToString:@""]){
                    roomImg = [UIImage imageNamed:@"profile_default.png"];
                } else{
                    roomImg = thumbImg;
                }
            }
            
            NSCalendar *sysCalendar = [NSCalendar currentCalendar];
            unsigned int unitFlags = NSCalendarUnitDay;
            NSDateComponents *dateComp = [sysCalendar components:unitFlags fromDate:regiDate toDate:currentDate options:0];//날짜 비교해서 차이값 추출
            NSInteger date = dateComp.day;
            
            NSString *lastDateString = [[NSString alloc]init];
            if(date > 0){
                lastDateString = tmp;
            } else{
                lastDateString = [MFUtil getTimeIntervalFromDate:regiDate ToDate:currentDate];
            }
            
            
            cell.chatImage.image = roomImg;
            
            NSString *decodeRoomNm = [NSString urlDecodeString:[[self.chatArray objectAtIndex:indexPath.row] objectForKey:@"ROOM_NM"]];
            cell.chatName.text = decodeRoomNm;
            
            cell.chatContent.text = [[self.chatArray objectAtIndex:indexPath.row] objectForKey:@"CONTENT"];
            
            cell.chatDate.text = lastDateString;
            
            if([[[self.chatArray objectAtIndex:indexPath.row] objectForKey:@"MEMBER_COUNT"] integerValue] <= 2){
                cell.userCount.hidden = YES;
                
            } else {
                cell.userCount.text = [[self.chatArray objectAtIndex:indexPath.row] objectForKey:@"MEMBER_COUNT"];
                cell.userCount.hidden = NO;
            }
            
            if([[NSString stringWithFormat:@"%@", newChat] isEqualToString:@"1"]){
                cell.nChatLabel.hidden = NO;
                cell.nChatLabel.text = notReadCount;
            } else {
                cell.nChatLabel.hidden = YES;
            }
            
            NSString *roomNoti = [[self.chatArray objectAtIndex:indexPath.row] objectForKey:@"ROOM_NOTI"];
            //NSLog(@"self.rooNoti : %@", self.roomNoti);
            
            if([roomNoti isEqualToString:@"1"]){ //on
                cell.chatAlarm.hidden = YES;
            } else {
                cell.chatAlarm.hidden = NO;
            }
            
            tableView.scrollEnabled = YES;
            
            [tableView setSeparatorStyle:UITableViewCellSeparatorStyleSingleLine];
            
            return cell;
        }
        
        else {
            UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"EmptyCell" forIndexPath:indexPath];
            tableView.scrollEnabled = YES;
            [cell setUserInteractionEnabled:NO];
            return cell;
        }
        return nil;
    }
    
    return nil;
}

- (void)setUpBoardSearchCell:(MFGroupCell *)cell atIndexPath:(NSIndexPath *)indexPath {
    cell.label3.hidden = YES;
    cell.requestBtn.hidden = YES;
    
    NSDictionary *sns = [self.boardDataSetArray objectAtIndex:indexPath.row];
    NSString *coverImg = [NSString urlDecodeString:[sns objectForKey:@"COVER_IMG"]];
    NSString *snsName = [NSString urlDecodeString:[sns objectForKey:@"SNS_NM"]];
    NSString *snsDesc = [NSString urlDecodeString:[sns objectForKey:@"SNS_DESC"]];
    NSString *createUser = [NSString urlDecodeString:[sns objectForKey:@"CREATE_USER_NM"]];
    NSString *userCnt = [sns objectForKey:@"USER_COUNT"];
    NSString *waitingCnt = [sns objectForKey:@"WAITING_USER_COUNT"];
    NSString *snsStatus = [sns objectForKey:@"ITEM_TYPE"];
    
    if([snsDesc isEqualToString:@""]){
        cell.nameTopConstraint.constant = 12;
        cell.descHeightConstraint.constant = 0;
    } else {
        cell.nameTopConstraint.constant = 4;
        cell.descHeightConstraint.constant = 18;
    }
    
    if(![coverImg isEqualToString:@""]&&![coverImg isEqualToString:@"null"]&&coverImg!=nil){
        MFDBHelper *dbHelper = [[MFDBHelper alloc]init];
        UIImage *image = [dbHelper saveThumbImage:@"cover" :coverImg];
        if(image!=nil){
            UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(90, 90) :image];
            cell.snsImageView.image = postCover;
        } else {
            UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(90, 90) :[UIImage imageNamed:@"board_blue_square.png"]];
            cell.snsImageView.image = postCover;
        }
    } else {
        UIImage *postCover = [self imageByScalingAndCroppingForSize:CGSizeMake(90, 90) :[UIImage imageNamed:@"board_blue_square.png"]];
        cell.snsImageView.image = postCover;
    }
    
    cell.snsName.text = snsName;
    cell.snsDesc.text = snsDesc;
    
    [cell.leaderBtn setBackgroundColor:[UIColor clearColor]];
    [cell.leaderBtn setImage:[self getScaledImage:[UIImage imageNamed:@"icon_crown.png"] scaledToMaxWidth:11.0f] forState:UIControlStateNormal];
    [cell.leaderBtn setImageEdgeInsets:UIEdgeInsetsMake(0.0, 0.0, 0.0, 0.0)];
    [cell.leaderBtn setTitleEdgeInsets:UIEdgeInsetsMake(0.0, 3.0, 0.0, 0.0)];
    [cell.leaderBtn setTitle:createUser forState:UIControlStateNormal];
    if([createUser isEqualToString:@"관리자"]){
        [cell.leaderBtn setTitleColor:[UIColor redColor] forState:UIControlStateNormal];
    }else {
        [cell.leaderBtn setTitleColor:[UIColor lightGrayColor] forState:UIControlStateNormal];
    }
    
    [cell.memberBtn setBackgroundColor:[UIColor clearColor]];
    [cell.memberBtn setImage:[self getScaledImage:[UIImage imageNamed:@"icon_member.png"] scaledToMaxWidth:13.0f] forState:UIControlStateNormal];
    [cell.memberBtn setImageEdgeInsets:UIEdgeInsetsMake(0.0, 0.0, 0.0, 0.0)];
    [cell.memberBtn setTitleEdgeInsets:UIEdgeInsetsMake(0.0, 3.0, 0.0, 0.0)];
    [cell.memberBtn setTitle:[NSString stringWithFormat:@"멤버 %@", userCnt] forState:UIControlStateNormal];
    
    if([waitingCnt intValue]>0){
        cell.label2.hidden = NO;
        cell.inviteBtn.hidden = NO;
        [cell.inviteBtn setBackgroundColor:[UIColor clearColor]];
        [cell.inviteBtn setImage:[self getScaledImage:[UIImage imageNamed:@"icon_mail.png"] scaledToMaxWidth:13.0f] forState:UIControlStateNormal];
        [cell.inviteBtn setImageEdgeInsets:UIEdgeInsetsMake(0.0, 0.0, 0.0, 0.0)];
        [cell.inviteBtn setTitleEdgeInsets:UIEdgeInsetsMake(0.0, 3.0, 0.0, 0.0)];
        [cell.inviteBtn setTitle:[NSString stringWithFormat:@"신청 %@", waitingCnt] forState:UIControlStateNormal];
    } else {
        cell.label2.hidden = YES;
        cell.inviteBtn.hidden = YES;
    }
    
    cell.statusBtn.image = nil;
    cell.statusBtn.contentMode = UIViewContentModeScaleAspectFit;
    if([snsStatus isEqualToString:@"MEMBER"]){
        cell.statusBtn.hidden = NO;
    } else if([snsStatus isEqualToString:@"JOIN_STANDBY"]){
        [cell.statusBtn setImage:[UIImage imageNamed:@"icon_standby.png"]];
        cell.statusBtn.hidden = NO;
    } else if([snsStatus isEqualToString:@"NOMEMBER"]){
        [cell.statusBtn setImage:[UIImage imageNamed:@"icon_nonmember.png"]];
        cell.statusBtn.hidden = NO;
    } else {
        
    }
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    NSLog(@"SearchViewController fromSegue : %@", self.fromSegue);
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    if([self.fromSegue isEqualToString:@"BOARD_SEARCH_MODAL"]){
        //[self performSegueWithIdentifier:@"BOARD_SEARCH_DETAIL_VIEW" sender:indexPath];
        [self selectedBoardItemType:indexPath];
        
    } else if([self.fromSegue isEqualToString:@"POST_SEARCH_MODAL"] || [self.fromSegue isEqualToString:@"BOARD_POST_SEARCH_MODAL"]){
        [self performSegueWithIdentifier:@"SEARCH_POST_DETAIL_PUSH" sender:indexPath];
        
    } else if([self.fromSegue isEqualToString:@"POST_BOARD_SEARCH_MODAL"]){
        [self performSegueWithIdentifier:@"SEARCH_POST_WRITE_MODAL" sender:indexPath];
        
    } else if([self.fromSegue isEqualToString:@"SEARCH_CHAT_LIST_MODAL"]){
        self.navigationController.navigationBar.topItem.title = @"";
        
        [tableView deselectRowAtIndexPath:indexPath animated:YES];
        ChatViewController *destination = [self.storyboard instantiateViewControllerWithIdentifier:@"ChatViewController"];
        
        //self.navigationController.navigationBar.barTintColor = [MFUtil myRGBfromHex:@"1D4696"];
        //self.navigationController.navigationBar.tintColor = [UIColor whiteColor];
        
        RightSideViewController *rightViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"RightSideViewController"];
        CGRect screen = [[UIScreen mainScreen]bounds];
        CGFloat screenWidth = screen.size.width;
        CGFloat screenHeight = screen.size.height;
        rightViewController.view.frame = CGRectMake(rightViewController.view.frame.origin.x, rightViewController.view.frame.origin.y, screenWidth, screenHeight);
        
        destination.roomName = [NSString urlDecodeString:[[self.chatArray objectAtIndex:indexPath.row] objectForKey:@"ROOM_NM"]];
        destination.roomNo = [[self.chatArray objectAtIndex:indexPath.row] objectForKey:@"ROOM_NO"];
        destination.roomNoti = [[self.chatArray objectAtIndex:indexPath.row] objectForKey:@"ROOM_NOTI"];
        rightViewController.roomNo = [[self.chatArray objectAtIndex:indexPath.row] objectForKey:@"ROOM_NO"];
        rightViewController.roomNoti = [[self.chatArray objectAtIndex:indexPath.row] objectForKey:@"ROOM_NOTI"];
        
        LGSideMenuController *container = [LGSideMenuController sideMenuControllerWithRootViewController:destination leftViewController:nil rightViewController:rightViewController];
        [container setNavigationItemTitle:[NSString urlDecodeString:destination.roomName]];
        
        NSString *sqlString = [NSString stringWithFormat:@"UPDATE CHAT_ROOMS SET NEW_CHAT = 0 WHERE ROOM_NO=%@;",  [[self.chatArray objectAtIndex:indexPath.row] objectForKey:@"ROOM_NO"]];
        [self crudStatement:self.DBPath :sqlString];
        
        [self.tabBarController.tabBar setHidden:YES];
        [self.navigationController pushViewController:container animated:YES];
    }
}

- (void)tapDetected:(id)sender{
    
}

-(void)boardLongClick:(UILongPressGestureRecognizer *)gesture{
    CGPoint p = [gesture locationInView:self.tableView];
    NSIndexPath *indexPath = [self.tableView indexPathForRowAtPoint:p];
    if (indexPath == nil) {
        //NSLog(@"long press on table view but not on a row");
    } else if (gesture.state == UIGestureRecognizerStateBegan) {
        NSString *itemType = [[self.boardDataSetArray objectAtIndex:indexPath.row] objectForKey:@"ITEM_TYPE"];
        if([itemType isEqualToString:@"JOIN_STANDBY"]){
            UIAlertController *alert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"join_sns_toast8", @"join_sns_toast8") message:nil preferredStyle:UIAlertControllerStyleAlert];
            UIAlertAction* okButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"확인", @"확인") style:UIAlertActionStyleDefault
                                                             handler:^(UIAlertAction * action) {
                                                                 NSString *snsNo = [[self.boardDataSetArray objectAtIndex:indexPath.row] objectForKey:@"SNS_NO"];
                                                                 [alert dismissViewControllerAnimated:YES completion:nil];
                                                                 [self callWebService:@"withdrawSNS" :snsNo];
                                                             }];
            UIAlertAction *cancelButton = [UIAlertAction actionWithTitle:NSLocalizedString(@"취소", @"취소")
                                                                   style:UIAlertActionStyleCancel
                                                                 handler:^(UIAlertAction * action){
                                                                     [alert dismissViewControllerAnimated:YES completion:nil];
                                                                 }];
            
            [alert addAction:okButton];
            [alert addAction:cancelButton];
            [self presentViewController:alert animated:YES completion:nil];
        }
    } else {
        //NSLog(@"gestureRecognizer.state = %ld", gesture.state);
    }
}

-(void)selectedBoardItemType:(NSIndexPath *)indexPath{
    //NSLog(@"self.boardDataSetArray : %@", self.boardDataSetArray);
    NSString *itemType = [[self.boardDataSetArray objectAtIndex:indexPath.row] objectForKey:@"ITEM_TYPE"];
    NSLog(@"itemType : %@", itemType);
    NSString *snsNo = [[self.boardDataSetArray objectAtIndex:indexPath.row] objectForKey:@"SNS_NO"];
    NSString *snsName = [NSString urlDecodeString:[[self.boardDataSetArray objectAtIndex:indexPath.row] objectForKey:@"SNS_NM"]];
    
    if([itemType isEqualToString:@"MEMBER"]){
        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
        TeamSelectController *vc = (TeamSelectController *)[storyboard instantiateViewControllerWithIdentifier:@"TeamSelectController"];
        UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:vc];
        
        vc.snsNo = snsNo;
        vc.snsName = snsName;
        vc.snsInfoDic = [self.boardDataSetArray objectAtIndex:indexPath.row];
        vc.fromSegue = @"BOARD_SEARCH_MODAL";
        self.navigationController.navigationBar.topItem.title = @"";
        [self presentViewController:nav animated:YES completion:nil];
        
    } else if([itemType isEqualToString:@"NOMEMBER"]){
        UIAlertController *alert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"join_sns_toast0", @"join_sns_toast0"), snsName] message:nil preferredStyle:UIAlertControllerStyleAlert];
        UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                         handler:^(UIAlertAction * action) {
                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                             //[self callJoinSNS:snsNo];
                                                             [self callWebService:@"joinSNS" :snsNo];
                                                         }];
        
        UIAlertAction* cancelButton = [UIAlertAction actionWithTitle:@"취소" style:UIAlertActionStyleDefault
                                                             handler:^(UIAlertAction * action) {
                                                                 [alert dismissViewControllerAnimated:YES completion:nil];
                                                             }];
        [alert addAction:okButton];
        [alert addAction:cancelButton];
        [self presentViewController:alert animated:YES completion:nil];
        
    } else if([itemType isEqualToString:@"JOIN_STANDBY"]){
        UIAlertController *alert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"join_sns_toast4", @"join_sns_toast4"), snsName] message:nil preferredStyle:UIAlertControllerStyleAlert];
        UIAlertAction* okButton = [UIAlertAction actionWithTitle:@"확인" style:UIAlertActionStyleDefault
                                                         handler:^(UIAlertAction * action) {
                                                             [alert dismissViewControllerAnimated:YES completion:nil];
                                                         }];
        [alert addAction:okButton];
        [self presentViewController:alert animated:YES completion:nil];
        
    } else {
        
    }
}


- (UIImage *)getScaledImage:(UIImage *)image scaledToMaxWidth:(CGFloat)width {
    CGFloat oldWidth = image.size.width;
    CGFloat oldHeight = image.size.height;
    
    CGFloat scaleFactor=1;
    
    //if (oldWidth > width) {
    scaleFactor = width / oldWidth;
    //} else  //oldWidth<width and height==0이면, scale하지 않음.
    //    return image;
    
    CGFloat newHeight = oldHeight * scaleFactor;
    CGFloat newWidth = oldWidth * scaleFactor;
    CGSize newSize = CGSizeMake(newWidth, newHeight);
    
    //NSLog(@"oldWidth : %f, oldHeight : %f", oldWidth, oldHeight);
    //NSLog(@"newWidth : %f, newHeight : %f", newWidth, newHeight);
    
    //UIGraphicsBeginImageContext(newSize);
    UIGraphicsBeginImageContextWithOptions(newSize, NO, [UIScreen mainScreen].scale);
    [image drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)];
    UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return newImage;
}
- (UIImage*)imageByScalingAndCroppingForSize:(CGSize)targetSize :(UIImage *)image
{
    UIImage *sourceImage = image;
    UIImage *newImage = nil;
    CGSize imageSize = sourceImage.size;
    CGFloat width = imageSize.width;
    CGFloat height = imageSize.height;
    CGFloat targetWidth = targetSize.width;
    CGFloat targetHeight = targetSize.height;
    CGFloat scaleFactor = 0.0;
    CGFloat scaledWidth = targetWidth;
    CGFloat scaledHeight = targetHeight;
    CGPoint thumbnailPoint = CGPointMake(0.0,0.0);
    
    if (CGSizeEqualToSize(imageSize, targetSize) == NO)
    {
        CGFloat widthFactor = targetWidth / width;
        CGFloat heightFactor = targetHeight / height;
        
        if (widthFactor > heightFactor)
            scaleFactor = widthFactor; // scale to fit height
        else
            scaleFactor = heightFactor; // scale to fit width
        scaledWidth  = width * scaleFactor;
        scaledHeight = height * scaleFactor;
        
        // center the image
        if (widthFactor > heightFactor)
        {
            thumbnailPoint.y = (targetHeight - scaledHeight) * 0.5;
        }
        else
            if (widthFactor < heightFactor)
            {
                thumbnailPoint.x = (targetWidth - scaledWidth) * 0.5;
            }
    }
    
    //UIGraphicsBeginImageContext(targetSize); // this will crop
    UIGraphicsBeginImageContextWithOptions(targetSize, NO, [UIScreen mainScreen].scale);
    
    CGRect thumbnailRect = CGRectZero;
    thumbnailRect.origin = thumbnailPoint;
    thumbnailRect.size.width  = scaledWidth;
    thumbnailRect.size.height = scaledHeight;
    
    [sourceImage drawInRect:thumbnailRect];
    
    newImage = UIGraphicsGetImageFromCurrentImageContext();
    if(newImage == nil)
        NSLog(@"could not scale image");
    
    //pop the context to get back to the default
    UIGraphicsEndImageContext();
    return newImage;
}

#pragma mark - UIScrollView Delegate
- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate{
    CGRect screen = [[UIScreen mainScreen]bounds];
    CGFloat screenWidth = screen.size.width;
    CGFloat screenHeight = screen.size.height;
    if ([MFUtil retinaDisplayCapable]) {
        screenHeight = screenHeight*2;
        screenWidth = screenWidth*2;
    }
    int height = 270;
    
    NSArray *tmp = [MODEL_NAME componentsSeparatedByString:@" "];
    if ([tmp[1] hasPrefix:@"5"]) {
        height = 370;
    }else if ([tmp[1] hasPrefix:@"6"] || [tmp[1] hasPrefix:@"7"] || [tmp[1] hasPrefix:@"8"] || [tmp[1] hasPrefix:@"X"]) {
        if (tmp.count==2) {
            height = 570;
        }else{
            height = 470;
        }
        
    }
    /*else {
     height = 660;
     }
     */
    if (scrollView.contentSize.height-scrollView.contentOffset.y<470) {
        CGPoint offset = scrollView.contentOffset;
        CGRect bounds = scrollView.bounds;
        CGSize size = scrollView.contentSize;
        UIEdgeInsets inset = scrollView.contentInset;
        float y = offset.y + bounds.size.height - inset.bottom;
        float h = size.height;
        
        float reload_distance = 10;
        
        
        if(y > h + reload_distance) {
            //데이터로드
            //[self performSelector:@selector(callGetPostList:)];
            
            if([self.fromSegue isEqualToString:@"BOARD_SEARCH_MODAL"]){
                
            } else if([self.fromSegue isEqualToString:@"POST_SEARCH_MODAL"] || [self.fromSegue isEqualToString:@"BOARD_POST_SEARCH_MODAL"]){
                //[self callGetPostList:searchText];
                [self callWebService:@"getPostLists" :searchText];
            }
            
        }
    }
    [self scrollViewDidEndDragging2:scrollView willDecelerate:NO];
}
- (void)scrollViewDidEndDragging2:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate
{
    if(isRefresh)
    {
        return ;
    }
    
    isDragging = NO;
    if(scrollView.contentOffset.y <= -REFRESH_HEADER_DEFAULT_HEIGHT)
    {
        [self startLoading];
    }
}
- (void)startLoading
{
    //PullRefreshTableView의 StartLoading 호출
    [self startLoading2];
    
    //데이터새로고침
    //    if([self.fromSegue isEqualToString:@"BOARD_SEARCH_MODAL"]){
    //
    //    } else if([self.fromSegue isEqualToString:@"POST_SEARCH_MODAL"] || [self.fromSegue isEqualToString:@"BOARD_POST_SEARCH_MODAL"]){
    //        [self refreshCallGetPostList:searchText];
    //    }
}
- (void)startLoading2
{
    
    isRefresh = YES;
    lbRefreshTime.hidden = NO;
    [UIView beginAnimations:nil context:NULL];
    [UIView setAnimationDuration:0.3];
    [self.tableView setContentInset:UIEdgeInsetsMake(REFRESH_HEADER_DEFAULT_HEIGHT, 0, 0, 0)];
    
    NSString *lbString = [NSString stringWithFormat:@"%@\n마지막으로 불러온 시간 : %@", REFRESH_TITLE_TABLE_LOAD, refreshTime];
    
    [ivRefreshArrow setHidden:YES];
    [lbRefreshTime setText:lbString];
    [spRefresh startAnimating];
    
    //UIEdgeInsets adjustForTabbarInsets = UIEdgeInsetsMake(0, 0, CGRectGetHeight(self.tabBarController.tabBar.frame), 0);
    //self.tableView.contentInset = adjustForTabbarInsets;
    //self.tableView.scrollIndicatorInsets = adjustForTabbarInsets;
    
    [UIView commitAnimations];
    
    
}
- (void)stopLoading
{
    [self performSelector:@selector(_stopLoading) withObject:nil afterDelay:1.f];
}
- (void)deleteLoading
{
    ivRefreshArrow.hidden = YES;
    lbRefreshTime.hidden = YES;
    spRefresh.hidden = YES;
    
}
- (void)_stopLoading
{
    isRefresh = NO;
    
    refreshTime = nil;
    refreshTime = [[self performSelector:@selector(_getCurrentStringTime)] copy];
    
    [UIView beginAnimations:nil context:NULL];
    [UIView setAnimationDelegate:self];
    [UIView setAnimationDuration:0.3];
    
    [UIView setAnimationDidStopSelector:@selector(_stopLoadingComplete)];
    [self.tableView setContentInset:UIEdgeInsetsZero];
    [[ivRefreshArrow layer] setTransform:CATransform3DMakeRotation(M_PI * 2, 0, 0, 1)];
    
    [UIView commitAnimations];
}
- (NSString *)_getCurrentStringTime
{
    NSTimeInterval timeStamp = [[NSDate date] timeIntervalSince1970];
    NSDate *date = [NSDate dateWithTimeIntervalSince1970:timeStamp];
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    [dateFormatter setDateFormat:REFRESH_TIME_FORMAT];
    NSString *returnString = [dateFormatter stringFromDate:date];
    return returnString;
}
- (void)_stopLoadingComplete
{
    NSString *lbString = [NSString stringWithFormat:@"%@\n마지막으로 불러온 시간 : %@", REFRESH_TITLE_TABLE_PULL, refreshTime];
    
    [ivRefreshArrow setHidden:NO];
    
    [lbRefreshTime setText:lbString];
    [spRefresh stopAnimating];
}

- (void)scrollViewDidScroll:(UIScrollView *)scrollView{
    CGFloat scrollOffsetY = scrollView.contentOffset.y;
    //NSLog(@"scrollOffsetY : %f",scrollOffsetY);
    if(isRefresh)
    {
        if(scrollOffsetY > 0)
        {
            self.tableView.contentInset = UIEdgeInsetsZero;
        }
        else if(scrollOffsetY >= - REFRESH_HEADER_DEFAULT_HEIGHT)
        {
            self.tableView.contentInset = UIEdgeInsetsMake(-scrollOffsetY, 0, 0, 0);
        }
    }
    else if(isDragging && scrollOffsetY < 0)
    {
        [UIView beginAnimations:nil context:NULL];
        if(scrollOffsetY < -REFRESH_HEADER_DEFAULT_HEIGHT)
        {
            NSString *lbString = [NSString stringWithFormat:@"%@\n마지막으로 불러온 시간 : %@", REFRESH_TITLE_TABLE_RELEASE, refreshTime];
            [lbRefreshTime setText:lbString];
            [[ivRefreshArrow layer] setTransform:CATransform3DMakeRotation(M_PI, 0, 0, 1)];
        }
        [UIView commitAnimations];
    }
}
- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView{
    if(isRefresh)
    {
        return ;
    }
    
    isDragging = YES;
}
// 테이블뷰 상단의 헤더뷰 초기화
- (void)_initializeRefreshViewOnTableViewTop
{
    UIView *vRefresh = [[UIView alloc] initWithFrame:CGRectMake(0, 0 - REFRESH_HEADER_DEFAULT_HEIGHT, self.tableView.frame.size.width, REFRESH_HEADER_DEFAULT_HEIGHT)];
    [vRefresh setBackgroundColor:[UIColor clearColor]];
    
    if(spRefresh == nil)
    {
        spRefresh = [[UIActivityIndicatorView alloc] init];
    }
    [spRefresh setFrame:CGRectMake((REFRESH_HEADER_DEFAULT_HEIGHT - 30) / 2, (REFRESH_HEADER_DEFAULT_HEIGHT - 20) / 2, 20, 20)];
    [spRefresh setActivityIndicatorViewStyle:UIActivityIndicatorViewStyleGray];
    [spRefresh setColor:[UIColor blackColor]];
    [spRefresh setHidesWhenStopped:YES];
    [vRefresh addSubview:spRefresh];
    
    if(ivRefreshArrow == nil)
    {
        ivRefreshArrow = [[UIImageView alloc] init];
    }
    UIImage *imgArrow = [UIImage imageNamed:@"arrow.png"];
    [ivRefreshArrow setFrame:CGRectMake((REFRESH_HEADER_DEFAULT_HEIGHT - 34) / 2, (REFRESH_HEADER_DEFAULT_HEIGHT - 44) / 2, 24, 37)];
    [ivRefreshArrow setImage:imgArrow];
    [vRefresh addSubview:ivRefreshArrow];
    
    if(lbRefreshTime == nil)
    {
        lbRefreshTime = [[UILabel alloc] init];
    }
    [lbRefreshTime setFrame:CGRectMake(REFRESH_HEADER_DEFAULT_HEIGHT - 10, 0, self.tableView.frame.size.width, REFRESH_HEADER_DEFAULT_HEIGHT)];
    [lbRefreshTime setBackgroundColor:[UIColor clearColor]];
    [lbRefreshTime setFont:[UIFont boldSystemFontOfSize:12.f]];
    [lbRefreshTime setNumberOfLines:2];
    [lbRefreshTime setTextColor:[UIColor lightGrayColor]];
    [vRefresh addSubview:lbRefreshTime];
    
    [self.view addSubview:vRefresh];
}
- (void)_initializeRefreshViewOnTableViewTail{
    UIView *vRefresh = [[UIView alloc] initWithFrame:CGRectMake(0, 840 + REFRESH_HEADER_DEFAULT_HEIGHT, self.tableView.frame.size.width, REFRESH_HEADER_DEFAULT_HEIGHT)];
    [vRefresh setBackgroundColor:[UIColor clearColor]];
    
    if(spRefresh == nil)
    {
        spRefresh = [[UIActivityIndicatorView alloc] init];
    }
    [spRefresh setFrame:CGRectMake((REFRESH_HEADER_DEFAULT_HEIGHT - 30) / 2, (REFRESH_HEADER_DEFAULT_HEIGHT - 20) / 2, 20, 20)];
    [spRefresh setActivityIndicatorViewStyle:UIActivityIndicatorViewStyleGray];
    [spRefresh setColor:[UIColor blackColor]];
    [spRefresh setHidesWhenStopped:YES];
    [vRefresh addSubview:spRefresh];
    
    if(ivRefreshArrow == nil)
    {
        ivRefreshArrow = [[UIImageView alloc] init];
    }
    UIImage *imgArrow = [UIImage imageNamed:@"arrow.png"];
    [ivRefreshArrow setFrame:CGRectMake((REFRESH_HEADER_DEFAULT_HEIGHT - 34) / 2, (REFRESH_HEADER_DEFAULT_HEIGHT - 44) / 2, 24, 37)];
    [ivRefreshArrow setImage:imgArrow];
    [vRefresh addSubview:ivRefreshArrow];
    
    if(lbRefreshTime == nil)
    {
        lbRefreshTime = [[UILabel alloc] init];
    }
    [lbRefreshTime setFrame:CGRectMake(REFRESH_HEADER_DEFAULT_HEIGHT - 10, 0, self.tableView.frame.size.width, REFRESH_HEADER_DEFAULT_HEIGHT)];
    [lbRefreshTime setBackgroundColor:[UIColor clearColor]];
    [lbRefreshTime setFont:[UIFont boldSystemFontOfSize:12.f]];
    [lbRefreshTime setNumberOfLines:2];
    [lbRefreshTime setTextColor:[UIColor lightGrayColor]];
    [vRefresh addSubview:lbRefreshTime];
    
    [self.view addSubview:vRefresh];
    
}

#pragma mark - Navigation

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    if([segue.identifier isEqualToString:@"SEARCH_POST_DETAIL_PUSH"]){
        //UIBarButtonItem *left = [[UIBarButtonItem alloc]initWithTitle:@"" style:UIBarButtonItemStylePlain target:self action:nil];
        //self.navigationItem.backBarButtonItem = left;
        self.navigationController.navigationBar.topItem.title = @"";
        
        PostDetailViewController *destination = segue.destinationViewController;
        NSIndexPath *indexPath = (NSIndexPath *)sender;
        destination.indexPath  = indexPath;
        destination.postInfo = [self.postDataSetArray objectAtIndex:indexPath.item];
        destination._postNo = [[self.postDataSetArray objectAtIndex:indexPath.item] objectForKey:@"POST_NO"];
        destination._snsName = [[self.postDataSetArray objectAtIndex:indexPath.item] objectForKey:@"SNS_NM"];
        destination._postDate = [[self.postDataSetArray objectAtIndex:indexPath.item] objectForKey:@"POST_DATE"];
        destination.fromSegue = segue.identifier;
        
        //        [[NSNotificationCenter defaultCenter] addObserver:self
        //                                                 selector:@selector(noti_DeletePost:)
        //                                                     name:@"noti_DeletePost"
        //                                                   object:nil];
        
        //NSLog(@"dataSetArr : %@", [self.dataSetArray objectAtIndex:indexPath.item]);
        
    } else if([segue.identifier isEqualToString:@"SEARCH_POST_WRITE_MODAL"]){
        PostWriteTableViewController *destination = segue.destinationViewController;
        NSIndexPath *indexPath = (NSIndexPath *)sender;
        destination.snsNo = [[self.boardDataSetArray objectAtIndex:indexPath.row] objectForKey:@"SNS_NO"];
        destination.snsName = [NSString urlDecodeString:[[self.boardDataSetArray objectAtIndex:indexPath.row] objectForKey:@"SNS_NM"]];
        
        //UIBarButtonItem *left = [[UIBarButtonItem alloc]initWithTitle:@"" style:UIBarButtonItemStylePlain target:self action:nil];
        //self.navigationItem.backBarButtonItem = left;
        self.navigationController.navigationBar.topItem.title = @"";
        
    } /*else if([segue.identifier isEqualToString:@"BOARD_SEARCH_DETAIL_VIEW"]){
       TeamSelectController *destination = segue.destinationViewController;
       NSIndexPath *indexPath = (NSIndexPath *)sender;
       
       //destination.isBoard = YES;
       destination.snsNo = [[self.boardDataSetArray objectAtIndex:indexPath.row] objectForKey:@"SNS_NO"];
       destination.snsName = [NSString urlDecodeString:[[self.boardDataSetArray objectAtIndex:indexPath.row] objectForKey:@"SNS_NM"]];
       destination.snsInfoDic = [self.boardDataSetArray objectAtIndex:indexPath.row];
       destination.fromSegue = segue.identifier;
       self.navigationController.navigationBar.topItem.title = @"";
       }*/
    //    else if([segue.identifier isEqualToString:@"SEARCH_CHAT_DETAIL"]){
    //
    //    }
}


@end
