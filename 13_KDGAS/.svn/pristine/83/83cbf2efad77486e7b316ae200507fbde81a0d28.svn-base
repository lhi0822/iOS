//
//  MFInfoViewController.m
//  mFinityHD
//
//  Created by Park on 2014. 5. 30..
//  Copyright (c) 2014ë…„ Jun hyeong Park. All rights reserved.
//

#import "MFInfoViewController.h"
#import "MFinityAppDelegate.h"
#import "UIDevice+IdentifierAddition.h"
#import <dlfcn.h>
@interface MFInfoViewController ()

@end

@implementation MFInfoViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    appDelegate = (MFinityAppDelegate *)[[UIApplication sharedApplication]delegate];
    UILabel *label = [[UILabel alloc]initWithFrame:CGRectMake(0, 0, 180, 44)];
    label.textColor = [appDelegate myRGBfromHex:appDelegate.naviFontColor];
    label.text = NSLocalizedString(@"message26", @"");
    label.font = [UIFont boldSystemFontOfSize:20.0];
    label.backgroundColor = [UIColor clearColor];
    label.textAlignment = NSTextAlignmentCenter;
    if ([appDelegate.naviIsShadow isEqualToString:@"Y"]) {
        label.shadowOffset = CGSizeMake([appDelegate.naviShadowOffset floatValue], [appDelegate.naviShadowOffset floatValue]);
        label.shadowColor = [appDelegate myRGBfromHex:appDelegate.naviShadowColor];
    }self.navigationItem.titleView = label;
    
    NSData *decryptData2 = [[NSData dataWithContentsOfFile:appDelegate.subBgImagePath] AES256DecryptWithKey:appDelegate.AES256Key];
    UIImage *bgImage = [UIImage imageWithData:decryptData2];
    _imageView.image = bgImage;
    NSLog(@"_tableView : %@",_tableView);
    //[self.navigationItem setTitle:NSLocalizedString(@"message26", @"")];
    //_tableView.sectionHeaderHeight = 50;
    //_tableView.rowHeight = 50;
    
}
-(void)viewDidAppear:(BOOL)animated{

    UIInterfaceOrientation toInterfaceOrientation = self.interfaceOrientation;
    if ((toInterfaceOrientation == UIInterfaceOrientationPortrait)||(toInterfaceOrientation == UIInterfaceOrientationPortraitUpsideDown) ) {
        NSData *decryptData = [[NSData dataWithContentsOfFile:appDelegate.subBgImagePath] AES256DecryptWithKey:appDelegate.AES256Key];
        UIImage *bgImage = [UIImage imageWithData:decryptData];
        
        if (bgImage==nil) {
            bgImage = [UIImage imageNamed:@"default2.png"];
        }
        _imageView.image = bgImage;
        
    }else{
        NSData *lDecryptData = [[NSData dataWithContentsOfFile:appDelegate.lSubBgImagePath] AES256DecryptWithKey:appDelegate.AES256Key];
        UIImage *lBgImage = [UIImage imageWithData:lDecryptData];
        
        if (lBgImage==nil) {
            lBgImage = [UIImage imageNamed:@"w_default2.png"];
        }
        _imageView.image = lBgImage;
    }
}
-(void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration{
 
    if ((toInterfaceOrientation == UIInterfaceOrientationPortrait)||(toInterfaceOrientation == UIInterfaceOrientationPortraitUpsideDown) ) {
        NSData *decryptData = [[NSData dataWithContentsOfFile:appDelegate.subBgImagePath] AES256DecryptWithKey:appDelegate.AES256Key];
        UIImage *bgImage = [UIImage imageWithData:decryptData];
        
        if (bgImage==nil) {
            bgImage = [UIImage imageNamed:@"default2.png"];
        }
        _imageView.image = bgImage;
        
    }else{
        NSData *lDecryptData = [[NSData dataWithContentsOfFile:appDelegate.lSubBgImagePath] AES256DecryptWithKey:appDelegate.AES256Key];
        UIImage *lBgImage = [UIImage imageWithData:lDecryptData];
        
        if (lBgImage==nil) {
            lBgImage = [UIImage imageNamed:@"w_default2.png"];
        }
        _imageView.image = lBgImage;
    }
}
#pragma mark
#pragma mark UITableView
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    // Return the number of sections.
    return 7;
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section{
    return 30;
}
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    // Return the number of rows in the section.
    if (section == 0) {
        return 1;
    }else if(section == 1){
		return 2;
	}else {
        return 1;
    }
    
}


// Customize the appearance of table view cells.
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    static NSString *CellIdentifier = @"Cell";
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
    }
    int fontSize = 17;
    NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
    switch ([prefs integerForKey:@"FONT_SIZE"]) {
        case 1:
            fontSize = fontSize+5;
            break;
        case 2:
            fontSize = fontSize+10;
            break;
        default:
            break;
    }
    cell.textLabel.font = [UIFont systemFontOfSize:fontSize];
    cell.textLabel.textColor = [appDelegate myRGBfromHex:appDelegate.subFontColor];
    if([indexPath section]==0){
        cell.textLabel.text = @"Pad";
    }else if([indexPath section]==1)
	{
		
		if(indexPath.row==0){
			NSString *versionStr = [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"];
			NSString *versionString = [NSString stringWithString:NSLocalizedString(@"message27", @"")];
            versionString = [versionString stringByAppendingString:@"\t:   "];
			versionString = [versionString stringByAppendingString:versionStr];
			cell.textLabel.text = versionString;
			
		}else {
			NSString *versionString = [NSString stringWithString:NSLocalizedString(@"message28", @"")];
            versionString = [versionString stringByAppendingString:@"\t:   "];
			versionString = [versionString stringByAppendingString:appDelegate.serverVersion];
            cell.textLabel.textColor = [UIColor blueColor];
			cell.textLabel.text = versionString;
			
		}
        
	}else if ([indexPath section]==2) {
		UIDevice *myDevice = [UIDevice currentDevice];
		NSString *osVersion = @"iOS";
		osVersion = [osVersion stringByAppendingString:@" "];
		osVersion = [osVersion stringByAppendingString:myDevice.systemVersion];
		cell.textLabel.text = osVersion;
	}else if ([indexPath section]==3) {
		cell.textLabel.text = appDelegate.comp_name;
	}else if([indexPath section]==4){
        cell.textLabel.text = appDelegate.user_id;
    }else if ([indexPath section]==5) {
        NSString *deviceId = [self serialNumber];
		NSString *showId = [deviceId substringFromIndex:deviceId.length-5];
        //NSLog(@"device id : %@",deviceId);
        //NSLog(@"show id : %@",showId);
        cell.textLabel.text = showId;
        
		
	}else if ([indexPath section]==6) {
		if (appDelegate.isOffLine) {
            cell.textLabel.text = @"Off-Line Mode";
        }else{
            cell.textLabel.text = @"On-Line Mode";
        }
		
		
	}
    
    cell.backgroundColor = [UIColor clearColor];
    [cell setSelectionStyle:UITableViewCellSelectionStyleNone];
    return cell;
}

- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section {
	NSLog(@"section : %d",section);
	UILabel *label = [[UILabel alloc]init];
	label.backgroundColor = [UIColor blackColor];
    label.alpha = 0.5;
    int fontSize = 17;
    NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
    switch ([prefs integerForKey:@"FONT_SIZE"]) {
        case 1:
            fontSize = fontSize+5;
            break;
        case 2:
            fontSize = fontSize+10;
            break;
        default:
            break;
    }
    label.font = [UIFont systemFontOfSize:fontSize];
    label.textColor = [UIColor whiteColor];
    if (section==0) {
        NSLog(@"section 0");
        
		label.text = @"    App Type";
		return label;
    }else if (section==1) {
        
		label.text = @"    App Version";
		return label;
	}else if(section==2) {
        
		label.text = @"    OS Version";
		return label;
	}else if (section==3) {
        
		label.text = @"    Company";
		return label;
    }else if (section==4) {
        
        label.text = @"    Account";
        return label;
	}else if (section==5) {
        
        label.text = @"    Device Id";
        return label;
	}else if (section==6){
        
		label.text = @"    On-Off Mode";
		return label;
    }else {
        return nil;
    }
	
}
#pragma mark
#pragma mark ETC
- (NSString *) serialNumber
{
    NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
    
    if ([prefs objectForKey:@"UUID"] == nil) {
        [prefs setObject:[[[UIDevice currentDevice] identifierForVendor] UUIDString] forKey:@"UUID"];
        [prefs synchronize];
    }
    
    return [prefs objectForKey:@"UUID"];
    /*
	NSString *serialNumber = nil;
	
	void *IOKit = dlopen("/System/Library/Frameworks/IOKit.framework/IOKit", RTLD_NOW);
	if (IOKit)
	{
		mach_port_t *kIOMasterPortDefault = dlsym(IOKit, "kIOMasterPortDefault");
		CFMutableDictionaryRef (*IOServiceMatching)(const char *name) = dlsym(IOKit, "IOServiceMatching");
		mach_port_t (*IOServiceGetMatchingService)(mach_port_t masterPort, CFDictionaryRef matching) = dlsym(IOKit, "IOServiceGetMatchingService");
		CFTypeRef (*IORegistryEntryCreateCFProperty)(mach_port_t entry, CFStringRef key, CFAllocatorRef allocator, uint32_t options) = dlsym(IOKit, "IORegistryEntryCreateCFProperty");
		kern_return_t (*IOObjectRelease)(mach_port_t object) = dlsym(IOKit, "IOObjectRelease");
		
		if (kIOMasterPortDefault && IOServiceGetMatchingService && IORegistryEntryCreateCFProperty && IOObjectRelease)
		{
			mach_port_t platformExpertDevice = IOServiceGetMatchingService(*kIOMasterPortDefault, IOServiceMatching("IOPlatformExpertDevice"));
			if (platformExpertDevice)
			{
				CFTypeRef platformSerialNumber = IORegistryEntryCreateCFProperty(platformExpertDevice, CFSTR("IOPlatformSerialNumber"), kCFAllocatorDefault, 0);
				if (CFGetTypeID(platformSerialNumber) == CFStringGetTypeID())
				{
					serialNumber = [NSString stringWithString:(__bridge NSString*)platformSerialNumber];
					CFRelease(platformSerialNumber);
				}
				IOObjectRelease(platformExpertDevice);
			}
		}
		dlclose(IOKit);
	}
	
	return serialNumber;
     */
}
#pragma mark
- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

@end
